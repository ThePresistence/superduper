   This file describes how to build and install MNDO2020 using
the configure script. For generic GNU installation instructions,
see the sections beginning with 'Basic Installation' below.


Requirements
============

   To install MNDO2020 the following requirements must be met:

   1. Platform: In theory MNDO2020 should be installable
      on any system that has a working f90 environment
      and a working 'make' facility. In practice, however,
      the following platforms are supported at this point:
      DEC OSF, SGI IRIX, Linux.

   2. Compilers: You need a functioning f90 environment.
      On linux, we highly recommend using the Intel Fortran
      compiler because it gives the highest performance.
      The Lahey-Fujitsu compiler is also supported. The
      Portland group compiler is not recommended because it
      lacks support for REAL*16 which is used in a few places
      where numerical accuracy is crucial.

   3. Libraries: You do not need any special libraries to build
      and install MNDO2020. However, you may want to have your
      own versions of the following three libraries:

      a) BLAS: MNDO2020 needs several BLAS routines. Standard Fortran
         versions of these routines are available in the public 
         domain from http://www.netlib.org/blas/. They are included
         in the distribution and will be chosen if no optimized
         vendor-specific library is found. The configure script
         also provides support for the ATLAS blas library from
         http://math-atlas.sourceforge.net/. It is searched if
         the option --enable-blas=atlas is specified as option to
         the configure script. Please see configure --help for more
         details.

      b) LAPACK: Standard Fortran LAPACK sources may be obtained
         from http://www.netlib.org/lapack/double/. A subset of
         these routines is included in the distribution which is
         treated similarly to the BLAS library. There is support
         for the atlas lapack library but some user intervention
         is required because this library is lacking many routines.
         Please see the FAQ.

      c) Pgplot: This library may be used to generate and plot
         Shavitt graphs. This is mainly for debugging purposes
         and normally neither needed nor recommended. However,
         it can be switched on via the configure script. If
         you want to include pgplot, you must provide it on
         your own. Pgplot is available at
         http://astro.caltech.edu/~tjp/pgplot/
         and to include it, you must build the library libpgplot.a
         and tell the configure script where it can be found.

   4. External programs.
      You need a functioning Bourne shell for the scripts and
      an f90 compiler. Additionally, you may need:

      a) GNU make. On some systems 'make' results in a segmentation
         fault. Normally this is caused by the inability of the 
         'make' program from some vendor to cope with complex,
         automake-generated makefiles. The easiest workaround for
         this problem is to use gnu make instead. We recommend the
         use of gnu make.

      b) GNU awk. The tests require awk, in particular an awk that
         is able to pass long variables to the program from the
         command line, as in awk -f script var1=a:b:...:z file.
         Not all variations of awk can handle this and crash during
         the tests, typically with an error message like

         ======= mopac62.opt
         Test suite 2
         String -6.27798:- ... too long at source line 1

         The obvious workaround is to use gnu awk.

      Other than that you do not need any external programs.
      In particular, autoconf, automake and m4 are only required
      if you want to change the installation procedure. To simply
      install MNDO2020, they are not needed.


Installation
============

   You should be able to compile the program simply by running

   ./configure

   in the top level directory, followed by

   make

   and to run the tests

   make test

   Installation (normally in /usr/local/bin) is done by issuing

   make install

   For generic instructions on installing automake and autoconf
   based programs, see below.


Basic Installation
==================

   These are generic installation instructions.

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory of the package.
It may also create one or more `.h' files containing system-dependent
definitions.  Finally, it creates a shell script `config.status' that
you can run in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile the package, please try
to figure out how `configure' could check whether to do them, and mail
diffs or instructions to the address given in the `README' so they can
be considered for the next release.  If at some point `config.cache'
contains results you don't want to keep, you may remove or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' to configure the package for your system.  If you're
     using `csh' on an old version of System V, you might need to type
     `sh ./configure' instead to prevent `csh' from trying to execute
     `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Optionally, type `make check' to run any self-tests that come with
     the package.

  4. Type `make install' to install the programs and any data files and
     documentation.

  5. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.


Compilers and Options
=====================

   Some systems require unusual options for compilation or linking that
the `configure' script does not know about.  You can give `configure'
initial values for variables by setting them in the environment.  Using
a Bourne-compatible shell, you can do that on the command line like
this:
     CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure


Compiling For Multiple Architectures
====================================

   You can compile the package for more than one kind of computer at the
same time, by placing the object files for each architecture in their
own directory.  To do this, you must use a version of `make' that
supports the `VPATH' variable, such as GNU `make'.  `cd' to the
directory where you want the object files and executables to go and run
the `configure' script.  `configure' automatically checks for the
source code in the directory that `configure' is in and in `..'.

   If you have to use a `make' that does not supports the `VPATH'
variable, you have to compile the package for one architecture at a time
in the source code directory.  After you have installed the package for
one architecture, use `make distclean' before reconfiguring for another
architecture.


Installation Names
==================

   By default, `make install' will install the package's files in
`/usr/local/bin', `/usr/local/man', etc.  You can specify an
installation prefix other than `/usr/local' by giving `configure' the
option `--prefix=PATH'.

   You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If you
give `configure' the option `--exec-prefix=PATH', the package will use
PATH as the prefix for installing programs and libraries.
Documentation and other data files will still use the regular prefix.

   In addition, if you use an unusual directory layout you can give
options like `--bindir=PATH' to specify different values for particular
kinds of files.  Run `configure --help' for a list of the directories
you can set and what kinds of files go in them.

   If the package supports it, you can cause programs to be installed
with an extra prefix or suffix on their names by giving `configure' the
option `--program-prefix=PREFIX' or `--program-suffix=SUFFIX'.


Optional Features
=================

   Some packages pay attention to `--enable-FEATURE' options to
`configure', where FEATURE indicates an optional part of the package.
They may also pay attention to `--with-PACKAGE' options, where PACKAGE
is something like `gnu-as' or `x' (for the X Window System).  The
`README' should mention any `--enable-' and `--with-' options that the
package recognizes.

   For packages that use the X Window System, `configure' can usually
find the X include and library files automatically, but if it doesn't,
you can use the `configure' options `--x-includes=DIR' and
`--x-libraries=DIR' to specify their locations.


Specifying the System Type
==========================

   There may be some features `configure' can not figure out
automatically, but needs to determine by the type of host the package
will run on.  Usually `configure' can figure that out, but if it prints
a message saying it can not guess the host type, give it the
`--host=TYPE' option.  TYPE can either be a short name for the system
type, such as `sun4', or a canonical name with three fields:
     CPU-COMPANY-SYSTEM

See the file `config.sub' for the possible values of each field.  If
`config.sub' isn't included in this package, then this package doesn't
need to know the host type.

   If you are building compiler tools for cross-compiling, you can also
use the `--target=TYPE' option to select the type of system they will
produce code for and the `--build=TYPE' option to select the type of
system on which you are compiling the package.


Sharing Defaults
================

   If you want to set default values for `configure' scripts to share,
you can create a site shell script called `config.site' that gives
default values for variables like `CC', `cache_file', and `prefix'.
`configure' looks for `PREFIX/share/config.site' if it exists, then
`PREFIX/etc/config.site' if it exists.  Or, you can set the
`CONFIG_SITE' environment variable to the location of the site script.
A warning: not all `configure' scripts look for a site script.


Operation Controls
==================

   `configure' recognizes the following options to control how it
operates.

`--cache-file=FILE'
     Use and save the results of the tests in FILE instead of
     `./config.cache'.  Set FILE to `/dev/null' to disable caching, for
     debugging `configure'.

`--help'
     Print a summary of the options to `configure', and exit.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--version'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`configure' also accepts some other, not widely useful, options.
