      SUBROUTINE DIRCGS (FA,H,PA,PPA,LM6,LM4L,NOPRT,PSA,IPSA,JPSA,ICALL)
C     *
C     DIRECT SCF ITERATIONS USING CG-DMS.
C     CONJUGATE GRADIENT DENSITY MATRIX SEARCH USING FULL ARRAYS.
C     SPARSE MATRIX TECHNIQUES ARE EMPLOYED.
C     *
C     NOTATION. I=INPUT, O=OUTPUT, S=SCRATCH.
C     FA(LM4L)  LOCAL RHF FOCK MATRIX (S).
C     H(LM4L)   LOCAL CORE HAMILTONIAN MATRIX (S).
C     PA(LM4L)  LOCAL RHF DENSITY MATRIX (S).
C     PPA(LM6)  SCRATCH ARRAY FOR ONE-CENTER DENSITY MATRIX PPA (S).
C     NOPRT     LOGICAL PRINTING FLAG: NO OUTPUT IF NOPRT IS TRUE (I).
C     ICALL     ERROR FLAG (I,O), NORMALLY NOT CHANGED.
C               =-1 ON OUTPUT: NO SCF CONVERGENCE OR CGDMS ERROR.
C     *
      USE LIMIT, ONLY: LM1
      USE module3
      USE module2
C     IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      IMPLICIT NONE
      INTERFACE
         SUBROUTINE HFOCKS (F,FS,IFS,JFS,NFS,N,IA,IB,MODE,CUTF)
         IMPLICIT NONE
         INTEGER :: N,IA,IB,NFS,MODE
         DOUBLE PRECISION :: CUTF,F(N,*)
         DOUBLE PRECISION, DIMENSION (:), POINTER :: FS
         INTEGER, DIMENSION (:), POINTER :: IFS,JFS
         END SUBROUTINE HFOCKS
      END INTERFACE
C     DECLARATIONS FOR ARGUMENTS.
      INTEGER LM4L,LM6,ICALL
      LOGICAL NOPRT
      DOUBLE PRECISION FA(LM4L),H(LM4L),PA(LM4L),PPA(LM6)
      DOUBLE PRECISION, DIMENSION (:), POINTER :: PSA
      INTEGER, DIMENSION (:), POINTER :: IPSA,JPSA
C     LOCAL PARAMETERS.
      INTEGER, PARAMETER :: ITS=20
C     LOCAL ARRAYS.
      DOUBLE PRECISION, DIMENSION (:), POINTER :: DSA,FSA,Q3,Q4
      INTEGER, DIMENSION (:), POINTER :: IDSA,IFSA,IQ3,IQ4
      INTEGER, DIMENSION (:), POINTER :: JDSA,JFSA,JQ3,JQ4
      INTEGER, ALLOCATABLE :: IW(:)
      INTEGER :: NCG(10),MCG(10)
      DOUBLE PRECISION :: EDS(ITS),EES(ITS),ERS(ITS),PLS(ITS)
      CHARACTER*4 :: MXS(ITS),MFS(ITS)
C     LOCAL VARIABLES.
      INTEGER :: I,I1,I2,IA,IB,IDIIS,IDIIS1,ie,IFAMAX,IQ3MAX,ITSPRT
      INTEGER :: J,JDIIS,K,K1,K2,KEXT,KITSCF,KTRIAL
      INTEGER :: MODE1,MODE2,MPDIAG,MX1P
      INTEGER :: N4,NB6,NDIIS,NFSA,NITER,NPRINT,NPRNT2,NPSA
      DOUBLE PRECISION :: B3,CUTF,CUTP,EDMAX,EEP,EERROR
      DOUBLE PRECISION :: EF,EFA,EFX,EH,EHA,EHX,EN
      DOUBLE PRECISION :: FASYMM,PL,PM,SPARFA,SPARPA,TR
      LOGICAL :: DODIIS,HEVAL,PRT,PRT2,WEVAL
      CHARACTER*4 :: MEXT,MFAST
C     COMMON BLOCK VARIABLES AND ARRAYS.
      INTEGER :: NUMAT,NAT,NFIRST,NLAST
      INTEGER :: IN2,NBF,ITSAVE,NCGTOT
      INTEGER :: NUMB,NORBS,NMOS,NALPHA,NBETA
C     INTEGER :: KRESET,MPRINT
C     DOUBLE PRECISION :: T2
      DOUBLE PRECISION :: ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
      DOUBLE PRECISION :: EE,ENUCLR,EAT,ATHEAT,XN4
      DOUBLE PRECISION :: EBIND,SCFCRT,PLCRT,SCFCRS
      CHARACTER*80 :: KTITLE,KOMENT
      COMMON
     ./ATOMS / NUMAT,NAT(LM1),NFIRST(LM1),NLAST(LM1)
     ./CONSTN/ ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
     ./ENERGT/ EE,ENUCLR,EAT,ATHEAT
     ./FLAG1 / KTITLE,KOMENT
     ./INOPT2/ IN2(300)
     ./INOPT4/ XN4(50)
     ./NBFILE/ NBF(20)
     ./ORBITS/ NUMB,NORBS,NMOS,NALPHA,NBETA
     ./SCFPRT/ EBIND(6),ITSAVE
     ./SCRT  / SCFCRT,PLCRT,SCFCRS(2)
     ./STATCG/ NCGTOT(20)
C
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** INPUT OPTIONS.
      IDIIS  = IN2(9)
      IDIIS1 = MAX(1,MOD(IDIIS,10))
C     JDIIS  = IDIIS/10
      KTRIAL = IN2(67)
      KITSCF = IN2(71)
      NPRINT = IN2(72)
      CUTF   = XN4(20)
      CUTP   = XN4(21)
C *** INITIALIZATION.
C     INFO   = 0
      KEXT   = 0
      MCG    = 0
      MPDIAG = 0
      NCG    = 0
      NDIIS  = 0
      NITER  = 0
      EEP    = ZERO
      PL     = ZERO
      SPARFA = ZERO
      SPARPA = ZERO
      DODIIS = .FALSE.
      PRT    = .NOT.NOPRT
      PRT2   = PRT .AND. NPRINT.GE.2
      NPRNT2 = 0
      IF(NPRINT.GT.9) NPRNT2=NPRINT
C
C *** DEFINE INITIAL SPARSE DENSITY MATRIX.
C     DEALLOCATE ARRAYS FOR DENSITY MATRIX BEFORE GENERATING NEW GUESS.
      IF (KTRIAL.GE.0 .AND. ASSOCIATED(PSA)) THEN
         DEALLOCATE (PSA,IPSA,JPSA,STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','PSA',1,1)
      ENDIF
C
C     GENERATE DIAGONAL GUESS.
      IF (KTRIAL.GE.0 .AND. KTRIAL.NE.3) THEN
C        ALLOCATE ARRAYS FOR DIAGONAL INITIAL DENSITY MATRIX.
         ALLOCATE (PSA(NORBS),JPSA(NORBS),IPSA(NORBS+1),STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','PSA',NORBS,0)
C        COMPUTE DIAGONAL DENSITY MATRIX.
         CALL SPARSP (PSA,PPA,IPSA,JPSA,LM6,MPDIAG)
         NPSA   = NORBS
         IF(NPRINT.GE.7) THEN
            CALL TRACEAP (NORBS,PSA,JPSA,IPSA,TR)
            WRITE(NB6,420) TR
         ENDIF
C
C     GENERATE BLOCK-DIAGONAL GUESS FROM FRAGMENT DENSITIES.
      ELSE IF(KTRIAL.EQ.3) THEN
C        READ NON-ZERO INITIAL DENSITY MATRIX ELEMENTS FROM FILE.
C        FIRST RECORD: NUMBER OF SUCH ELEMENTS (K2).
C        NEXT RECORDS: INDICES (I,J) AND VALUES (B3) FOR EACH ELEMENT.
C        TOTAL OF K2+1 RECORDS, OFF-DIAGONAL ELEMENTS STORED ONLY ONCE.
         OPEN (13,FILE=KTITLE(2:),STATUS='OLD')
         READ (13,*) K2
C        ALLOCATE ARRAYS FOR BLOCK-DIAGONAL INITIAL DENSITY MATRIX.
         N4 = (K2-NORBS)*2+NORBS
         ALLOCATE (PSA(N4),JPSA(N4),IPSA(N4),IW(NORBS+1),STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','PSA',NORBS,0)
C        PROCESS INPUT DATA (K2 MATRIX ELEMENTS).
         I1 = 0
         I2 = 0
         K1 = 0
         DO K=1,K2
            READ (13,*) I,J,B3
            IF(I.EQ.1 .AND. J.EQ.1) THEN
               I2 = I1+I2
            ENDIF
            K1 = K1+1
            PSA(K1)  = B3
            JPSA(K1) = I+I2
            IPSA(K1) = J+I2
            IF(I.NE.J) THEN
               K1 = K1+1
               PSA(K1)  = B3
               JPSA(K1) = J+I2
               IPSA(K1) = I+I2
            ENDIF
            I1 = I
         END DO
         CLOSE (13,STATUS='KEEP')
         IF(NPRINT.GE.7) THEN
            CALL TRACEAP (NORBS,PSA,JPSA,IPSA,TR)
            WRITE(NB6,420) TR
         ENDIF
C        CONVERT TO COMPRESSED ROW FORMAT.
         ALLOCATE (IW(NORBS+1),STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','IW',NORBS+1,0)
         CALL coicsrp (NORBS,K1,PSA,JPSA,IPSA,IW)
           IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','coicsr',ie,0)
         DEALLOCATE (IW,STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','IW',NORBS+1,1)
C        REMOVE SMALL MATRIX ELEMENTS.
         NPSA=IPSA(NORBS+1)-1
         CALL filterp (NORBS,1,CUTP,PSA,JPSA,IPSA,PSA,JPSA,IPSA,NPSA,ie)
         NPSA=IPSA(NORBS+1)-1
      ENDIF
C
C *** HEADER FOR DETAILED OUTPUT.
      IF(PRT2) THEN
         IF(IDIIS.LE.0) THEN
            WRITE(NB6,500)
         ELSE
            WRITE(NB6,505)
         ENDIF
      ENDIF
C     *
C *** START OF SCF LOOP.
C     *
  20  CONTINUE
      HEVAL  = .TRUE.
      WEVAL  = .TRUE.
      EF     = ZERO
      EH     = ZERO
      IF(HEVAL) ENUCLR = ZERO
C     EXTRACT ONE-CENTER DENSITY MATRIX ELEMENTS (PPA) FROM SPARSE
C     DENSITY MATRIX (PSA).
      CALL PONES (PPA,PSA,IPSA,JPSA,LM6,NORBS)
C     APPLY CUTOFFS TO DENSITY MATRIX.
      IF(CUTP.GT.ZERO) THEN
         NPSA=IPSA(NORBS+1)-1
         CALL filterp (NORBS,1,CUTP,PSA,JPSA,IPSA,PSA,JPSA,IPSA,NPSA,ie)
         NPSA=IPSA(NORBS+1)-1
      ENDIF
C
C *** CONSTRUCT THE FOCK MATRIX FOR RHF.
C *** CALCULATE CONTRIBUTIONS TO THE ELECTRONIC ENERGY.
      MODE1  = 1
      MODE2  = 2
      EFA    = ZERO
      EHA    = ZERO
C *** FIRST PASS: COUNT NUMBER OF NON-ZERO FOCK MATRIX ELEMENTS (NFSA).
      NFSA   = 0
      DO 25 I=1,NUMAT
      IA     = NFIRST(I)
      IB     = NLAST(I)
C     GET SLICE OF LOCAL DENSITY (PA) FROM SPARSE DENSITY MATRIX (PSA).
      CALL HFOCKS (PA,PSA,IPSA,JPSA,NPSA,NORBS,IA,IB,MODE1,CUTP)
C     GENERATE SLICE OF FOCK MATRIX (FA).
      CALL HFOCKP (H,FA,PA,PA,PPA,PPA,NORBS,LM6,I,I,HEVAL,WEVAL,
     1             EFX,EHX,EN,NPRINT,NITER)
C     COUNT NUMBER OF NON-ZERO ELEMENTS IN SLICE OF FOCK MATRIX (FA).
      CALL UTIL (FA,NFSA,NORBS,IA,IB,CUTF)
   25 CONTINUE
C *** ALLOCATE SCRATCH ARRAY FOR FOCK MATRIX (Q4).
      ALLOCATE (Q4(NFSA),JQ4(NFSA),IQ4(NORBS+1),STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','Q4',NFSA,0)
C *** SECOND PASS: COMPUTE FOCK MATRIX (Q4).
      NFSA   = 0
      DO 30 I=1,NUMAT
      IA     = NFIRST(I)
      IB     = NLAST(I)
C     GET SLICE OF LOCAL DENSITY (PA) FROM SPARSE DENSITY MATRIX (PSA).
      CALL HFOCKS (PA,PSA,IPSA,JPSA,NPSA,NORBS,IA,IB,MODE1,CUTP)
C     GENERATE SLICE OF FOCK MATRIX (FA).
      CALL HFOCKP (H,FA,PA,PA,PPA,PPA,NORBS,LM6,I,I,HEVAL,WEVAL,
     1             EFX,EHX,EN,NPRNT2,NITER)
C     INCLUDE SLICE OF FOCK MATRIX (FA) INTO SPARSE FOCK MATRIX (Q4).
      CALL HFOCKS (FA,Q4,IQ4,JQ4,NFSA,NORBS,IA,IB,MODE2,CUTF)
      EFA    = EFA+EFX
      EHA    = EHA+EHX
      IF(HEVAL) ENUCLR = ENUCLR+EN
   30 CONTINUE
      IF(HEVAL) ENUCLR = ENUCLR*PT5
C
C *** SYMMETRIZATION OF FOCK MATRIX.
C     TRANSPOSE FOCK MATRIX (Q4) INTO NEW ARRAY (Q3).
      N4=IQ4(NORBS+1)-1
      ALLOCATE (Q3(N4),JQ3(N4),IQ3(NORBS+1),STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','Q3',N4,0)
      CALL csrcscp (NORBS,Q4,JQ4,IQ4,Q3,JQ3,IQ3)
C
C     SYMBOLIC ADDITION (Q4+Q3) TO FIND NUMBER OF ELEMENTS (N4).
      ALLOCATE (IW(NORBS+1),STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','IW',NORBS,0)
      CALL aplbdgp (NORBS,JQ4,IQ4,JQ3,IQ3,N4,IW)
C
C     DEBUG PRINT FOR MAXIMUM DEVIATION FROM SYMMETRY (FSA).
C     THE CALL TO aplb YIELDS FSA = Q4 - Q3
      IF(NPRINT.GE.7) THEN
         ALLOCATE (FSA(N4),JFSA(N4),IFSA(NORBS+1),STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','FSA',N4,0)
         IQ3MAX = IQ3(NORBS+1)-1
         Q3(1:IQ3MAX) = -Q3(1:IQ3MAX)
         CALL aplbp (NORBS,Q4,JQ4,IQ4,Q3,JQ3,IQ3,FSA,JFSA,IFSA,N4,IW,ie)
            IF(ie.NE.0) CALL XERSPA (ie,'aplb','DIRCGS',1)
         IFAMAX = IDAMAXP(N4,FSA)
         FASYMM = ABS(FSA(IFAMAX))
         WRITE(NB6,650) FASYMM
         Q3(1:IQ3MAX) = -Q3(1:IQ3MAX)
         DEALLOCATE (FSA,IFSA,JFSA,STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','FSA',NORBS,1)
      ENDIF
C     SYMMETRIZE FOCK MATRIX.
C     THE CALL TO aplb YIELDS FSA = Q4 + Q3
      ALLOCATE (FSA(N4),JFSA(N4),IFSA(NORBS+1),STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','FSA',N4,0)
      CALL aplbp (NORBS,Q4,JQ4,IQ4,Q3,JQ3,IQ3,FSA,JFSA,IFSA,N4,IW,ie)
         IF(ie.NE.0) CALL XERSPA (ie,'aplb','DIRCGS',1)
C     NEW MATRIX (FSA) SCALED BY PT5 (0.5)
C     TO YIELD THE SYMMETRIZED FOCK MATRIX (FSA).
      DEALLOCATE (Q3,JQ3,IQ3,IW,Q4,IQ4,JQ4,STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','Q3',N4,1)
      FSA(1:N4) = PT5*FSA(1:N4)
      CALL filterp (NORBS,1,CUTF,FSA,JFSA,IFSA,FSA,JFSA,IFSA,N4,ie)
        IF(ie.ne.0) CALL XERSPA (ie,'filter','DIRCGS',4)
C
C *** APPLY DIIS CONVERGENCE ACCELERATION.
C     NOT YET IMPLEMENTED.
      DODIIS = IDIIS.GT.0 .AND. NITER.GE.IDIIS1 .AND. KEXT.NE.-1
      IF(DODIIS) THEN
         EDMAX = ZERO
      ENDIF
C
C *** CALL TO FILTERP NOT NEEDED SINCE CUTOFF HAS ALREADY BEEN APPLIED
C     DURING GENERATION OF FOCK MATRIX (SEE HFOCKS, ARGUMENT CUTF).
C     N4=IQ4(NORBS+1)-1
C     CALL filterp (NORBS,1,CUTF,Q4,JQ4,IQ4,Q4,JQ4,IQ4,N4,ie)
C       IF(ie.ne.0) CALL XERSPA (ie,'filter','DIRCGS',4)
C
C *** CALCULATE THE ELECTRONIC ENERGY.
      EF     = EFA*TWO
      EH     = EHA*TWO
      EE     = EF+EH
      EERROR = EE-EEP
      EEP    = EE
C
C *** PRINT OR SAVE SCF INFORMATION.
      IF(NITER.EQ.0 .AND. PRT .AND. NPRINT.GE.5) THEN
         WRITE(NB6,510) NITER,EH
         WRITE(NB6,510) NITER,EE,EF
      ENDIF
      IF(PRT2 .OR. (NITER.GT.0 .AND. NITER.LE.ITS)) THEN
         IF(DODIIS) THEN
            MEXT  = 'DIIS'
         ELSE IF(KEXT.GE.2) THEN
            MEXT  = 'DAMP'
         ELSE IF(KEXT.EQ.1) THEN
            MEXT  = 'YES '
         ELSE
            MEXT  = 'NO  '
         ENDIF
         IF(NCG(7).EQ.MCG(7)) THEN
            MFAST = 'NO  '
         ELSE
            MFAST = 'YES '
         ENDIF
         IF(PRT2) THEN
            IF(DODIIS) THEN
               WRITE(NB6,515) NITER,EE,EERROR,PL,MEXT,MFAST,EDMAX,
     1                        (NCG(I)-MCG(I),I=1,6)
            ELSE
               WRITE(NB6,510) NITER,EE,EERROR,PL,MEXT,MFAST,
     1                        (NCG(I)-MCG(I),I=1,6)
            ENDIF
         ELSE
            EES(NITER) = EE
            ERS(NITER) = EERROR
            PLS(NITER) = PL
            MXS(NITER) = MEXT
            MFS(NITER) = MFAST
            EDS(NITER) = EDMAX
         ENDIF
      ENDIF
C     DEBUG PRINT.
      IF(NPRINT.GE.3) THEN
         IF(CUTF.GT.ZERO) THEN
            SPARFA = 100.0D0*(ONE-DBLE(NFSA)/DBLE(NORBS*NORBS))
            WRITE(NB6,610) CUTF,SPARFA
         ENDIF
         IF(CUTP.GT.ZERO) THEN
            SPARPA = 100.0D0*(ONE-DBLE(NPSA)/DBLE(NORBS*NORBS))
            WRITE(NB6,620) CUTP,SPARPA
         ENDIF
      ENDIF
      IF(NPRINT.GE.9) THEN
         WRITE(NB6,700) NITER,EH,EF
         WRITE(NB6,720) NITER
         CALL SPAPRT (FSA,IFSA,JFSA,NORBS)
         WRITE(NB6,730) NITER
         CALL SPAPRT (PSA,IPSA,JPSA,NORBS)
         WRITE(6,740) NITER,LM6
         WRITE(6,750) (PPA(I),I=1,LM6)
      ENDIF
C *** TEST FOR SCF CONVERGENCE.
      IF(NITER.EQ.0) GO TO 50
      IF(KEXT.EQ.-1) GO TO 100
      IF(ABS(EERROR).LT.SCFCRT .AND. PL.LT.PLCRT .AND. KEXT.NE.1) THEN
         ITSAVE = NITER+1
         KEXT   =-1
      ELSE
         IF(NITER.GT.KITSCF) GO TO 60
      ENDIF
C
C *** UPDATE OF DENSITY MATRIX.
   50 CONTINUE
      MCG    = NCG
      NITER  = NITER+1
C     COPY CURRENT DENSITY MATRIX (PSA) INTO NEW ARRAY (Q3).
      N4=IPSA(NORBS+1)-1
      ALLOCATE (Q3(N4),JQ3(N4),IQ3(NORBS+1),STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','Q3',N4,0)
      CALL copmatp (NORBS,PSA,JPSA,IPSA,Q3,JQ3,IQ3,1)
C
C     CONJUGATE GRADIENT DENSITY MATRIX SEACH (CGDMSS) OR
C     DAVIDON-FLETCHER-POWELL DENSITY MATRIX SEACH (DFPDMS)
C     TO GENERATE UPDATED DENSITY MATRIX (Q3).
      CALL CGDMSS (FSA,Q3,IFSA,IQ3,JFSA,JQ3,NORBS,MPDIAG,NITER,
     +             NCG,PLCRT,ICALL)
      IF(KEXT.EQ.-1) GO TO 100
      IF (ICALL.LT.0) GO TO 60
C
C     DEALLOCATE FOCK MATRIX (FSA) - NO LONGER NEEDED.
      DEALLOCATE (FSA,IFSA,JFSA,STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','FSA',N4,1)
C
C     COPY CURRENT DENSITY MATRIX (Q3->PSA) AND EXTRAPOLATE IF NEEDED.
      CALL BORDS1  (DSA,PSA,Q3,IDSA,IPSA,IQ3,JDSA,JPSA,JQ3,PL,NORBS,
     +              NITER,KEXT)
      DEALLOCATE (Q3,IQ3,JQ3,STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','Q3',N4,1)
      GO TO 20
C     *
C *** NO SCF CONVERGENCE.
C     *
   60 CONTINUE
C     DEALLOCATE ARRAYS FOR DENSITY MATRIX.
      DEALLOCATE (PSA,IPSA,JPSA,STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','PSA',N4,1)
C     PRINTING SECTION: NO SCF CONVERGENCE.
      WRITE(NB6,560) KTITLE
      WRITE(NB6,520)
      IF(.NOT.PRT2) THEN
         IF(IDIIS.LE.0) THEN
            WRITE(NB6,500)
         ELSE
            WRITE(NB6,505)
         ENDIF
         ITSPRT = MIN(NITER,ITS)
         DO 70 I=1,ITSPRT
         IF(IDIIS.GT.0) THEN
            WRITE(NB6,510) I,EES(I),ERS(I),PLS(I),MXS(I),MFS(I),EDS(I)
         ELSE
            WRITE(NB6,510) I,EES(I),ERS(I),PLS(I),MXS(I),MFS(I)
         ENDIF
   70    CONTINUE
         IF(IDIIS.GT.0) THEN
            WRITE(NB6,530) NITER,EE,EERROR,PL,EDMAX
         ELSE
            WRITE(NB6,530) NITER,EE,EERROR,PL
         ENDIF
      ENDIF
      WRITE(NB6,540) SCFCRT,PLCRT
C     IF(KRESET.EQ.1) WRITE(NB6,550)
      IF(ICALL.LT.0)  WRITE(NB6,555)
C     ICALL  = -1 INDICATES FAILURE TO REACH SCF CONVERGENCE.
      ICALL  = -1
      GO TO 200
C     *
C *** END OF SCF LOOP.
C     *
C *** SCF CONVERGENCE HAS BEEN ACHIEVED.
  100 CONTINUE
C     SUCCESSFUL SECOND ATTEMPT FOR SCF USING DIIS.
C     IF(ICALL.EQ.-1 .AND. IDIIS.GT.0) THEN
C        WRITE(NB6,580)
C        ICALL = 0
C     ENDIF
C *** PRINTING SECTION.
      IF(PRT .AND. NPRINT.GE.-1) THEN
         IF(NPRINT.GE.2) WRITE(NB6,590) NITER,(NCG(I),I=1,8)
         IF(CUTF.GT.ZERO .OR. CUTP.GT.ZERO) WRITE(NB6,595)
         IF(CUTF.GT.ZERO) THEN
            SPARFA = 100.0D0*(ONE-DBLE(NFSA)/DBLE(NORBS*NORBS))
            WRITE(NB6,610) CUTF,SPARFA
         ENDIF 
         IF(CUTP.GT.ZERO) THEN
            SPARPA = 100.0D0*(ONE-DBLE(NPSA)/DBLE(NORBS*NORBS))
            WRITE(NB6,620) CUTP,SPARPA
         ENDIF 
         CALL PRTSCFS (FSA,PSA,IFSA,IPSA,JFSA,JPSA,NORBS)
      ENDIF
C
C *** DIPOLE MOMENT.
      CALL DIPOLS (PPA,PPA,LM6,PRT)
C
C *** DEALLOCATE ARRAYS THAT ARE NO LONGER NEEDED.
  200 CONTINUE
      DEALLOCATE (FSA,IFSA,JFSA,STAT=ie)
         IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','FSA',N4,1)
      IF (ASSOCIATED(DSA)) THEN
         DEALLOCATE (DSA,IDSA,JDSA,STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','DSA',N4,1)
      ENDIF
      IF (ASSOCIATED(Q3)) THEN
         DEALLOCATE (Q3,IQ3,JQ3,STAT=ie)
            IF (ie.NE.0) CALL XERALL (ie,'DIRCGS','Q3',N4,1)
      ENDIF
C
C *** UPDATE GLOBAL STATISTICS.
      NCGTOT(1:8) = NCGTOT(1:8)+NCG(1:8)
      NCGTOT(9)   = NCGTOT(9)+NITER
      NCGTOT(10)  = NCGTOT(10)+1
      RETURN
  420 FORMAT(/  1X,'TRACE OF INITIAL SPARSE DENSITY MATRIX:',F10.5)
  500 FORMAT(///5X,'INFORMATION ON SCF ITERATIONS.',
     1       // 5X,'NITER',12X,'ENERGY',14X,'DELTAE',14X,'DELTAP',
     2          8X,'EXTRAP',2X,'CONV',2X,'NCG PUR MXM LIN QU1 QU2'/)
  505 FORMAT(///5X,'INFORMATION ON SCF ITERATIONS.',
     1       // 5X,'NITER',12X,'ENERGY',14X,'DELTAE',14X,'DELTAP',
     2          8X,'EXTRAP',2X,'CONV',9X,'DIIS ERROR'/)
  510 FORMAT(   5X,I3,4X,3F20.10,6X,A4,3X,A4,6I4)
  515 FORMAT(   5X,I3,4X,3F20.10,6X,A4,3X,A4,F20.10,6I4)
  520 FORMAT(// 5X,'UNABLE TO ACHIEVE SCF CONVERGENCE'/)
  530 FORMAT(/  5X,I3,4X,3F20.10,17X,F20.10)
  540 FORMAT(/  5X,'CONVERGENCE CRITERIA',7X,2F20.10//)
C 550 FORMAT(   5X,'NO SCF CONVERGENCE IN GRADIENT CALCULATION'//)
  555 FORMAT(/  5X,'FAILURE IN DENSITY MATRIX SEARCH'//)
  560 FORMAT(///5X,A)
C 570 FORMAT(// 5X,'DIIS EXTRAPOLATION HAS BEEN TURNED ON.')
C 580 FORMAT(/  5X,'SCF CONVERGENCE HAS BEEN ACHIEVED USING DIIS.')
  590 FORMAT(/  1X,'DIRCGS: TOTAL NUMBER OF SCF ITERATIONS  ',I5,
     1       /  1X,'DIRCGS: TOTAL NUMBER OF CG  CYCLES      ',I5,
     2       /  1X,'DIRCGS: TOTAL NUMBER OF PURIFICATIONS   ',I5,
     3       /  1X,'DIRCGS: TOTAL NUMBER OF MATRIX-MULTIP   ',I5,
     4       /  1X,'DIRCGS: LINEAR ROOTS ACCEPTED           ',I5,
     5       /  1X,'DIRCGS: QUADRATIC ROOTS, BY PRESELECTION',I5,
     6       /  1X,'DIRCGS: QUADRATIC ROOTS, BY COMPARISON  ',I5,
     7       /  1X,'DIRCGS: CG SEARCHES CONVERGED           ',I5,
     8       /  1X,'DIRCGS: CG SEARCHES NOT CONVERGED       ',I5)
  595 FORMAT(/  1X,'DIRCGS: SPARSITY AFTER SCF CONVERGENCE.')
C 600 FORMAT(   1X,'DIRCG : CUTF =',G9.2,5X,'SPARSITY OF H =',F7.3,' %')
  610 FORMAT(   1X,'DIRCG : CUTF =',G9.2,5X,'SPARSITY OF F =',F7.3,' %')
  620 FORMAT(   1X,'DIRCG : CUTP =',G9.2,5X,'SPARSITY OF P =',F7.3,' %')
  650 FORMAT(   1X,'DIRCG : MAXIMUM ASYMMETRY OF FOCK MATRIX =',G20.10)
  700 FORMAT(/  1X,'DIRCGS: NITER =',I5,
     1       /  1X,'DIRCGS: EH    =',F20.10,
     2       /  1X,'DIRCGS: EF    =',F20.10)
  720 FORMAT(// 1X,'CURRENT FOCK MATRIX (FA): NITER =',I4)
  730 FORMAT(// 1X,'CURRENT DENSITY MATRIX (PA): NITER =',I4)
  740 FORMAT(/  1X,'DIRCGS: NITER =',I5,
     1       /  1X,'DIRCGS: LM6   =',I5)
  750 FORMAT(   1X,'DIRCGS: PPA',10F10.5)
      END
