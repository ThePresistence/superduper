      SUBROUTINE SET(N,SA,SB,A,B,RAB)
C     *
C     CALCULATION OF AUXILIARY INTEGRALS FOR STO OVERLAPS.
C     *
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION A(15),B(15)
      DIMENSION B0(15),FC(17),BETPOW(17)
C     THE ARRAY B0(I) CONTAINS THE B INTEGRALS FOR ZERO ARGUMENT.
      DATA B0 /2.0D0,0.0D0,0.666666666666667D0,0.0D0,0.4D0,0.0D0,
     1         0.285714285714286D0,0.0D0,0.222222222222222D0,0.0D0,
     2         0.181818181818182D0,0.0D0,0.153846153846154D0,0.0D0,
     3         0.133333333333333D0/
C     THE ARRAY FC(I) CONTAINS THE FACTORIALS OF (I-1).
      DATA FC /1.0D0,1.0D0,2.0D0,6.0D0,24.0D0,120.0D0,720.0D0,5040.0D0,
     1         40320.0D0,362880.0D0,3628800.0D0,39916800.0D0,
     2         4.790016D+08,6.2270208D+09,8.71782912D+10,
     3         1.307674368D+12,2.092278989D+13/
C *** INITIALIZATION.
      ALPHA  = 0.5D0*RAB*(SA+SB)
      BETA   = 0.5D0*RAB*(SA-SB)
C *** AUXILIARY A INTEGRALS FOR CALCULATION OF OVERLAPS.
      C      = EXP(-ALPHA)
      RALPHA = 1.0D0/ALPHA
      A(1)   = C*RALPHA
      DO 10 I=1,N
      A(I+1) = (A(I)*I+C)*RALPHA
   10 CONTINUE
C *** AUXILIARY B INTEGRALS FOR CALCULATION OF OVERLAPS.
C     THE CODE IS VALID ONLY FOR N.LE.14, I.E. FOR OVERLAPS
C     INVOLVING ORBITALS WITH MAIN QUANTUM NUMBERS UP TO 7.
C     BRANCHING DEPENDING ON ABSOLUTE VALUE OF THE ARGUMENT.
      ABSX   = ABS(BETA)
C     ZERO ARGUMENT.
      IF(ABSX.LT.1.0D-06) THEN
CDIR$ SHORTLOOP
C$DIR MAX_TRIPS(64)
*VDIR LOOPCNT=64
*VOCL LOOP,REPEAT(63)
         DO 20 I=1,N+1
         B(I) = B0(I)
   20    CONTINUE
         RETURN
      ENDIF
C     LARGE ARGUMENT.
      IF((ABSX.GT.0.5D0 .AND. N.LE.5) .OR.
     1   (ABSX.GT.1.0D0 .AND. N.LE.7) .OR.
     2   (ABSX.GT.2.0D0 .AND. N.LE.10).OR.
     3    ABSX.GT.3.0D0) THEN
         EXPX   = EXP(BETA)
         EXPMX  = 1.0D0/EXPX
         RX     = 1.0D0/BETA
         B(1)   = (EXPX-EXPMX)*RX
         DO 30 I=1,N
         EXPX   = -EXPX
         B(I+1)= (I*B(I)+EXPX-EXPMX)*RX
   30    CONTINUE
         RETURN
      ENDIF
C     SMALL ARGUMENT.
      IF(ABSX.LE.0.5D0) THEN
         LAST = 6
      ELSE IF(ABSX.LE.1.0D0) THEN
         LAST = 7
      ELSE IF(ABSX.LE.2.0D0) THEN
         LAST = 12
      ELSE
         LAST = 15
      ENDIF
      BETPOW(1) = 1.0D0
      DO 40 M=1,LAST
      BETPOW(M+1) = -BETA*BETPOW(M)
   40 CONTINUE
      DO 60 I=1,N+1
      Y      = 0.0D0
      MA     = 1-MOD(I,2)
      DO 50 M=MA,LAST,2
      Y      = Y+BETPOW(M+1)/(FC(M+1)*(M+I))
   50 CONTINUE
      B(I)   = Y*2.0D0
   60 CONTINUE
      RETURN
      END
