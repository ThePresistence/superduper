      SUBROUTINE GETGEG
C     *
C     GAUSSIAN-TYPE INPUT ROUTINE FOR MOLECULAR GEOMETRY.
C     ADAPTED FROM MOPAC(6.0) WRITTEN BY J.J.P.STEWART.
C     THE CONVENTIONS IN MOPAC(6.0) ALLOW ONLY INPUT IN INTERNAL
C     COORDINATES (I.E. BOND LENGTH, BOND ANGLE, DIHEDRAL ANGLE).
C     *
C     AN ELEMENT IS SPECIFIED BY ITS CHEMICAL SYMBOL OR BY ITS
C     ATOMIC NUMBER (OPTIONALLY FOLLOWED BY ITS ISOTOPIC MASS).
C     *
C     ON EXIT
C     NATOMS    = NUMBER OF ATOMS PLUS DUMMY ATOMS (IF ANY).
C     NUMAT     = NUMBER OF ATOMS WITHOUT DUMMY ATOMS.
C     LABELS    = ARRAY OF ATOMIC LABELS INCLUDING DUMMY ATOMS.
C     NAT       = ARRAY OF ATOMIC LABELS WITHOUT DUMMY ATOMS.
C     GEO       = ARRAY OF INTERNAL COORDINATES.
C     NA        = ARRAY OF LABELS OF ATOMS, BOND LENGTHS.
C     NB        = ARRAY OF LABELS OF ATOMS, BOND ANGLES.
C     NC        = ARRAY OF LABELS OF ATOMS, DIHEDRAL ANGLES.
C     NVAR      = NUMBER OF PARAMETERS TO BE OPTIMIZED.
C     XPARAM    = STARTING VALUE OF PARAMETERS TO BE OPTIMIZED.
C     *
      USE LIMIT, ONLY: LM1, LMV, LMS, LMZ
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL LEADSP
      CHARACTER ELEMNT*2,LINE*80
C     CHARACTER LTXT*1,TXTATM*8
      CHARACTER LINEL*3
      CHARACTER TGEO*12,STRING*80,SIMBOL*10
      CHARACTER ELTEMP*2
      COMMON
     ./AMASS / AMS(LM1)
     ./ATOMS / NUMAT,NAT(LM1),NFIRST(LM1),NLAST(LM1)
     ./CONSTF/ A0,AFACT,EV,EVCAL,PI,W1,W2,BIGEXP
     ./CONSTN/ ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
     ./DFP   / XPARAM(LMV),NVAR
     ./ELEMTS/ ELEMNT(107)
     ./ISTOPE/ CMS(LMZ),BMS(LMZ)
     ./NBFILE/ NBF(20)
     ./PARM1 / GEO(3,LM1),NC(LM1),NB(LM1),NA(LM1),LABELS(LM1),NATOMS
     ./PARM2 / NSYM,LOCPAR(LMS),IDEPFN(LMS),LOCDEP(LMS)
     ./PARM3 / LOC(LMV),NVV
      DIMENSION LGEO(3,LM1),TGEO(3,LM1)
      DIMENSION SIMBOL(LMV)
C     DIMENSION TXTATM(LM1)
      DIMENSION ISTART(40)
C *** FILE NUMBERS.
      NB5    = NBF(5)
      NB6    = NBF(6)
C *** INITIALIZATION.
      MAXTXT = 0
      NATOMS = 0
      NSYM   = 0
      NUMAT  = 0
      NVAR   = 0
      NERR   = 0
      NA(1)  = 0
      NB(1)  = 0
      NC(1)  = 0
      NB(2)  = 0
      NC(2)  = 0
      NC(3)  = 0
      BFACT  = ONE/AFACT
C
C *** READ INPUT DATA, ONE LINE PER ATOM.
   10 READ(NB5,'(A)',END=70,ERR=180)LINE
      IF(LINE.EQ.' ') GO TO 70
      NATOMS = NATOMS+1
      IF(NATOMS.GT.LM1) THEN
       WRITE(NB6,'(//10X,''**** MAX NUMBER OF ATOMS ALLOWED:'',I4)') LM1
       STOP 'GETGEG'
      ENDIF
C *** CHECK FOR DESCRIPTIVE TEXT.
      I      = INDEX(LINE,'(')
      IF(I.NE.0) THEN
         K      = INDEX(LINE,')')
C        TXTATM(NATOMS) = LINE(I:K)
         MAXTXT = MAX(MAXTXT,K-I+1)
         STRING = LINE(1:I-1)//LINE(K+1:)
         LINE   = STRING
C     ELSE
C        TXTATM(NATOMS) = ' '
      ENDIF
C *** CLEAN THE INPUT DATA.
      CALL UPPCAS(LINE(1:80),80)
C     REPLACE KOMMAS BY BLANKS.
      DO 11 I=1,80
      IF(LINE(I:I).EQ.',') LINE(I:I)=' '
   11 CONTINUE
C     INITIALIZE ISTART TO INTERPRET BLANKS AS ZEROS
      DO 15 I=1,10
      ISTART(I) = 80
   15 CONTINUE
C     FIND INITIAL DIGIT OF ALL NUMBERS, CHECK FOR LEADING SPACES
C     FOLLOWED BY A CHARACTER, AND STORE IN ISTART.
      LEADSP = .TRUE.
      NVALUE = 0
      DO 20 I=1,80
         IF(LEADSP .AND. LINE(I:I).NE.' ') THEN
            NVALUE=NVALUE+1
            ISTART(NVALUE)=I
         ENDIF
         LEADSP = LINE(I:I).EQ.' '
   20 CONTINUE
C *** DEFINE ATOMIC NUMBER AND ATOMIC MASS, CHECK FOR ERRORS.
      LINEL  = LINE(ISTART(1):ISTART(1)+2)
      DO 30 J=1,107
      ELTEMP = ELEMNT(J)
      CALL UPPCAS (ELTEMP,2)
      IF(INDEX(' '//LINEL,ELTEMP).NE.0) GO TO 40
   30 CONTINUE
      IF(INDEX(' '//LINEL,' X').NE.0) THEN
         J=99
         GO TO 40
      ENDIF
      WRITE(NB6,'(2A)')' ELEMENT NOT RECOGNIZED: ',LINEL
      NERR   = NERR+1
   40 LABELS(NATOMS)=J
      IF(J.NE.99) THEN
         NUMAT=NUMAT+1
         NAT(NUMAT)=LABELS(NATOMS)
         AMS(NUMAT)=READA(LINE(1:MAX(ISTART(2)-1,1)),ISTART(1),0)
         IF(AMS(NUMAT).GT.1.0D-15) THEN
            WRITE(NB6,'('' FOR ATOM'',I4,''  ISOTOPIC MASS:'',F15.5)')
     1            NATOMS,AMS(NUMAT)
         ELSE
            AMS(NUMAT)=CMS(J)
         ENDIF
      ENDIF
C *** DEFINE REFERENCE ATOMS AND INPUT VARIABLES.
      TGEO(1,NATOMS)=' '
      TGEO(2,NATOMS)=' '
      TGEO(3,NATOMS)=' '
      IF(NATOMS.EQ.1) GO TO 50
      NA(NATOMS)=NINT(READA(LINE,ISTART(2),0))
      CALL GETVAL(LINE(ISTART(3):),GEO(1,NATOMS),TGEO(1,NATOMS))
      IF(NATOMS.EQ.2) GO TO 50
      NB(NATOMS)=NINT(READA(LINE,ISTART(4),0))
      CALL GETVAL(LINE(ISTART(5):),GEO(2,NATOMS),TGEO(2,NATOMS))
      IF(NATOMS.EQ.3) GO TO 50
      NC(NATOMS)=NINT(READA(LINE,ISTART(6),0))
      CALL GETVAL(LINE(ISTART(7):),GEO(3,NATOMS),TGEO(3,NATOMS))
   50 CONTINUE
      GO TO 10
C *** END OF FIRST INPUT SECTION. NOW DEFINE VARIABLES TO BE OPTIMIZED.
C
   70 CONTINUE
      IF(NATOMS.EQ.0) STOP 'GETGEG'
      DO 80 I=1,NATOMS
      LGEO(1,I) = -1
      LGEO(2,I) = -1
      LGEO(3,I) = -1
   80 CONTINUE
      IVAR   =-1
      KERR   = 0
C *** READ STARTING VALUES FOR VARIABLES TO BE OPTIMIZED.
C     ONE LINE PER VARIABLE.
   90 READ(NB5,'(A)',END=180,ERR=180)LINE
      IF(LINE.EQ.' ') THEN
C     IF THE FIRST LINE IS BLANK, CHECK WHETHER ALL COORDINATES ARE
C     DEFINED NUMERICALLY (I.E. NO OPTIMIZED VARIABLES).
C     IF A BLANK LINE IS ENCOUNTERED LATER ON, IT TERMINATES THIS
C     SECTION OF INPUT DATA.
         IF(IVAR.EQ.-1) THEN
            MERR=0
            DO 110 I=1,NATOMS
            IF(GEO(1,I).LT.-998.0D0) MERR=MERR+1
            IF(GEO(2,I).LT.-998.0D0) MERR=MERR+1
            IF(GEO(3,I).LT.-998.0D0) MERR=MERR+1
  110       CONTINUE
            IF(MERR.EQ.0) GO TO 180
            IVAR=NVAR
            GO TO 90
         ELSE
            GO TO 180
         ENDIF
      ENDIF
      CALL UPPCAS(LINE(1:80),80)
C     COLUMN I: START OF LABEL FOR THE INPUT VARIABLE.
      DO 130 I=1,80
      IF(LINE(I:I).NE.' ') GO TO 140
  130 CONTINUE
C     COLUMN L-1: END OF LABEL FOR THE INPUT VARIABLE.
  140 DO 150 L=I,I+12
      IF(LINE(L:L).EQ.' ') GO TO 160
  150 CONTINUE
C     COLUMN IEQ: CONTAINS '=' SIGN (IF THERE IS ONE).
  160 IEQ = 0
      DO 161 IL=I,I+12
      IF(LINE(IL:IL).EQ.'=') THEN
         IEQ = IL
         GO TO 162
      ENDIF
  161 CONTINUE
  162 CONTINUE
C     GET NUMERICAL VALUE OF THE INPUT VARIABLE.
      IF(IEQ.EQ.0) THEN
         SUM = READA(LINE,L,0)
         IL  = L
      ELSE
         SUM = READA(LINE,I,1)
         IL  = IEQ-1
      ENDIF
C     ASSIGN STARTING VALUES OF THE VARIABLES TO BE OPTIMIZED
C     AND IMPOSE SYMMETRY CONDITIONS.
      N=0
      LERR=0
      DO 171 J=1,NATOMS
      DO 170 K=1,3
      IF(TGEO(K,J).EQ.LINE(I:IL) .OR.
     1   TGEO(K,J)(2:).EQ.LINE(I:IL).AND.TGEO(K,J)(1:1).EQ.'-') THEN
         IF(LGEO(K,J).NE.-1) LERR=1
         LGEO(K,J)=LGEO(K,J)+1
         N=N+1
         GEO(K,J)=SUM
         IF(N.EQ.1) THEN
            NVAR=NVAR+1
            LOC(NVAR)=3*(J-1)+K
            XPARAM(NVAR)=SUM
            SIMBOL(NVAR)=TGEO(K,J)(1:10)
            IF(SIMBOL(NVAR)(1:1).EQ.'-') THEN
               WRITE(NB6,'(A)')' NEGATIVE SYMBOLICS MUST BE PRECEEDED'
     1                       //' BY THE POSITIVE EQUIVALENT'
               WRITE(NB6,'(A)')' FAULTY SYMBOLIC:  '//SIMBOL(NVAR)
               STOP 'GETGEG'
            ENDIF
         ENDIF
         IF(N.GT.1) THEN
            NSYM=NSYM+1
            LOCJ=(LOC(NVAR)+2)/3
            LOCK= LOC(NVAR)-(LOCJ-1)*3
            LOCPAR(NSYM)=LOCJ
            IDEPFN(NSYM)=LOCK
            IF(TGEO(K,J)(1:1).EQ.'-') THEN
               IDEPFN(NSYM)=14
               IF(LOCK.NE.3) THEN
                  KERR=KERR+1
                  WRITE(NB6,'(2A)')' ONLY DIHEDRAL SYMBOLICS CAN BE'
     1                           //' PRECEEDED BY A "-" SIGN'
               ENDIF
            ENDIF
            LOCDEP(NSYM)=J
         ENDIF
      ENDIF
  170 CONTINUE
  171 CONTINUE
C     CHECK FOR ERRORS.
      KERR=KERR+LERR
      IF(LERR.EQ.1) THEN
        WRITE(NB6,'(2A)')' THE FOLLOWING SYMBOL HAS BEEN DEFINED MORE'//
     1                   ' THAN ONCE:',LINE(I:L)
         NERR=NERR+1
      ENDIF
      IF(N.EQ.0) THEN
        WRITE(NB6,'(2A)')' THE FOLLOWING SYMBOL WAS NOT USED:',LINE(I:L)
        NERR=NERR+1
      ENDIF
      GO TO 90
C *** END OF SECOND INPUT SECTION.
C     PERFORM SOME MORE ERROR CHECKS.
  180 CONTINUE
      MERR=0
      DO 200 I=1,NATOMS
      IF(GEO(1,I).LT.-998.0D0)MERR=MERR+1
      IF(GEO(2,I).LT.-998.0D0)MERR=MERR+1
      IF(GEO(3,I).LT.-998.0D0)MERR=MERR+1
  200 CONTINUE
      IF(MERR.NE.0) WRITE(NB6,'(I4,A)')MERR, ' GEOMETRY VARIABLES WERE'
     1                              //' NOT DEFINED'
      IF(MERR+KERR+NERR.NE.0) THEN
         WRITE(NB6,'(A,I3,A)')
     1     ' THE GEOMETRY DATA-SET CONTAINED',MERR+KERR+NERR,' ERRORS'
         STOP 'GETGEG'
      ENDIF
C *** SORT VARIABLES TO BE OPTIMIZED INTO INCREASING ORDER OF ATOMS.
      IF(IVAR.NE.-1)NVAR=IVAR
      DO 230 I=1,NVAR
      J=100000
      DO 210 L=I,NVAR
      LOCJ=(LOC(L)+2)/3
      LOCK= LOC(L)-(LOCJ-1)*3
      IF(J.GT.LOCJ*4+LOCK) THEN
         K=L
         J=LOCJ*4+LOCK
      ENDIF
  210 CONTINUE
      STRING(1:10)=SIMBOL(I)
      SIMBOL(I)=SIMBOL(K)
      SIMBOL(K)=STRING(1:10)
      SUM=XPARAM(I)
      XPARAM(I)=XPARAM(K)
      XPARAM(K)=SUM
      L=LOC(I)
      LOC(I)=LOC(K)
      LOC(K)=L
  230 CONTINUE
C *** CONVERT FROM DEGREE TO RADIAN.
      DO 240 I=1,NVAR
      IF(MOD(LOC(I),3).NE.1)XPARAM(I)=XPARAM(I)*BFACT
  240 CONTINUE
      DO 250 I=1,NATOMS
      GEO(2,I) = GEO(2,I)*BFACT
      GEO(3,I) = GEO(3,I)*BFACT
  250 CONTINUE
C     LTXT=CHAR(MAXTXT)
      NVV=NVAR
      RETURN
      END
