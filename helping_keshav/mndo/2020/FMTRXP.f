      SUBROUTINE FMTRXP (A,APT,LMA,LMAPT,ARRAY,LM5,ICALL,SCFCAL)
C     *
C     FINITE-DIFFERENCE CALCULATION OF FORCE CONSTANT MATRIX.
C     *
C     NOTATION. I=INPUT, O=OUTPUT, S=SCRATCH.
C     A(LMA)    CARTESIAN FORCE CONSTANT MATRIX IN ATOMIC UNITS (O).
C     APT()     CARTESIAN DIPOLE DERIVATIVES IN ATOMIC UNITS (O).
C     LMAPT     DIMENSION OF APT (I), LMAPT=9*NUMAT.
C     ARRAY     AVAILABLE BUFFER (S).
C     LM5       DIMENSION OF ARRAY (I).
C     ICALL     CONTROL AND ERROR FLAG (I,O).
C     SCFCAL    EXTERNAL ROUTINE FOR ENERGY EVALUATION (I).
C     *
C     PARALLEL VERSION WITH THE FOLLOWING RESTRICTIONS.
C     - RESTARTS ARE NOT SUPPORTED SINCE THEY SHOULD NOT BE REQUIRED
C       ON A MASSIVELY PARALLEL MACHINE.
C     - OPTION KPOINT=1 IS NOT SUPPORTED SINCE IT TENDS TO BE UNSTABLE
C       NUMERICALLY AND HAS ONLY BEEN KEPT FOR HISTORICAL REASONS IN
C       THE CODE. THIS OPTION IS ALMOST NEVER USED.
C     *
      USE LIMIT, ONLY: LM1, LMV, LM1M
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      EXTERNAL SCFCAL
      COMMON
     ./AMASS / AMS(LM1)
     ./ATOMC / COORD(LMV)
     ./ATOMS / NUMAT,NAT(LM1),NFIRST(LM1),NLAST(LM1)
     ./ATSYM / IELSYM(3,7)
     ./CGRAD / CG(LMV+3*LM1M)
     ./CGRAD1/ ICG(LMV)
     ./CONSTF/ A0,AFACT,EV,EVCAL,PI,W1,W2,BIGEXP
     ./CONSTN/ ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
      COMMON
     ./DIPOL / DM,DMX(3),DMP(3)
     ./ERG   / ENERGY,G(LMV),GNORM,CNORM
     ./ERG1  / CNORM1
     ./ERGREF/ H298,H0,HF298,HF0,HAT298,HAT0,D00,EVIB,SCFENR
     ./FORCE3/ TMA,TMF
     ./INOPT2/ IN2(300)
     ./NBFILE/ NBF(20)
     ./SKIPA / ISKPA
      DIMENSION A(LMA),APT(LMAPT),ARRAY(LM5)
      DIMENSION CG1(LMV),DMX1(3)
      DIMENSION IEL(3),ISYM(3,LM1)
      DIMENSION NWORK(LM1),NSYMM(LM1)
C *** DEFINITION OF CONVERSION FACTORS.
C     F0      GRADIENT         FROM ATOMIC UNITS TO KCAL/(MOL*ANGSTROM)
C     F2      DIPOLE MOMENT    FROM ATOMIC UNITS TO DEBYE
C     THE NUMERICAL VALUES OF THESE CONVERSION FACTORS ARE BASED ON
C     1 HARTREE = 27.21 EV
C     1 EV      = 23.061 KCAL/MOL
C     1 BOHR    =  0.529167 ANGSTROM
C     1 E       =  4.803242D-10 ESU
C     THE FIRST THREE RELATIONS HAVE BEEN UPDATED IN
C     J.PHYS.CHEM.REF.DATA 2, 663 (1973),
C     BUT ARE KEPT FOR CONSISTENCY WITH PREVIOUS PROGRAM VERSIONS.
      DATA F0/1185.806768D0/
      DATA F2/2.541717D0/
C     *
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** INPUT OPTIONS.
      JOP    = IN2(3)
      MIDDLE = IN2(37)
      KPRINT = IN2(39)
      LCONVG = IN2(49)
      KFAC   = IN2(204)
      IF(JOP.LT.2 .OR. JOP.GT.6) RETURN
C *** INITIALIZATION.
      I3N    = 3*NUMAT
      NCOL   = 0
      DO 10 I=1,LMA
      A(I)   = ZERO
   10 CONTINUE
      DO 20 I=1,LMAPT
      APT(I) = ZERO
   20 CONTINUE
      DO 30 I=1,I3N
      ICG(I) = 0
   30 CONTINUE
      DO 40 I=1,3
      DMX(I) = ZERO
   40 CONTINUE
      TMF    = ZERO
      HINC   = KFAC*1.0D-05
      R1     = ONE/HINC
      R2G    = PT5*R1/F0
      R2D    = PT5*R1/F2
      RF0    = ONE/F0
      DELTA  = HINC*A0
C *** INITIALIZATION PART OF RESTART SECTION.
      CALL FORSAV (A,APT,CG,DMX,LMA,LMAPT,I3N,NCOL,0,MIDDLE)
      MIDDLE  = -1
      IN2(37) = -1
C     *
C *** DO THE FIRST CALCULATION AT THE REFERENCE GEOMETRY.
      ICALL  = 11
      IF(JOP.GT.2) ICALL=31
      CALL CPUSEC(T1)
      CALL SCF (ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
      CALL CPUSEC(T2)
      TME    = T2-T1
      SCFENR = ENERGY
C     IF(IFAST  .EQ.0) IFAST  =-1
      IF(IN2(73).EQ.0) IN2(73)=-1
      IF(KPRINT.GE.0) WRITE(NB6,500) ENERGY
C     PRINTING SECTION.
      IF(KPRINT.GE.0) THEN
         WRITE(NB6,510)
         DO 60 I=1,NUMAT
         I3     = 3*(I-1)
         DO 50 J=1,3
         CG1(J) = CG(I3+J)*RF0
   50    CONTINUE
         WRITE(NB6,520) I,NAT(I),(CG1(J),J=1,3)
   60    CONTINUE
      ENDIF
C     RMS GRADIENT.
      SUM    = ZERO
      DO 70 I=1,I3N
      SUM    = SUM+CG(I)*CG(I)
   70 CONTINUE
      CNORM  = SQRT(SUM)
      CNORM1 = CNORM
      CNORMA = CNORM*RF0
      RMS    = SQRT(SUM/I3N)
      RMSA   = RMS*RF0
      IF(KPRINT.GE.-1) WRITE(NB6,530) CNORM,CNORMA,RMS,RMSA
C     CHECK FOR MAGNITUDE OF GRADIENT NORM.
C     WHEN USING OPTIONS JOP=5 OR JOP=6, THE FORCE CONSTANTS WILL ONLY
C     BE CALCULATED IF THE CARTESIAN GRADIENT NORM IS BELOW CNORMX,
C     IN KCAL/(MOL*ANGSTROM), OTHERWISE THE GEOMETRY IS REOPTIMIZED.
      CNORMX = DBLE(LCONVG)
      IF(LCONVG.GT.0 .AND. CNORM.GT.CNORMX) THEN
         IF(KPRINT.LT.-1) WRITE(NB6,530) CNORM,CNORMA,RMS,RMSA
         WRITE(NB6,531) CNORMX
         IF(JOP.LT.5) THEN
            WRITE(NB6,532)
         ELSE IF(JOP.EQ.5 .OR. JOP.EQ.6) THEN
            WRITE(NB6,533)
            ICALL = -7
            RETURN
         ENDIF
      ENDIF
C     *
C *** SYMMETRY ASSIGNMENTS.
C  80 CONTINUE
      CALL ASSYM (NUMAT,AMS,COORD,ISUB,MSYM,IEL,ISYM,KPRINT-1)
C     DEFINE LISTS OF ATOMS FOR ORGANIZATION OF COMPUTATIONAL WORK.
C     NWORK(I): ATOMS WHERE A CALCULATION IS REQUIRED.
C     NSYMM(I): ATOMS WHERE THE RESULTS ARE OBTAINED FROM SYMMETRY.
      NNWORK = 0
      NNSYMM = 0
      DO 100 I=1,NUMAT
      IF(MSYM.GT.0) THEN
         DO 90 M=1,MSYM
         MI     = ISYM(M,I)
         IF(MI.GE.I) GO TO 90
         NNSYMM = NNSYMM+1
         NSYMM(NNSYMM) = I
         GO TO 100
   90    CONTINUE
      ENDIF
      NNWORK = NNWORK+1
      NWORK(NNWORK) = I
  100 CONTINUE
      NNCOL  = NNWORK*3
C     ESTIMATES FOR TIMING.
      TMA = TME*2
      TMT = TMA*NNCOL
      IF(KPRINT.GT.0) THEN
         WRITE(NB6,550) TME
         WRITE(NB6,560) TMA,TMT
      ENDIF
C     *
C *** LOOP OVER COLUMNS OF THE FORCE CONSTANT MATRIX.
C     NCOL   RUNNING INDEX FOR COLUMNS BEING CALCULATED (1,2,..,NNCOL).
C     I      NUMBER OF THE ASSOCIATE ATOM (STANDARD, RANGE 1-NUMAT).
C     J      INDEX FOR THE ASSOCIATE COORDINATE (1 X, 2 Y, 3 Z).
C     ICOL   CORRECT COLUMN INDEX IN THE FORCE CONSTANT MATRIX.
      IF(KPRINT.GE.0) WRITE(NB6,570)
CNEW  ICALL  = 31
      ICALL  = 31+ISKPA
      DO 220 NCOL=1,NNCOL
      NN     = (NCOL+2)/3
      I      = NWORK(NN)
      J      = NCOL-3*(NN-1)
      ICOL   = 3*(I-1)+J
      CALL CPUSEC(T3)
C *** CHECK SYMMETRY FOR COLUMN ICOL OF FORCE CONSTANT MATRIX.
C     ICG(L)= 0  IF ELEMENT (L,ICOL) MAY BE NONZERO.
C     ICG(L)=-1  IF ELEMENT (L,ICOL) MUST BE ZERO.
      IF(MSYM.GT.0) THEN
         DO 110 L=1,I3N
         ICG(L) = 0
  110    CONTINUE
         DO 140 M=1,MSYM
         IF(ISYM(M,I).NE.I) GO TO 140
         MEL = IEL(M)
         ISM = IELSYM(J,MEL)
         DO 130 K=1,NUMAT
         IF(ISYM(M,K).NE.K) GO TO 130
         DO 120 L=1,3
         ISN = ISM*IELSYM(L,MEL)
         IF(ISN.NE.-1) GO TO 120
         KL  = 3*(K-1)+L
         ICG(KL) = -1
  120    CONTINUE
  130    CONTINUE
  140    CONTINUE
      ENDIF
C *** DO FIRST CALCULATION FOR COLUMN ICOL.
      COORD(ICOL) = COORD(ICOL)+DELTA
      CALL SCF (ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
C     IF(IFAST  .EQ.0) IFAST  =-1
      IF(IN2(73).EQ.0) IN2(73)=-1
      COORD(ICOL) = COORD(ICOL)-DELTA
C *** DO SECOND CALCULATION FOR COLUMN ICOL.
      DO 160 L=1,I3N
      CG1(L)  = CG(L)
  160 CONTINUE
      DO 170 L=1,3
      DMX1(L) = DMX(L)
  170 CONTINUE
      COORD(ICOL) = COORD(ICOL)-DELTA
      CALL SCF (ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
      COORD(ICOL) = COORD(ICOL)+DELTA
      DO 180 L=1,I3N
      IF(ICG(L).EQ.-1) THEN
         CG(L) = ZERO
      ELSE
         CG(L) = (CG1(L)-CG(L))*R2G
      ENDIF
  180 CONTINUE
      DO 190 L=1,3
      DMX(L)  = (DMX1(L)-DMX(L))*R2D
  190 CONTINUE
C *** CHECK FOR ZERO DIPOLE MOMENT DERIVATIVES.
      IF(MSYM.GT.0) THEN
         DO 210 M=1,MSYM
         MI  = ISYM(M,I)
         IF(MI.NE.I) GO TO 210
         MEL = IEL(M)
         ISM = IELSYM(J,MEL)
         DO 200 L=1,3
         ISN = ISM*IELSYM(L,MEL)
         IF(ISN.NE.-1) GO TO 200
         DMX(L) = ZERO
  200    CONTINUE
  210    CONTINUE
      ENDIF
C *** SAVE RESULTS.
      CALL FORSAV (A,APT,CG,DMX,LMA,LMAPT,I3N,NCOL,ICOL,MIDDLE)
C *** TIMING.
      CALL CPUSEC(T4)
      TME    = T4-T3
      TMF    = TMF+TME
      IF(KPRINT.GE.0) WRITE(NB6,580) ICOL,TME
  220 CONTINUE
C     IF(IFAST  .LT.0) IFAST  =0
      IF(IN2(73).LT.0) IN2(73)=0
      IF(KPRINT.GE.0) WRITE(NB6,590) TMF
C     *
C *** DEFINE SYMMETRY-DETERMINED COLUMNS OF THE FORCE CONSTANT MATRIX.
      DO 270 NN=1,NNSYMM
      I      = NSYMM(NN)
C *** CHECK SYMMETRY FOR ATOM I.
      DO 260 M=1,MSYM
      MI     = ISYM(M,I)
      IF(MI.GE.I) GO TO 260
      MEL    = IEL(M)
      DO 250 J=1,3
      ICNEW  = 3*( I-1)+J
      ICOLD  = 3*(MI-1)+J
C     FORCE CONSTANTS.
      DO 231 K=1,NUMAT
      MK     = ISYM(M,K)
      DO 230 L=1,3
      INEW   = I3N*(ICNEW-1)+3*( K-1)+L
      IOLD   = I3N*(ICOLD-1)+3*(MK-1)+L
      SN     = IELSYM(L,MEL)*IELSYM(J,MEL)
      A(INEW)= A(IOLD)*SN
  230 CONTINUE
  231 CONTINUE
C     DIPOLE DERIVATIVES.
      DO 240 L=1,3
      INEW   = I3N*(L-1)+ICNEW
      IOLD   = I3N*(L-1)+ICOLD
      SN     = IELSYM(L,MEL)*IELSYM(J,MEL)
      APT(INEW) = APT(IOLD)*SN
  240 CONTINUE
  250 CONTINUE
  260 CONTINUE
  270 CONTINUE
C     *
C *** PRINT ORIGINAL FORCE CONSTANT MATRIX.
      IF(KPRINT.GT.0) THEN
         WRITE(NB6,610)
         CALL MATPRT (A,I3N,I3N,I3N,I3N)
      ENDIF
C *** SYMMETRIZE FORCE CONSTANT MATRIX.
      DLMAX  = ZERO
      DO 291 I=1,I3N
      DO 290 J=1,I
      IJ     = I3N*(J-1)+I
      JI     = I3N*(I-1)+J
      DU     = (A(IJ)+A(JI))*PT5
      DL     = (A(IJ)-A(JI))*PT5
      A(IJ)  = DU
      A(JI)  = DU
      ABSDL  = ABS(DL)
      IF(ABSDL.GT.DLMAX) DLMAX=ABSDL
  290 CONTINUE
  291 CONTINUE
C *** PRINT SYMMETRIZED FORCE CONSTANT MATRIX.
      IF(KPRINT.GT.0) THEN
         WRITE(NB6,620)
         CALL MATPRT (A,I3N,I3N,I3N,I3N)
      ENDIF
      IF(KPRINT.GE.0) WRITE(NB6,630) DLMAX
C *** P. O. DRAL, 16.06.2016: RESTORE ALL PROPERTIES FOR INITIAL GEOMETRY.
      ICALL  = 11
      IF(JOP.GT.2) ICALL=31
      CALL CPUSEC(T1)
      CALL SCF (ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
      CALL DENSAV (0,ARRAY,LM5,0)
      CALL CPUSEC(T2)
      TME    = T2-T1
C     IF(IFAST  .EQ.0) IFAST  =-1
      IF(IN2(73).EQ.0) IN2(73)=-1
      IF(KPRINT.GE.0) WRITE(NB6,500) ENERGY
C     PRINTING SECTION.
      IF(KPRINT.GE.0) THEN
         WRITE(NB6,510)
         DO 310 I=1,NUMAT
         I3     = 3*(I-1)
         DO 300 J=1,3
         CG1(J) = CG(I3+J)*RF0
  300    CONTINUE
         WRITE(NB6,520) I,NAT(I),(CG1(J),J=1,3)
  310    CONTINUE
      ENDIF
C     RMS GRADIENT.
      SUM    = ZERO
      DO 320 I=1,I3N
      SUM    = SUM+CG(I)*CG(I)
  320 CONTINUE
      CNORM  = SQRT(SUM)
      CNORM1 = CNORM
      CNORMA = CNORM*RF0
      RMS    = SQRT(SUM/I3N)
      RMSA   = RMS*RF0
      IF(KPRINT.GE.-1) WRITE(NB6,530) CNORM,CNORMA,RMS,RMSA
C     JUST TO ENSURE THAT ENERGY IS EXACTLY THE SAME AS IT WAS INITIALLY.
      ENERGY = SCFENR
C *** SAVE FINAL RESULTS.
      CALL FORSAV (A,APT,CG,DMX,LMA,LMAPT,I3N,NNCOL,0,MIDDLE)
      RETURN
  500 FORMAT(// 5X,'HEAT OF FORMATION',F14.6,' KCAL/MOL')
  510 FORMAT(// 5X,'GRADIENTS (ATOMIC UNITS)',
     1       // 5X,'ATOM NO.',9X,'ATOMIC NO.',9X,'X-COORDINATE',
     2          8X,'Y-COORDINATE',8X,'Z-COORDINATE'//)
  520 FORMAT(   8X,I2,16X,I2,5X,3F20.8)
  530 FORMAT(///5X,'GRADIENT NORM =',F12.5,' KCAL/(MOL*ANGSTROM)  =',
     1                               F12.8,' ATOMIC UNITS',
     2       /  5X,'RMS GRADIENT  =',F12.5,' KCAL/(MOL*ANGSTROM)  =',
     3                               F12.8,' ATOMIC UNITS')
  531 FORMAT(///5X,'THE GRADIENT NORM IS LARGER THAN REQUESTED.',
     1       /  5X,'TARGET NORM   =',F12.5,' KCAL/(MOL*ANGSTROM),',
     2          1X,'SEE INPUT OPTION LCONVG.')
  532 FORMAT(// 5X,'FORCE CONSTANTS ARE COMPUTED NEVERTHELESS.')
  533 FORMAT(/  5X,'THE GEOMETRY WILL BE REOPTIMIZED.')
C 540 FORMAT(///5X,'TIME FOR INITIAL EVALUATION OF THE ENERGY ',
C    1          8X,F14.3,' SECONDS')
  550 FORMAT(///5X,'TIME FOR INITIAL EVALUATION OF ENERGY AND ',
     1             'GRADIENT',F14.3,' SECONDS')
  560 FORMAT(   5X,'ESTIMATED TIME FOR ONE COLUMN OF FORCE CONSTANT ',
     1             'MATRIX',F10.3,' SECONDS',
     2       /  5X,'ESTIMATED TIME FOR COMPLETE FORCE CONSTANT ',
     3             'MATRIX',F15.3,' SECONDS')
  570 FORMAT(///5X,'CALCULATION OF FORCE CONSTANT MATRIX'/)
  580 FORMAT(   5X,'COLUMN',I4,12X,'TIME',F10.3,' SECONDS')
  590 FORMAT(/  5X,'FULL MATRIX',11X,'TIME',F10.3,' SECONDS')
  610 FORMAT(///5X,'ORIGINAL FORCE CONSTANT MATRIX.'/)
  620 FORMAT(///5X,'FORCE CONSTANT MATRIX AFTER SYMMETRIZATION.'/)
  630 FORMAT(// 5X,'MAXIMUM DEVIATION DUE TO SYMMETRIZATION',F12.8/)
      END
