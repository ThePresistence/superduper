      SUBROUTINE TSOPT (Q,R,S,LMQ,ARRAY,LM5,ICALL,SCFCAL)
C     *
C     TRANSITION STATE SEARCH BY GRADIENT NORM MINIMIZATION.
C     *
C     NOTATION. I=INPUT, O=OUTPUT, S=SCRATCH.
C     Q         Q MATRIX IN NON-LINEAR LEAST-SQUARES ALGORITHM (S).
C     R         R MATRIX IN NON-LINEAR LEAST-SQUARES ALGORITHM (S).
C     S         R MATRIX TRANSPOSED, SQUARE PART (S).
C     LMQ       DIMENSION OF Q AND R MATRICES (I).
C     ARRAY     AVAILABLE BUFFER (S).
C     LM5       DIMENSION OF ARRAY (I).
C     ICALL     CONTROL AND ERROR FLAG (I,O).
C     SCFCAL    EXTERNAL ROUTINE FOR ENERGY EVALUATION (I).
C     *
      USE LIMIT, ONLY: LMV
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (NITEM=10)
      PARAMETER (PSMALL=1.0D-10)
      EXTERNAL SCFCAL
      CHARACTER*80 KTITLE,KOMENT
      LOGICAL PRT,PRTMIN
      COMMON
     ./BESAFE/ TLIMIT
     ./CONSTF/ A0,AFACT,EV,EVCAL,PI,W1,W2,BIGEXP
     ./CONSTN/ ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
     ./CYCLES/ ICYC,NCOUNT
     ./DFP   / X(LMV),N
     ./DFPGO / EFSLST(LMV),XLAST(LMV)
     ./ERG   / ENERGY,GRAD(LMV),GNORM,CNORM
     ./ERG1  / CNORM1
      COMMON
     ./FLAG1 / KTITLE,KOMENT
     ./FLAG2 / SECADD,TIME1
     ./FLPOCM/ EFS(LMV),P(LMV),ALF,SSQ
     ./INOPT1/ IN1(300)
     ./INOPT2/ IN2(300)
     ./NBFILE/ NBF(20)
     ./OPCOM1/ GD(LMV),Y(LMV),DEL,PN,PN2,PNLAST,RSTABS,SMVAL,SSQLST,TX1
     ./OPCOM2/ IREPET,IRTL,IRST,JRST
     ./OPTCRT/ NSUCC
     ./OPTTOL/ TOLEND(4),TOLIN(4),XMAXST
     ./OVERLY/ IOV,JOV,KOV,LOV
     ./PARM3 / LOC(LMV),NVAR3
CRAY  COMMON
CRAY ./UCHEM4/ DELTAH,ICOORD,TSNORM
CRAY ./UCHEM9/ INDEXG,INDEXA
      DIMENSION Q(LMQ,LMQ),R(LMQ,LMQ),S(LMQ,LMQ)
      DIMENSION ARRAY(LM5)
C *** FILE NUMBERS.
      NB6    = NBF(6)
C     *
C     SETUP PHASE (EXECUTED ONLY ONCE).
C     *
      IF(N.LT.1) WRITE(NB6,610)
      IF(N.GT.LMQ) WRITE(NB6,620)
      IF(N.LT.1 .OR. N.GT.LMQ) THEN
         ICALL=-3
         RETURN
      ENDIF
C     INPUT OPTIONS
      IGEOM  = IN2(4)
      MAXEND = IN2(32)
      MAXLIN = IN2(33)
      MAXRTL = IN2(34)
      MIDDLE = IN2(37)
      IPRINT = IN2(38)
      IPREC  = IN2(43)
      LCONVG = IN2(49)
      NRST   = IN2(191)
      LDELL  = IN2(193)
      LCONV  = IN1(196)
      LMAXST = IN2(198)
C     INITIALIZATION
      IOV    = 0
      JOV    = 0
      KOV    = 0
      PRT    = IPRINT.GE. 0
      PRTMIN = IPRINT.GE.-1
      IF(PRTMIN) WRITE(NB6,600) KOMENT,KTITLE
C     OVERALL CONVERGENCE CRITERIA
C     CONVENTION: NEGATIVE IPREC VALUES ARE USED FOR KEYWORD INPUT AND
C     MOPAC-TYPE INPUT TO INDICATE THAT THE CRITERIA HAVE BEEN DEFINED
C     ELSEWHERE (KEYDEF) AND MAY NOT BE REDEFINED HERE. NEGATIVE IPREC
C     VALUES DO NOT OCCUR FOR STANDARD INPUT (RESET IN METHOD).
      IF(IPREC.GE.0) THEN
         IF(IPREC.EQ.0) IPREC=1
         FPREC     = ONE/IPREC
         TOLEND(1) = FPREC*1.0D-08
         TOLEND(2) = FPREC*1.0D-08
         TOLEND(3) = FPREC
      ENDIF
      TOLEND(4) = ZERO
C     LINE SEARCH OPTIONS
      IF(LMAXST.LE.0) LMAXST=1
      IF(LCONV .LE.0) LCONV=1
      FCONV     = LCONV
      TOLIN(1)  = FPREC*1.0D-04
      TOLIN(2)  = ZERO
      TOLIN(3)  = FCONV*1.0D-02
      TOLIN(4)  = FCONV*1.0D-02
      XMAXST    = LMAXST*0.1D0
C     RESTART OPTIONS
      RSTABS = 300.0D0
      IF(LDELL.GT.0) THEN
         DEL = 0.001D0*LDELL
      ELSE
         DEL = 0.01D0
      ENDIF
C     VARIOUS FLAGS
      ICYC   = 0
      IREPET = 0
      IRTL   = 0
      IRST   = 0
      JRST   = 1
      NCOUNT = 0
      NTO    = 1+(N-1)/NITEM
      NREM   = N-(NTO-1)*NITEM
      CNORM1 = ZERO
      RSMALL = 0.001D0
      SFDFP  = 1.5D0
CRAY  IF(IGEOM.EQ.0) THEN
CRAY     ICOORD = 1
CRAY  ELSE
CRAY     ICOORD = 0
CRAY  ENDIF
C     *
C     CONTINUATION OF A PREVIOUS JOB
C     *
      IF(MIDDLE.GT.0) THEN
         CALL TSSAV  (Q,R,LMQ,1,MIDDLE)
         CALL DENSAV (0,ARRAY,LM5,1)
         CALL CPUSEC(TX1)
         IF(LOV.EQ.5) GO TO 110
         IF(LOV.EQ.6) GO TO 300
         IF(LOV.EQ.4 .AND. MIDDLE.LT.2) GO TO 540
         IF(LOV.EQ.4 .AND. MIDDLE.EQ.2) GO TO 110
         WRITE(NB6,630)
         STOP 'TSOPT'
      ENDIF
C     *
C     INITIAL FUNCTION EVALUATION.
C     *
      ICALL  = 21
      LOV    = 1
      CALL COMPFG (N,X,SSQ,SSQ,EFSLST,ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
      CALL GCHECK (PRTMIN)
      IF(NSUCC.GE.0) GO TO 540
      SMVAL  = ENERGY
C     *
C     RESTART SECTION.
C     *
   10 CONTINUE
      DO 20 I=1,N
      Y(I)   = X(I)-SIGN(DEL,EFSLST(I))
   20 CONTINUE
C     FUNCTION EVALUATION AT SECOND POINT.
      LOV    = 2
      CALL COMPFG (N,Y,SSQQ,SSQ,EFS,ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
C     INITIAL ESTIMATE OF Q AND R MATRIX.
      DO 40 J=1,N
      DO 30 I=1,N
      R(I,J) = ZERO
   30 CONTINUE
   40 CONTINUE
      DO 60 J=1,N
      DO 50 I=1,N
      Q(I,J) = ZERO
   50 CONTINUE
   60 CONTINUE
      DO 80 I=1,N
      Q(I,I) = ONE
      R(I,I) = (EFS(I)-EFSLST(I))/(Y(I)-X(I))
      IF(SSQ.GT.RSTABS) R(I,I)=ABS(R(I,I))
      IF(ABS(R(I,I)).LT.RSMALL) R(I,I)=SIGN(RSMALL,R(I,I))
   80 CONTINUE
C     PRINTING SECTION.
      IF(PRTMIN) THEN
         IF(ICYC.LE.0) THEN
            WRITE(NB6,650) SMVAL,SSQ,ENERGY,SSQQ
         ELSE
            WRITE(NB6,655) SMVAL,SSQ,ENERGY,SSQQ
         ENDIF
      ENDIF
C     START FROM THE POINT WITH LOWER SSQ VALUE.
      IF(SSQQ.GT.SSQ) THEN
         ENERGY = SMVAL
      ELSE
         SSQ = SSQQ
         DO 90 I=1,N
         X(I) = Y(I)
         EFSLST(I) = EFS(I)
   90    CONTINUE
      ENDIF
C     INITIAL ESTIMATE OF LINE STEP.
      TEMP   = DNRM2(N,X,1)
      TEMP   = TEMP*TEMP
      ALF    = 100.0D0*(TOLIN(3)*SQRT(TEMP)+TOLIN(4))
      CALL CPUSEC(TX1)
C     *
C     MAIN LOOP
C     *
  110 ICYC   = ICYC+1
      IRTL   = IRTL+1
      IRST   = IRST+1
C     *
C     DETERMINE THE SEARCH DIRECTION VECTOR P BY SOLVING Q*R*P=-EFSLST
C     IN THE LEAST-SQUARES SENSE. THE JACOBIAN MATRIX IS DECOMPOSED AS
C     THE PRODUCT OF AN ORTHOGONAL MATRIX Q AND AN UPPER TRIANGULAR
C     MATRIX R, AND EFSLST IS THE CURRECT GRADIENT VECTOR.
C     *
C     CHECK FOR A SIDESTEP.
      IF(IRST.GE.NRST .AND. ICYC.GT.1 .AND. N.GT.1) GO TO 190
C     SET THE LEVENBERG-MARQUARDT PARAMETER PLM.
      PLM    = SQRT(SSQ)
C     COMPUTE P=-Q(TRANSPOSED)*EFSLST.
      CALL DGEMV('T',N,N,-ONE,Q,LMQ,EFSLST,1,ZERO,P,1)
      DO 130 I=1,N
      DO 120 J=1,N
      S(I,J) = R(J,I)
  120 CONTINUE
  130 CONTINUE
C     APPLY A SERIES OF ELEMENTARY ROTATIONS.
      DO 180 I=1,N
      Y(I)   = PLM
      DO 150 J=I+1,N
      Y(J)   = ZERO
  150 CONTINUE
      PTEMP  = ZERO
      DO 170 J=I,N
      CALL DLARTG(S(J,J),Y(J),CS,SN,TEMP)
      DTEMP  = CS*P(J)  + SN*PTEMP
      PTEMP  = CS*PTEMP - SN*P(J)
      P(J)   = DTEMP
      CALL DROT(N-J+1,S(J,J),1,Y(J),1,CS,SN)
  170 CONTINUE
  180 CONTINUE
C     SOLVE FOR P-VECTOR
      CALL DTRSV('L','T','N',N,S,LMQ,P,1)
      GO TO 230
C     *
C     DETERMINE A SEARCH DIRECTION VECTOR P WHICH IS ORTHOGONAL TO
C     THE LAST ONE (SIDESTEP SECTION).
C     *
  190 IRST   = 0
  200 JRST   = JRST+1
      IF(JRST.GT.N) JRST=1
      IF(ABS(P(JRST)).LT.PSMALL) GO TO 200
      IF(PRTMIN) WRITE(NB6,740) JRST
      TEMP   = P(JRST)
      PN     = DNRM2(N,P,1)
      CALL DSCAL(N,TEMP,P,1)
      P(JRST)= P(JRST)-PN*PN
C     RENORMALIZE SEARCH DIRECTION VECTOR P (SIDESTEP).
      TEMP   = DNRM2(N,P,1)
      TEMP   = PN/TEMP
      CALL DSCAL(N,TEMP,P,1)
C     *
C     COMPUTE NORM AND NORM-SQUARE OF THE P-VECTOR
C     *
  230 CONTINUE
      PNLAST = PN
      PN     = DNRM2(N,P,1)
      PN2    = PN*PN
      IF(ICYC.GT.1) ALF=ALF*PNLAST/PN
      IF(ALF*PN.LT.0.0001D0) ALF=0.001D0/PN
C     *
C     PRINTING SECTION
C     *
      IF(PRT) THEN
         WRITE(NB6,810)
         WRITE(NB6,690) ICYC,ENERGY,SSQ
         WRITE(NB6,670) ALF
         WRITE(NB6,680) NCOUNT
         DO 250 I=1,N
         GD(I)  = X(I)
         LOC2   = LOC(I)-3*((LOC(I)-1)/3)
         IF(IGEOM.GT.0 .OR. LOC2.EQ.1) GO TO 250
         GD(I)  = X(I)*AFACT
  250    CONTINUE
         JMIN   = 1-NITEM
         DO 260 I=1,NTO
         JMIN   = JMIN+NITEM
         JMAX   = JMIN+NITEM-1
         IF(I.EQ.NTO) JMAX = JMIN+NREM-1
         WRITE(NB6,770) (J,J=JMIN,JMAX)
         WRITE(NB6,780) (GD(J),J=JMIN,JMAX)
         WRITE(NB6,790) (EFSLST(J),J=JMIN,JMAX)
         IF(IPRINT.GT.0) WRITE(NB6,800) (P(J),J=JMIN,JMAX)
  260    CONTINUE
         IF(IPRINT.GT.0) THEN
            WRITE(NB6,700)
            WRITE(NB6,710) (R(I,I),I=1,N)
         ENDIF
      ENDIF
C     *
C     PERFORM LINE-MINIMIZATION FROM POINT X IN DIRECTION P OR -P
C     *
      LOV    = 6
      CALL TSSAV (Q,R,LMQ,0,MIDDLE)
  300 CONTINUE
      DO 310 I=1,N
      EFS(I) = EFSLST(I)
      XLAST(I) = X(I)
  310 CONTINUE
      SMVAL  = ENERGY
      SSQLST = SSQ
      ICALL  = 21
      KOV    = 1
      CALL LOCMIN (X,EFS,P,GD,Y,N,ALF,SSQ,MAXLIN,IPRINT,
     1             ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
      KOV    = 0
C     CHECK SUCCESS OF LINE SEARCH.
      IF(SSQ.GE.SSQLST) THEN
         ENERGY = SMVAL
         IF(IREPET.EQ.1 .OR. ICYC.EQ.1) THEN
            IF(PRTMIN) WRITE(NB6,760) SSQ
            NSUCC  = 10
            GO TO 530
         ELSE
            IREPET = 1
            IRST   = 0
            PN     = PNLAST
            GO TO 10
         ENDIF
      ENDIF
C     SAVE CURRENT RESULTS AFTER SUCCESSFUL LINE SEARCH.
      CALL TSSAV (Q,R,LMQ,2,MIDDLE)
      IREPET = 0
C     *
C     PRODUCE THE VECTOR   R*P
C     *
      CALL DGEMV ('N',N,N,ONE,R,LMQ,P,1,ZERO,Y,1)
C     *
C     PRODUCE THE VECTOR
C     GD = Y = (EFS-EFSLST-ALF*Q*R*P)/(ALF*(NORMSQUARE(P))
C     AND COMPUTE ITS NORM YN.
C     *
      WORK   = ALF*PN*PN
C     COMPUTE GD=EFS-EFSLST
      CALL DCOPY (N,EFS,1,GD,1)
      CALL DAXPY (N,-ONE,EFSLST,1,GD,1)
C     COMPUTE GD=EFS-EFSLST-ALF*Q*R*P
      CALL DGEMV ('N',N,N,-ALF,Q,LMQ,Y,1,ONE,GD,1)
C     COMPUTE GD=(EFS-EFSLST-ALF*Q*R*P)/(ALF*(NORMSQUARE(P))
      CALL DSCAL(N,ONE/WORK,GD,1)
C     COMPUTE NORM.
      YN     = DNRM2(N,GD,1)
C     COPY CURRENT GRADIENT EFS TO EFSLST.
      CALL DCOPY (N,EFS,1,EFSLST,1)
C     *
C     THE BROYDEN UPDATE   NEW MATRIX = OLD MATRIX + Y*P(TRANSPOSED)
C     HAS BEEN FORMED. IT IS NOW NECESSARY TO UPDATE THE QR DECOMP.
C     FIRST EVALUATE   Y = Q(TRANSPOSED)*Y = Q(TRANSPOSED)*GD
C     *
      CALL DGEMV('T',N,N,ONE,Q,LMQ,GD,1,ZERO,Y,1)
C     *
C     REDUCE THE VECTOR Y TO A MULTIPLE OF THE FIRST UNIT VECTOR USING
C     ELEMENTARY ROTATIONS. APPLY ALL TRANSFORMATIONS TRANSPOSED ON THE
C     RIGHT TO THE MATRIX Q, AND APPLY THE ROTATIONS ON THE LEFT TO THE
C     MATRIX R. THIS GIVES   (Q*(V-TRANS))*((V*R) + (V*Y)*(P-TRANS)),
C     WHERE V IS THE COMPOSITE OF THE TRANSFORMATIONS.  THE MATRIX
C     ((V*R) + (V*Y)*(P-TRANS))    IS UPPER HESSENBERG.
C     *
      I      = N
  410 J      = I
      I      = I-1
      IF(I.LE.0) GO TO 440
      IF(Y(J).EQ.ZERO) GO TO 410
      CALL DLARTG(Y(I),Y(J),CS,SN,TMP)
      IF(TMP.LT.ZERO) THEN
         CS  = -CS
         SN  = -SN
         TMP = -TMP
      ENDIF
      Y(I)   = TMP
      CALL DROT(N,Q(1,I),1,Q(1,J),1,CS,SN)
      R(J,I) = -SN*R(I,I)
      R(I,I) =  CS*R(I,I)
      DO 430 K=J,N
      DTEMP  = CS*R(I,K) + SN*R(J,K)
      R(J,K) = CS*R(J,K) - SN*R(I,K)
      R(I,K) = DTEMP
  430 CONTINUE
      GO TO 410
  440 CONTINUE
C     *
C     REDUCE THE UPPER-HESSENBERG MATRIX TO UPPER-TRIANGULAR FORM
C     USING ELEMENTARY ROTATIONS. APPLY THE SAME ROTATIONS, TRANSPOSED,
C     ON THE RIGHT TO THE MATRIX  Q.
C     *
      DO 450 K=1,N
      R(1,K) = R(1,K)+YN*P(K)
  450 CONTINUE
      DO 490 J=2,N
      I      = J-1
      IF(R(J,I).EQ.ZERO) GO TO 490
      CALL DLARTG(R(I,I),R(J,I),CS,SN,VTEMP)
      R(I,I) = VTEMP
      R(J,I) = ZERO
      DO 460 K=J,N
      DTEMP  = CS*R(I,K) + SN*R(J,K)
      R(J,K) = CS*R(J,K) - SN*R(I,K)
      R(I,K) = DTEMP
  460 CONTINUE
      CALL DROT(N,Q(1,I),1,Q(1,J),1,CS,SN)
  490 CONTINUE
C     *
C     TERMINATION TESTS
C     *
      NSUCC  = -1
      DO 500 I=1,N
      IF(ABS(XLAST(I)-X(I)).GT.TOLEND(1)) GO TO 505
      IF(XLAST(I).EQ.ZERO .OR. X(I).EQ.ZERO) GO TO 500
      IF(ABS(ONE-XLAST(I)/X(I)).GT.TOLEND(2)) GO TO 505
  500 CONTINUE
      IF(PRTMIN) WRITE(NB6,720) NCOUNT
      NSUCC  = 1
      GO TO 530
  505 CONTINUE
      DO 510 I=1,N
      IF(ABS(EFSLST(I)).GE.TOLEND(3)) GO TO 520
  510 CONTINUE
      IF(PRTMIN) THEN
         WRITE(NB6,640) SSQ
         WRITE(NB6,730) NCOUNT
      ENDIF
      NSUCC  = 0
      GO TO 530
  520 CONTINUE
      IF(NCOUNT.GE.MAXEND) THEN
         IF(PRTMIN) WRITE(NB6,750) NCOUNT
         NSUCC = 11
         GO TO 530
      ENDIF
C     *
C     PREPARE NEXT CYCLE AND CHECK FOR TIME LIMIT
C     *
      BSMVF  = ABS(SSQLST-SSQ)
      DEL    = 0.01D0
      IF(BSMVF.LT.100.0D0) DEL=0.005D0
      IF(BSMVF.LT. 20.0D0) DEL=0.002D0
      LOV    = 5
      IF(MIDDLE.GE.0) THEN
         CALL TSSAV  (Q,R,LMQ,0,MIDDLE)
         CALL DENSAV (0,ARRAY,LM5,0)
      ENDIF
      CALL CPUSEC(TX2)
      TCYCLE = TX2-TX1
      TX1    = TX2
      IF(PRT) THEN
         WRITE(NB6,660) TX2+SECADD
      ELSE IF(PRTMIN) THEN
         WRITE(NB6,665) ICYC,TX2+SECADD,ENERGY,SSQ
      ENDIF
CRAY  UniChem MONITOR CALL.
CRAY  TSNORM = SQRT(SSQ)
CRAY  INDEXG = ISAMAX(N,EFSLST,1)
CRAY  INDEXA = (LOC(INDEXG)-1)/3+1
CRAY  GMAX   = G(INDEXG)
CRAY  CALL UNITSMON (ICYC,ENERGY,ICOORD,GMAX,INDEXG,INDEXA)
CRAY  CALL CTGEOCYCLE
      IF(IRTL.LT.MAXRTL .AND. TLIMIT.GT.TX2+SFDFP*TCYCLE) GO TO 110
      CALL PRTDFP (1)
      ICALL  = -8
CRAY  UniChem MONITOR CALL.
CRAY  CALL CTGEOFINAL
C     STOP 'TSOPT'
C     THIS STOP HAS BEEN SHIFTED TO THE CALLING PROGRAM.
      RETURN
C     *
C     EXIT AFTER FINISHING THE OPTIMIZATION
C     *
  530 LOV    = 4
      CALL TSSAV (Q,R,LMQ,0,MIDDLE)
      CALL CPUSEC(TX2)
      IF(PRT) THEN
         WRITE(NB6,660) TX2+SECADD
      ELSE IF(PRTMIN) THEN
         WRITE(NB6,665) ICYC,TX2+SECADD,ENERGY,SSQ
      ENDIF
      IF(NSUCC.GE.10) THEN
         IF(LCONVG.LT.0 .OR. SSQ.LT.TOLEND(3)*LCONVG) NSUCC=9
      ENDIF
  540 LOV    = 4
      ICALL  = 10
      CALL COMPFG (N,X,SSQQ,SSQ,EFSLST,ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
      CALL PRTDFP (0)
CRAY  UniChem MONITOR CALL.
CRAY  CALL CTGEOFINAL
      RETURN
  600 FORMAT(///1X,'GEOMETRY OPTIMIZATION FOR TRANSITION STATE',
     1       /  1X,A,/1X,A)
  610 FORMAT(///1X,'PROGRAM REQUIRES AT LEAST ONE VARIABLE.'///)
  620 FORMAT(///1X,'TOO MANY VARIABLES.'///)
  630 FORMAT(// 1X,'ILLEGAL VALUE OF LOV ON RESTART FILE. STOP.'//)
  640 FORMAT(/  1X,'FINAL VALUE FOR SSQ =',F15.7)
  650 FORMAT(/  1X,'INITIAL GEOMETRY, HEAT =',F12.5,' , SSQ =',F15.5,
     1       /  1X,'SECOND  GEOMETRY, HEAT =',F12.5,' , SSQ =',F15.5)
  655 FORMAT(/  1X,'CURRENT GEOMETRY, HEAT =',F12.5,' , SSQ =',F15.5,
     1       /  1X,'RESTART GEOMETRY, HEAT =',F12.5,' , SSQ =',F15.5)
  660 FORMAT(/  1X,'TOTAL TIME',F18.3,' SECONDS')
  665 FORMAT(/  1X,'END OF CYCLE',I3,' , TOTAL TIME = ',F10.3,
     1             ' , HEAT =',F12.5,' , SSQ =',F15.5)
  670 FORMAT(   1X,'ALF    =',F15.8)
  680 FORMAT(   1X,'NCOUNT =',I6)
  690 FORMAT(/  1X,'AT THE BEGINNING OF CYCLE',I5,3X,'THE ENERGY IS',
     1              F13.5,5X,'AND SSQ =',F16.5)
  700 FORMAT(// 1X,'R-MATRIX DIAGONAL ENTRIES ...')
  710 FORMAT(   1X,9E13.5)
  720 FORMAT(/  1X,'TEST ON X SATISFIED, NUMBER OF FUNCTION CALLS =',I6)
  730 FORMAT(/  1X,'TEST ON SSQ SATISFIED, NUMBER OF FUNCTION CALLS =',
     1             I6)
  740 FORMAT(// 1X,'** NEXT CYCLE IS A SIDE-STEP ALONG THE ',I2,
     1             '-TH NORMAL TO P')
  750 FORMAT(/  1X,'ALLOWED NUMBER OF FUNCTION CALLS EXCEEDED.',
     1       /  1X,'NUMBER OF FUNCTION CALLS WAS ',I5)
  760 FORMAT(/  1X,'SSQ COULD NOT BE LOWERED IN TWO CONSECUTIVE LINE ',
     1             'SEARCHES.'/1X,'FINAL VALUE FOR SSQ =',F20.7)
  770 FORMAT(/  3X,'I',6X,I4,9(8X,I4))
  780 FORMAT(   1X,'X(I)',10(1X,F11.5))
  790 FORMAT(   1X,'G(I)',10(1X,F11.5))
  800 FORMAT(   1X,'P(I)',10(1X,F11.5))
  810 FORMAT(// 1X,'*******')
      END
