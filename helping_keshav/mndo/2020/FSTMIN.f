      SUBROUTINE FSTMIN (X,G,P,XX,GG,N,ALPHA,FUNCT,MAXLIN,IPRINT,
     1                   ARRAY,LM5,ICALL,SCFCAL)
C     *
C     FAST QUADRATIC LINE SEARCH.
C     *
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      EXTERNAL SCFCAL
      PARAMETER (TINY=1.0D-10)
      COMMON
     ./CIMAP / IFMAP
     ./CONSTN/ ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
     ./INOPT2/ IN2(300)
     ./NBFILE/ NBF(20)
     ./OPTTOL/ TOLEND(4),TOLX,TOLF,TREL,TABS,XMAXST
     ./OVERLY/ IOV,JOV,KOV,LOV
      DIMENSION X(N),G(N),P(N),XX(N),GG(N)
      DIMENSION ARRAY(LM5)
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** INPUT OPTIONS
      IMOMAP = IN2(156)
      MAXMAP = IN2(165)
C *** INITIALIZATION.
      MICRO  = 0
      FBEST  = FUNCT
      FINT   = FUNCT
      FLAST  = FUNCT
      ABEST  = ZERO
      AKMAX  = ZERO
      BQ     = ZERO
      DO 10 I=1,N
      AKMAX  = MAX(AKMAX,ABS(P(I)))
      BQ     = BQ-G(I)*P(I)
      XX(I)  = X(I)
   10 CONTINUE
      AKMAX  = XMAXST/AKMAX
      AK     = MIN(ALPHA,AKMAX)
      IF(IPRINT.GT.0) THEN
         IF(IPRINT.GE.5) THEN
            WRITE(NB6,600) MAXLIN,TOLX,TOLF,TREL,TABS,XMAXST
         ENDIF
         WRITE(NB6,500) BQ,AKMAX
         IF(BQ.LT.ZERO) WRITE(NB6,510)
         WRITE(NB6,520) MICRO,ABEST,FUNCT,AK
      ENDIF
C *** LOOP OVER POINTS IN LINE SEARCH.
   20 MICRO  = MICRO+1
      IF(MICRO.GT.MAXLIN) GO TO 60
      DO 30 I=1,N
      X(I)   = XX(I)+AK*P(I)
   30 CONTINUE
C     COUNT ORBITAL MAPPING ATTEMPTS
      IMTRY  = 0
      ICALLO = ICALL
   40 CONTINUE
      ICALL  = ICALLO
      IFMAP  = 0
      LOV    = 1
      CALL COMPFG(N,X,FUNCT,FBEST,GG,ARRAY,LM5,ICALL,SCFCAL)
C     ONLY RETURN HERE IF MAPPING IS NOT THE CAUSE OF FAILURE
      IF(ICALL.EQ.-1 .AND. IFMAP.EQ.0) RETURN
C *** TEST FOR ORBITAL MAPPING FAILURE
C     AND TAKE A SMALLER STEP IF NECESSARY
      IF(IMOMAP.EQ.2 .AND. IFMAP.EQ.1) THEN
C        ORBITAL MAPPING HAS FAILED
         WRITE(NB6,570)
         IMTRY = IMTRY + 1
         IF(IMTRY.EQ.MAXMAP) THEN
            WRITE(NB6,590)
C           NOTE ICALL IS ALREADY -1
            RETURN
         ENDIF
C        RETRY WITH STEP SIZE HALVED
         AK = AK * 0.5D0
         WRITE(NB6,580) AK
         DO 50 I=1,N
            X(I)   = XX(I)+AK*P(I)
 50      CONTINUE
         GO TO 40
      ENDIF
C
      IF(FUNCT.LT.FBEST) THEN
         ABEST = AK
         FBEST = FUNCT
      ENDIF
C     QUADRATIC FIT FOR STEP SIZE AMIN USING INITIAL FUNCTION VALUE
C     (FINT), INITIAL SLOPE (BQ), AND NEW FUNCTION VALUE (FUNCT) AT
C     THE CURRENT STEP (AK).
      AQ     = (FUNCT-FINT+BQ*AK)/(AK*AK)
      AMIN   = PT5*BQ/AQ
C     CHECK PREDICTED STEP SIZE.
      IF(IPRINT.GT.0) WRITE(NB6,530) MICRO,AK,FUNCT,AMIN,AQ
      IF(AMIN.LT.ZERO .OR. AQ.LT.ZERO) THEN
         AMIN = AK*THREE
         IF(IPRINT.GT.0) WRITE(NB6,540) MICRO,AK,FUNCT,AMIN,AQ
      ELSE IF(AMIN.GT.AK*10.0D0) THEN
         AMIN = AK*10.0D0
         IF(IPRINT.GT.0) WRITE(NB6,550) MICRO,AK,FUNCT,AMIN,AQ
      ENDIF
      ADIFF  = AMIN-AK
      IF(ABS(ADIFF).GT.AKMAX) THEN
         ADIFF = SIGN(AKMAX,ADIFF)
         ANEW  = AK+ADIFF
         IF(IPRINT.GT.0) WRITE(NB6,560) MICRO,AK,FUNCT,ANEW,AQ
      ENDIF
C     CHECK FOR CONVERGENCE AND DEFINE NEW STEP SIZE.
C     THE FIRST CHECK BELOW INVOLVES AN INCREMENT TINY WHICH AVOIDS AN
C     ACCIDENTAL EQUALITY OF TERMS FOR CERTAIN INITIAL DEFAULT OPTIONS.
      IF(FBEST.LT.FINT) THEN
         IF(ABS(ADIFF).LT.(ABS(AK)*TREL+TABS-TINY)) GO TO 60
         IF(ABS(FUNCT-FLAST).LT.TOLF) GO TO 60
      ENDIF
      FLAST  = FUNCT
      AK     = AK+ADIFF
      GO TO 20
C *** EXIT AFTER FINISHING THE LINE SEARCH.
C     LEAVE LINE SEARCH WITH BEST RESULTS OBTAINED.
   60 IF(AK.NE.ABEST) THEN
         DO 70 I=1,N
         X(I)= XX(I)+ABEST*P(I)
   70    CONTINUE
      ENDIF
      ALPHA  = ABEST
      FUNCT  = FBEST
      IF(FBEST.GE.FINT) RETURN
C *** CALCULATE FINAL GRADIENT.
      ICALL  = 22
      IF(AK.NE.ABEST) ICALL=21
      LOV    = 2
      CALL COMPFG(N,X,FLAST,FLAST,G,ARRAY,LM5,ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
      RETURN
  500 FORMAT(/  1X,'/////FSTMIN, LINEAR SEARCH ENTERED',
     1       // 1X,'GRADIENT ALONG SEARCH DIRECTION (BQ=-G*P)',E18.4,
     2       /  1X,'MAXIMUM STEP SIZE ALLOWED IN LINE SEARCH ',E18.4)
  510 FORMAT(   1X,'WARNING. *** BQ SHOULD BE POSITIVE. ***  ')
  520 FORMAT(// 1X,'  I    CURRENT        FUNCTION      PREDICTED',
     1               '    PREDICTED',
     2       /  1X,'      STEP SIZE         VALUE       STEP SIZE',
     3               '    CURVATURE',
     4       // 1X,I3,E13.4,E17.8,2E13.4)
  530 FORMAT(   1X,I3,E13.4,E17.8,2E13.4)
  540 FORMAT(   1X,I3,E13.4,E17.8,2E13.4,5X,'** WARNING **')
  550 FORMAT(   1X,I3,E13.4,E17.8,2E13.4,5X,'** STEP SIZE LIMIT 1 **')
  560 FORMAT(   1X,I3,E13.4,E17.8,2E13.4,5X,'** STEP SIZE LIMIT 2 **')
  570 FORMAT(/  1X,'ORBITAL MAPPING FAILURE REPORTED')
  580 FORMAT(   1X,'RETRY WITH STEP SIZE   = ',F10.5)
  590 FORMAT(/  1X,'ORBITAL MAPPING HAS FAILED COMPLETELY')
  600 FORMAT(/  1X,'DEBUG PRINT FROM SUBROUTINE FSTMIN.',
     1       /  1X,'MAXLIN =',I5,
     2       /  1X,'TOLX   =',F16.10,
     3       /  1X,'TOLF   =',F16.10,
     4       /  1X,'TREL   =',F16.10,
     5       /  1X,'TABS   =',F16.10,
     6       /  1X,'XMAXST =',F16.10)

      END
