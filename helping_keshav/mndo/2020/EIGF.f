      SUBROUTINE EIGF (HESS,U,OLDHSS,LMH,NIMAG,
     1                 ARRAY,LM5,ICALL,SCFCAL)
C     *
C     EIGF IS AN OPTIMIZATION ROUTINE BASED ON EIGENVECTOR FOLLOWING.
C     *
C     NOTATION. I=INPUT, O=OUTPUT, S=SCRATCH.
C     HESS      CURRENT HESSIAN MATRIX (S).
C     U         EIGENVECTORS OF HESSIAN MATRIX (S).
C     OLDHSS    PREVIOUS HESSIAN MATRIX (S).
C     LMH       LEADING DIMENSION OF HESS,U,OLDHSS (I).
C     NIMAG     NUMBER OF REQUIRED IMAGINARY FREQUENCIES (I).
C     ARRAY     AVAILABLE BUFFER (S).
C     LM5       DIMENSION OF AVAILABLE BUFFER (I).
C     ICALL     CONTROL AND ERROR FLAG (I,O).
C     SCFCAL    EXTERNAL ROUTINE FOR ENERGY EVALUATION (I).
C     *
C     REFERENCES:
C     (1) J.SIMONS, P.JORGENSEN, H.TAYLOR, AND J.OZMENT, J.PHYS.CHEM.
C         87, 2745 (1983).
C     (2) A.BANERJEE, N.ADAMS, J.SIMONS, AND R.SHEPARD, J.PHYS.CHEM.
C         89, 52 (1985).
C     (3) J.BAKER, J.COMPUT.CHEM. 7, 385 (1986).
C     (4) J.NICHOLS, H.TAYLOR, P.SCHMIDT, AND J.SIMONS, J.CHEM.PHYS.
C         92, 340 (1990).
C     (5) P.CULOT, G.DIVE, V.H.NGUYEN, AND J.M.GHUYSEN, THEOR.CHIM.ACTA
C         82, 189 (1992).
C     *
C     THE PRESENT CODE IS PARTLY ADAPTED FROM THE IMPLEMENTATION OF
C     EIGENVECTOR FOLLOWING IN PUBLIC-DOMAIN MOPAC VERSIONS.
C     *
      USE LIMIT, ONLY: LM1, LM1M, LMV, LMYL
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (NITEM=10)
      EXTERNAL SCFCAL
      CHARACTER*80 KTITLE,KOMENT
      LOGICAL PRT,PRTMIN,PRT1
      LOGICAL CLOSE,ITS,LORJK,LRJK,LUPD
      COMMON
     ./ATOMS / NUMAT,NAT(LM1),NFIRST(LM1),NLAST(LM1)
     ./BESAFE/ TLIMIT
     ./CIMAP / IFMAP
     ./CONSTF/ A0,AFACT,EV,EVCAL,PI,W1,W2,BIGEXP
     ./CONSTN/ ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
     ./CYCLES/ ICYC,NCOUNT
     ./DFP   / XPARAM(LMV),NVAR
     ./ERG   / ENERGY,GRADI(LMV),GNORM,CNORM
     ./ERG1  / CNORM1
     ./FLAG1 / KTITLE,KOMENT
     ./FLAG2 / SECADD,TIME1
     ./FLPOCM/ GRAD(LMV),D(LMV),ALPHA,FIP1
      COMMON
     ./INOPT2/ IN2(300)
     ./INOPT4/ XN4(50)
     ./NBFILE/ NBF(20)
     ./OPTCRT/ NSUCC
     ./OPTEF / OLDG(LMV),VMODE(LMV),DD
     ./OVERLY/ IOV,JOV,KOV,LOV
     ./PARM3 / LOC(LMV),NVAR3
     ./YARCON/ YLGCV(LMYL),YLGCT(LMYL),IYLGC(5,LMYL)
     ./YARLAG/ YLVAL(LMYL),YLGRD(LMYL),YLD(LMYL),NYL
     ./YARUPD/ YARV(3,LM1+LM1M,LMYL),YARS(LMV,2),YARG(LMV,LMYL,2),IXTRAP
      DIMENSION HESS(LMH,LMH),OLDHSS(LMH,LMH),U(LMH,LMH)
      DIMENSION EIGVAL(LMV),FX(LMV),SVEC(LMV),TVEC(LMV),OOLDG(LMV)
C     DIMENSION WORK(LMV*5)
      DIMENSION ARRAY(LM5)
      DATA TMONE/1.0D-01/
C     DATA TMTWO/1.0D-02/
      DATA TMSIX/1.0D-06/
      DATA PT75 /0.75D0/
C     CRITERIA FOR TRUST RADIUS UPDATE (DEMIN, GMIN).
C     THRESHOLDS FOR CLOSENESS TO A STATIONARY POINT.
C     DEMIN FOR ENERGY CHANGE, IN KCAL/MOL.
C     GMIN FOR GRADIENT CHANGE, IN KCAL/(MOL*ANGSTROM).
      DATA DEMIN,GMIN /2.0D-02,5.0D0/
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** SETUP PHASE.
      IF(NVAR.LE.0) THEN
         WRITE(NB6,500)
         ICALL=-3
         RETURN
      ENDIF
C     INPUT OPTIONS.
      IGEOM  = IN2(4)
      MAXRTL = IN2(34)
      MIDDLE = IN2(37)
      IPRINT = IN2(38)
      LCONVG = IN2(49)
      MODE   = IN2(80)
      IRECLC = IN2(81)
      IUPD   = IN2(82)
      IGTHES = IN2(83)
      LLAMDA = IN2(84)
      LNONR  = IN2(85)
      LRSCAL = IN2(86)
      LGNMIN = IN2(87)
      IMOMAP = IN2(156)
      ICROSS = IN2(160)
      MAXMAP = IN2(165)
      DMAX   = XN4(1)
      DDMIN  = XN4(2)
      DDMAX  = XN4(3)
C     RMIN   = XN4(4)
C     RMAX   = XN4(5)
      OMIN   = XN4(6)
      TOL2   = XN4(7)
C     INITIALIZATION.
      ITS    = NIMAG.EQ.1
      LUPD   = IN2(88).EQ.0
      PRT    = IPRINT.GE. 0
      PRT1   = IPRINT.GE. 1
      PRTMIN = IPRINT.GE.-1
      ICYC   = 0
      IRST   = 0
      NCOUNT = 0
      NTO    = 1+(NVAR-1)/NITEM
      NREM   = NVAR-(NTO-1)*NITEM
      NTOYL  = 1+(NYL-1)/NITEM
      NREMYL = NYL-(NTOYL-1)*NITEM
      CNORM1 = ZERO
      SFDFP  = 1.5D0
      OSMIN  = 0.005D0
      IF(IRECLC.EQ.1) OSMIN=0.001D0
      IXTRAP = 0
      IF(ICROSS.EQ.5) THEN
         NVARLM=NVAR+NYL
      ELSE
         NVARLM=NVAR
      ENDIF
      IFMAP = 0
      IF(PRTMIN .AND. ICROSS.EQ.5) THEN
         WRITE(NB6,505) KOMENT,KTITLE
      ELSE
         IF(PRTMIN .AND. NIMAG.EQ.0) WRITE(NB6,510) KOMENT,KTITLE
         IF(PRTMIN .AND. NIMAG.EQ.1) WRITE(NB6,520) KOMENT,KTITLE
      ENDIF
C *** CHECK THAT OPTIONS REQUESTED ARE REASONABLE.
      IF(PRT .AND. IGEOM.EQ.0 .AND. NVAR.GT.(3*NUMAT-6)) THEN
         WRITE(NB6,530)
      ENDIF
      IF(MODE.GT.NVAR) THEN
         WRITE(NB6,540) MODE,NVAR
         STOP 'EIGF'
      ENDIF
      IF(ITS .AND. IUPD.EQ.2) THEN
         WRITE(NB6,550)
         STOP 'EIGF'
      ENDIF
      IF(ITS .AND. IGTHES.EQ.0) THEN
         WRITE(NB6,560)
         STOP 'EIGF'
      ENDIF
      IF(IGTHES.LT.0 .OR. IGTHES.GT.5) THEN
         WRITE(NB6,570) IGTHES
         STOP 'EIGF'
      ENDIF
C *** GET INITIAL ENERGY AND GRADIENT.
      IF(MIDDLE.GT.0) THEN
         WRITE(NB6,580)
         CALL EFSAV  (HESS,LMH,2,MODE,MIDDLE)
         CALL DENSAV (0,ARRAY,LM5,1)
         IF(ICROSS.EQ.5) THEN
            GNORM = SQRT( DDOT(NVAR,GRAD,1,GRAD,1)
     1                    + DDOT(NYL,YLGRD,1,YLGRD,1) )
         ELSE
            GNORM = SQRT(DDOT(NVAR,GRAD,1,GRAD,1))
         ENDIF
      ELSE
         DO 10 I=1,NVAR
         GRAD(I) = ZERO
         D(I)    = ZERO
   10    CONTINUE
         LOV   = 1
         ICALL = 21
         CALL COMPFG (NVAR,XPARAM,FIP1,FIP1,GRAD,ARRAY,LM5,
     1                ICALL,SCFCAL)
         IF(ICALL.EQ.-1) RETURN
         IF(ITS) FIP1=ENERGY
      ENDIF
C *** CHECK WHETHER GEOMETRY IS ALREADY OPTIMIZED.
      IF(GNORM.LT.TOL2) THEN
         WRITE(NB6,590)
         NSUCC  = 5
         GO TO 200
      ENDIF
C *** GET INITIAL HESSIAN.
      IF(MIDDLE.LE.0) THEN
         IF(IGTHES.EQ.2) CALL EFSAV (HESS,LMH,3,MODE,MIDDLE)
         ICALL = 21
         CALL GETHES (HESS,XPARAM,SVEC,TVEC,IGTHES,LMH,NVAR,IPRINT,
     1                ARRAY,LM5,ICALL,SCFCAL)
         IF(ICALL.EQ.-1) RETURN
         IF(ICROSS.EQ.5) CALL YARHES (HESS,LMH,IPRINT)
      ENDIF
      CALL CPUSEC(TX1)
      TX2    = TX1
C     *
C *** START OF MAIN LOOP.
C     *
   20 CONTINUE
      IF(PRT) WRITE(NB6,600)
      ICYC   = ICYC+1
      IRST   = IRST+1
C *** PRINTING SECTION.
      IF(ICROSS.EQ.5) THEN
         GNORM = SQRT( DDOT(NVAR,GRAD,1,GRAD,1)
     1                    + DDOT(NYL,YLGRD,1,YLGRD,1) )
      ELSE
         GNORM = SQRT(DDOT(NVAR,GRAD,1,GRAD,1))
      ENDIF
      IF(PRT) THEN
         WRITE(NB6,610) ICYC,FIP1
         DO 30 I=1,NVAR
         SVEC(I)= XPARAM(I)
         TVEC(I)= D(I)
         LOC2   = LOC(I)-3*((LOC(I)-1)/3)
         IF(IGEOM.GT.0 .OR. LOC2.EQ.1) GO TO 30
         SVEC(I)= XPARAM(I)*AFACT
         TVEC(I)= D(I)*AFACT
   30    CONTINUE
         JMIN   = 1-NITEM
         DO 40 I=1,NTO
         JMIN   = JMIN+NITEM
         JMAX   = JMIN+NITEM-1
         IF(I.EQ.NTO) JMAX = JMIN+NREM-1
         WRITE(NB6,620) (J,J=JMIN,JMAX)
         WRITE(NB6,630) (SVEC(J),J=JMIN,JMAX)
         WRITE(NB6,640) (GRAD(J),J=JMIN,JMAX)
         IF(IPRINT.GE.5) WRITE(NB6,645) (TVEC(J),J=JMIN,JMAX)
   40    CONTINUE
         IF(ICROSS.EQ.5) THEN
            WRITE(NB6,615)
            JMIN = 1-NITEM
            DO 45 I=1,NTOYL
               JMIN = JMIN+NITEM
               JMAX = JMIN+NITEM-1
               IF(I.EQ.NTOYL) JMAX = JMIN+NREMYL-1
               WRITE(NB6,620) (J,J=JMIN,JMAX)
               WRITE(NB6,630) (YLVAL(J),J=JMIN,JMAX)
               WRITE(NB6,640) (YLGRD(J),J=JMIN,JMAX)
               IF(IPRINT.GE.5) WRITE(NB6,645) (YLD(J),J=JMIN,JMAX)
   45       CONTINUE
            IF(NYL.GT.2) THEN
               WRITE(NB6,647)
               DO 47 I=1,(NYL-2)
                  WRITE(NB6,648) IYLGC(1,I),YLGCV(I),YLGCT(I),
     1                       (YLGCV(I)-YLGCT(I)),
     2                       (IYLGC(J,I),J=2,(IYLGC(1,I)+2))
   47          CONTINUE
            ENDIF
         ENDIF
         WRITE(NB6,650) GNORM
         IF(IPRINT.GE.5) THEN
            WRITE(NB6,660)
            CALL MATPRT (HESS,NVARLM,NVARLM,LMH,LMH)
         ENDIF
      ELSE IF(PRTMIN) THEN
         WRITE(NB6,670) ICYC,TX2+SECADD,ENERGY,GNORM
      ENDIF
C     *
C *** DIAGONALIZATION OF HESSIAN MATRIX.
C     NOTE THAT TRED2 DOES NOT CHANGE HESS.
   50 CONTINUE
      CALL TRED2 (LMH,NVARLM,HESS,EIGVAL,SVEC,U)
      CALL TQL2  (LMH,NVARLM,EIGVAL,SVEC,U,IERR)
C *** ALTERNATIVE DIAGONALIZATION WITH LOWER-TRIANGLE HESSIAN.
C     NOTE THAT TDIAG DESTROYS HESS.
C     LM4    = NVAR*(NVAR+1)/2
C     CALL LINEAR (HESS,HESS,NVAR,LMH,LM4)
c     CALL TDIAG  (HESS,U,EIGVAL,WORK,LM4,LMH,NVAR,NVAR)
C *** DEBUG PRINT.
      IF(IPRINT.GE.5) THEN
         WRITE(NB6,680)
         CALL MATOUT(U,EIGVAL,NVARLM,NVARLM,LMH,LMH)
         WRITE(NB6,790)
      ENDIF
C *** SET SMALL EIGENVALUES TO ZERO AND DETERMINE NUMBER OF
C     NEGATIVE EIGENVALUES.
      NEG    = 0
      DO 60 I=1,NVARLM
      IF(ABS(EIGVAL(I)).LT.TMSIX) EIGVAL(I)=ZERO
      IF(EIGVAL(I).LT.ZERO) NEG=NEG+1
   60 CONTINUE
      IF(PRT) WRITE(NB6,690) NEG
      IF(PRT1) WRITE(NB6,790)
C *** COMPUTE PROJECTION (FX) OF GRADIENT (GRAD) ALONG EIGENVECTORS (U).
C     NOT REQUIRED FOR ZERO EIGENVALUES.
      DO 70 I=1,NVARLM
      IF(ABS(EIGVAL(I)).EQ.ZERO) THEN
         FX(I)=ZERO
      ELSE IF(ICROSS.EQ.5) THEN
         FX(I)= DDOT(NVAR,U(1,I),1,GRAD,1) +
     1          DDOT(NYL,U(NVAR+1,I),1,YLGRD,1)
      ELSE
         FX(I)=DDOT(NVAR,U(1,I),1,GRAD,1)
      ENDIF
   70 CONTINUE
C     *
C *** CHOICE OF THE EIGENVECTOR TO BE FOLLOWED (MODE).
C     ONLY RELEVANT FOR TS SEARCH.
C     NOT NECESSARY FOR PURE NEWTON-RAPHSON STEPS (LLAMDA=2).
C  80 CONTINUE
      IF(ITS .AND. LLAMDA.NE.2) THEN
         CALL OVEREF (U,EIGVAL,LMH,DMAX,OMIN,OSMIN,NVAR,LORJK,
     1                IPRINT,MODE)
C        IF LORJK IS TRUE, THEN TS MODE OVERLAP IS LESS THAN OMIN.
C        HENCE, REJECT PREVIOUS STEP AND DETERMINE NEW VECTOR (D).
C        IN THE PRESENT IMPLEMENTATION, THE DATA FROM THE LAST-BUT-ONE
C        STEP ARE RECOVERED (OOLDE,OOLDG,OLDHSS,ODD,ODMAX) AND USED TO
C        RECOMPUTE THE CORRESPONDING HESSIAN DATA (DIAGONALIZATION TO
C        OBTAIN EIGVAL,U,FX - GO TO 50) AND TO PROCEED WITH A SMALLER
C        STEP SIZE. TECHNICAL NOTES:
C        - THE IMPLIED LOOP (GO TO 50) IS EXECUTED EXACTLY ONCE SINCE
C          THERE WILL BE UNIT OVERLAP BETWEEN VMODE(I) AND U(I,IT)
C          DUE TO THE PREVIOUS DEFINITION OF VMODE(I) IN OVEREF.
C        - IT WOULD ALSO BE POSSIBLE TO SAVE THE OLD DATA IN OLDEIG,
C          OLDU,OLDFX (AVOID DIAGONALIZATION AT THE EXPENSE OF MEMORY,
C          GO TO 80 IN THIS CASE).
C        - LORJK IS FALSE IN THE FIRST CYCLE (AUTOMATICALLY).
         IF(LORJK) THEN
            IF(PRT) WRITE(NB6,700)
            DD     = ODD
            DMAX   = ODMAX
            FIP1   = OLDE
            OLDE   = OOLDE
            DO 90 I=1,NVAR
            XPARAM(I) = XPARAM(I)-D(I)
            GRAD(I)   = OLDG(I)
            OLDG(I)   = OOLDG(I)
   90       CONTINUE
            DO 101 J=1,NVAR
            DO 100 I=1,NVAR
            HESS(I,J) = OLDHSS(I,J)
  100       CONTINUE
  101       CONTINUE
            DMAX   = MIN(DMAX,DD)/TWO
            ODMAX  = DMAX
            ODD    = DD
            ICYC   = ICYC-1
            IRST   = IRST-1
            IF(DMAX.LT.DDMIN) GO TO 160
            GO TO 50
         ENDIF
      ENDIF
C     SAVE OLD ENERGY AND GRADIENT.
C     OOLDG IS NEEDED ONLY IN CASE OF OMIN REJECTION.
      OLDE   = FIP1
      OLDGN  = SQRT(DDOT(NVAR,GRAD,1,GRAD,1))
      IF(ITS .AND. LLAMDA.NE.2 .AND. ICYC.GT.1) THEN
         DO 110 I=1,NVAR
         OOLDG(I) = OLDG(I)
  110    CONTINUE
      ENDIF
      DO 115 I=1,NVAR
      OLDG(I) = GRAD(I)
  115 CONTINUE
      IF(ICROSS.EQ.5) THEN
C        STORE OLD COMPONENTS OF THE GRADIENT
C        FOR USE IN UPDATING HESSIAN
         DO 116 I=1,NVAR
            YARS(I,2) = YARS(I,1)
            DO 117 J=1,NYL
               YARG(I,J,2) = YARG(I,J,1)
  117       CONTINUE
  116    CONTINUE
      ENDIF
C     *
C *** COMPUTE SEARCH DIRECTION VECTOR (D).
  120 CONTINUE
      IF(LLAMDA.EQ.2 .OR. ICROSS.EQ.5) THEN
         CALL FORMD2 (EIGVAL,FX,U,LMH,NVAR,NVARLM,DMAX,LRSCAL,IPRINT)
      ELSE IF(LLAMDA.EQ.1) THEN
         CALL FORMD1 (EIGVAL,FX,U,LMH,NVAR,DMAX,ITS,IPRINT,MODE)
      ELSE
         CALL FORMD  (EIGVAL,FX,U,LMH,NVAR,DMAX,ITS,LRSCAL,LNONR,
     1                IPRINT,MODE)
      ENDIF
C *** COMPUTE NEW COORDINATE VECTOR (XPARAM).
      DO 130 I=1,NVAR
         XPARAM(I) = XPARAM(I)+D(I)
  130 CONTINUE
      IF (ICROSS.EQ.5) THEN
         DO 131 I=1,NYL
            YLVAL(I) = YLVAL(I)+YLD(I)
  131    CONTINUE
      ENDIF
C *** INITIALIZATION OF MAPPING LOOP
      IMTRY = 0
  133 CONTINUE
C     *
C *** COMPUTE PREDICTED ENERGY CHANGE (DEPRE).
C     SUM CONTRIBUTIONS IN LOCAL PRINCIPAL MODES TO SECOND ORDER.
C     SS     : STEP SIZE ALONG HESSIAN EIGENVECTOR, SEE EQ.(6) IN REF.2.
C     FX(I)  : GRADIENT  ALONG HESSIAN EIGENVECTOR.
C     EIGVAL : HESSIAN EIGENVALUE.
C     XLAMD  : GENERAL LAMBDA VALUE FOR STEPS ALONG EIGENVECTORS.
C     XLAMD0 : SPECIAL LAMBDA VALUE FOR STEP  ALONG TS MODE.
C     SKAL   : OVERALL SCALE FACTOR FOR STEP SIZE.
C     THIS CODE YIELDS THE SAME RESULTS AS THE CODE IN THE NEXT SECTION.
C     IT REQUIRES XLAMD,XLAMD0,SKAL FROM ROUTINES FORMD/FORMD1/FORMD2
C     WHICH ARE NOT NEEDED BY THE CODE IN THE NEXT SECTION (PREFERRED).
C     DEPRE  = ZERO
C     MMODE  = MAX(1,MODE)
C     IF(IPRINT.GT.5) WRITE(NB6,900)
C     DO 135 I=1,NVAR
C     XTMP   = XLAMD
C     IF(ITS .AND. I.EQ.MMODE) XTMP=XLAMD0
C     IF(ABS(XTMP-EIGVAL(I)).LT.TMTWO) THEN
C        SS  = ZERO
C     ELSE
C        SS  = SKAL*FX(I)/(XTMP-EIGVAL(I))
C     ENDIF
C     DEPREI = SS*FX(I)+PT5*SS*SS*EIGVAL(I)
C     DEPRE  = DEPRE+DEPREI
C     IF(IPRINT.GT.5) THEN
C        WRITE(NB6,910) I,XTMP,SS,FX(I),EIGVAL(I),SS*FX(I),DEPREI
C     ENDIF
C 135 CONTINUE
C     *
C *** COMPUTE PREDICTED ENERGY CHANGE (DEPRE).
C     SUM CONTRIBUTIONS IN STANDARD COORDINATES TO SECOND ORDER.
C     SAME RESULTS AS OBTAINED FROM THE PRECEDING CODE.
      DO 141 I=1,NVAR
      SVEC(I) = ZERO
      DO 140 J=1,NVAR
      SVEC(I) = SVEC(I)+HESS(I,J)*D(J)
  140 CONTINUE
  141 CONTINUE
C     GRAD MAY BE OVERWRITTEN BY MAPPING LOOP
C     SO OLDG MUST BE USED HERE.
      DEPRE1  = DDOT(NVAR,OLDG,1,D,1)
      DEPRE2  = DDOT(NVAR,SVEC,1,D,1)*PT5
      DEPRE   = DEPRE1+DEPRE2
C     *
C *** EVALUATE ENERGY AND GRADIENT AT THE NEW GEOMETRY.
      IFMAP  = 0
      LOV    = 2
      ICALL  = 21
      CALL COMPFG (NVAR,XPARAM,FIP1,FIP1,GRAD,ARRAY,LM5,
     1             ICALL,SCFCAL)
C     ONLY RETURN HERE IF MAPPING IS NOT THE CAUSE OF FAILURE
      IF(ICALL.EQ.-1 .AND. IFMAP.EQ.0) RETURN
      IF(ITS) FIP1=ENERGY
C *** TEST FOR ORBITAL MAPPING FAILURE
C     AND TAKE A SMALLER STEP IF NECESSARY
      IF(IMOMAP.EQ.2 .AND. IFMAP.EQ.1) THEN
C        ORBITAL MAPPING HAS FAILED
         WRITE(NB6,800)
         IMTRY = IMTRY + 1
         IF(IMTRY.EQ.MAXMAP) THEN
            WRITE(NB6,820)
C           NOTE ICALL IS ALREADY -1
            RETURN
         ENDIF
C        RETRY WITH STEP SIZE HALVED
         WRITE(NB6,810)
         DO 145 I=1,NVAR
            D(I) = D(I) * 0.5D0
            XPARAM(I) = XPARAM(I)-D(I)
 145     CONTINUE
         IF (ICROSS.EQ.5) THEN
            DO 146 I=1,NYL
               YLD(I) = YLD(I) * 0.5D0
               YLVAL(I) = YLVAL(I)-YLD(I)
 146        CONTINUE
         ENDIF
         GO TO 133
      ENDIF
C
C *** TEST FOR CONVERGENCE.
      IF(ICROSS.EQ.5) THEN
         GNORM = SQRT( DDOT(NVAR,GRAD,1,GRAD,1)
     1                    + DDOT(NYL,YLGRD,1,YLGRD,1) )
      ELSE
         GNORM = SQRT(DDOT(NVAR,GRAD,1,GRAD,1))
      ENDIF
      IF(GNORM.LT.TOL2) GO TO 180
C     *
C *** COMPARE PREDICTED ENERGY CHANGE WITH ACTUAL CHANGE (DEACT).
      DEACT  = FIP1-OLDE
      RATIO  = DEACT/DEPRE
      IF(PRT1 .AND. ICROSS.NE.5) WRITE(NB6,710) DEPRE,DEACT,RATIO
C *** TEST FOR REASONS TO REJECT THE PREVIOUS STEP.
C     DO NOT ALLOW THE ENERGY TO RISE IN A SEARCH FOR A MINIMUM.
C     (EXCEPT FOR YARKONY CI SEARCH - RESET HESSIAN IF ENERGY GAP RISES,
C     BUT ONLY IF GAP > 1KCAL/MOL. RESET ONLY ALLOWED EVERY 10 ITERATIONS
C     OTHERWISE CYCLING BEHAVIOUR IS POSSIBLE)
C     DO NOT ALLOW THE GRADIENT NORM TO RISE WHEN USING OPTION GRMIN.
      LRJK   = .FALSE.
      IF(ICROSS.EQ.5) THEN
         IF(FIP1.GT.OLDE .AND. FIP1.GT.1.0D0 .AND. IRST.GE.10) THEN
            IF(PRT1) WRITE(NB6,719) FIP1
            IRST = IRECLC
         ENDIF
      ELSE IF(NIMAG.EQ.0 .AND. FIP1.GT.OLDE) THEN
         IF(PRT1) WRITE(NB6,720) FIP1
         LRJK = .TRUE.
      ENDIF
      IF(LGNMIN.EQ.1) THEN
         IF(GNORM.GT.OLDGN) THEN
            IF(PRT1) WRITE(NB6,721) GNORM
            LRJK = .TRUE.
         ENDIF
      ENDIF
C     DO NOT ALLOW A VERY LOW OR HIGH RATIO BETWEEN THE FOUND AND
C     THE EXPECTED ENERGY CHANGE IN A TRANSITION STATE SEARCH.
C     NOT USED PRESENTLY.
C     IF(ITS .AND. (RATIO.LT.RMIN .OR. RATIO.GT.RMAX) .AND.
C    1   (ABS(DEPRE).GT.DEMIN .OR. ABS(DEACT).GT.DEMIN)) THEN
C        IF(PRT1) WRITE(NB6,722)
C        LRJK = .TRUE.
C     ENDIF
      IF(LRJK) THEN
         DO 150 I=1,NVAR
         XPARAM(I) = XPARAM(I)-D(I)
  150    CONTINUE
         DMAX = MIN(DMAX,DD)/TWO
         IF(PRT1) WRITE(NB6,725) DMAX
         IF(DMAX.LT.DDMIN) GO TO 160
         GO TO 120
      ENDIF
C *** PRINT CURRENT STEP SIZE AND SAVE CURRENT DATA.
      IF(PRT1) WRITE(NB6,730) DD
      ODD    = DD
      ODMAX  = DMAX
      OOLDE  = OLDE
C     *
C *** POSSIBLE USE OF DYNAMICAL TRUST RADIUS (DMAX).
      CLOSE  = GNORM.LT.GMIN .AND. ABS(DEPRE).LT.DEMIN
     1                       .AND. ABS(DEACT).LT.DEMIN
C     FAR AWAY FROM A STATIONARY POINT, ADJUST TRUST RADIUS DEPENDING
C     ON THE RATIO OF FOUND AND EXPECTED ENERGY CHANGES.
      IF(LUPD .AND. .NOT.CLOSE) THEN
         IF(ITS .AND. RATIO.LE.TMONE .OR. RATIO.GE.THREE)
     1      DMAX=MIN(DMAX,DD)/TWO
         IF(ITS .AND. RATIO.GE.PT75 .AND. RATIO.LE.(FOUR/THREE)
     1          .AND. DD.GT.(DMAX-TMSIX)) DMAX=DMAX*SQRT(TWO)
         IF(.NOT.ITS .AND. RATIO.GE.PT5 .AND. DD.GT.(DMAX-TMSIX))
     1      DMAX=DMAX*SQRT(TWO)
         IF(ABS(RATIO-ONE).LT.TMONE) DMAX=DMAX*SQRT(TWO)
         DMAX = MAX(DMAX,DDMIN-TMSIX)
         DMAX = MIN(DMAX,DDMAX)
      ENDIF
C     CLOSE TO A STATIONARY POINT, ALLOW STEP SIZES UP TO TMONE=0.1.
      IF(LUPD .AND. CLOSE) DMAX=MAX(DMAX,TMONE)
      IF(PRT1) WRITE(NB6,740) DMAX
C *** CHECK THAT THE TRUST RADIUS EXCEEDS A GIVEN MINIMAL VALUE (DDMIN).
  160 IF(DMAX.LT.DDMIN) THEN
         WRITE(NB6,750) DDMIN
         NSUCC = 10
         GO TO 190
      ENDIF
C     *
C *** SAVE OLD HESSIAN FOR POSSIBLE OMIN REJECTION.
      IF(ITS .AND. LLAMDA.NE.2) THEN
         DO 171 J=1,NVARLM
         DO 170 I=1,NVARLM
         OLDHSS(I,J) = HESS(I,J)
  170    CONTINUE
  171    CONTINUE
      ENDIF
C *** COMPUTE OR UPDATE HESSIAN.
      IF(IRST.GE.IRECLC) THEN
         IRST  = 0
         ICALL = 21
         CALL GETHES (HESS,XPARAM,SVEC,TVEC,IGTHES,LMH,NVAR,IPRINT,
     1                ARRAY,LM5,ICALL,SCFCAL)
         IF(ICALL.EQ.-1) RETURN
      ELSE
         CALL UPDHES (HESS,SVEC,TVEC,LMH,NVAR,IUPD,ICROSS,IPRINT)
      ENDIF
      IF(ICROSS.EQ.5) CALL YARHES (HESS,LMH)
      IF(IXTRAP.EQ.1) IXTRAP = 2
C     *
C *** SAVE CURRENT RESULTS ON FILE.
      IF(MIDDLE.GE.0) THEN
         CALL EFSAV (HESS,LMH,1,MODE,MIDDLE)
         CALL DENSAV(0,ARRAY,LM5,0)
      ENDIF
C *** CHECK FOR TIME LIMIT AND NUMBER OF CYCLES.
      CALL CPUSEC(TX2)
      TCYCLE = TX2-TX1
      TX1    = TX2
      IF(PRT) THEN
         WRITE(NB6,760) TX2+SECADD
      ENDIF
      IF(ICYC.LT.MAXRTL .AND. TLIMIT.GT.(TX2+SFDFP*TCYCLE)) GO TO 20
      IF(ICYC.GE.MAXRTL) THEN
         WRITE(NB6,770)
      ELSE
         IF(ITS) FIP1=GNORM
         CALL PRTDFP(1)
      ENDIF
      ICALL  =-8
      RETURN
C     *
C *** OPTIMIZATION FINISHED.
C     *
  180 CONTINUE
      WRITE(NB6,780) GNORM,TOL2
      NSUCC  = 5
  190 CONTINUE
      CALL EFSAV (HESS,LMH,1,MODE,MIDDLE)
      CALL CPUSEC(TX2)
      IF(PRT) THEN
         WRITE(NB6,760) TX2+SECADD
      ENDIF
      IF(NSUCC.GE.10) THEN
         IF(LCONVG.LT.0 .OR. GNORM.LT.TOL2*LCONVG) NSUCC=9
      ENDIF
C *** FINAL EVALUATION OF ENERGY AND MO EIGENVECTORS.
  200 CONTINUE
      LOV    = 4
      ICALL  = 10
      CALL COMPFG (NVAR,XPARAM,FIP1,FIP1,GRAD,ARRAY,LM5,
     1             ICALL,SCFCAL)
      IF(ICALL.EQ.-1) RETURN
      IF(ITS) FIP1=GNORM
      CALL PRTDFP (0)
      RETURN
  500 FORMAT(///1X,'OPTIMIZATION REQUIRES AT LEAST ONE VARIABLE.'//)
  505 FORMAT(///1X,'YARKONY CONICAL INTERSECTION SEARCH',
     1       /  1X,A,/1X,A)
  510 FORMAT(///1X,'EF OPTIMIZATION FOR ENERGY MINIMUM',
     1       /  1X,A,/1X,A)
  520 FORMAT(///1X,'EF OPTIMIZATION FOR TRANSITION STATE',
     1       /  1X,A,/1X,A)
  530 FORMAT(/  1X,'WARNING: MORE VARIABLES THAN DEGREES OF FREEDOM'/)
  540 FORMAT(// 1X,'ERROR: MODE IS LARGER THAN NVAR.',
     1       /  1X,'MODE : EIGENVECTOR TO BE FOLLOWED',I5,
     2       /  1X,'NVAR : NUMBER OF VARIABLES       ',I5)
  550 FORMAT(/  1X,'TS SEARCH AND BFGS UPDATE WILL NOT WORK'/)
  560 FORMAT(/  1X,'TS SEARCH REQUIRES BETTER THAN DIAGONAL HESSIAN'/)
  570 FORMAT(/  1X,'UNRECOGNIZED OPTION FOR HESSIAN:',I5)
  580 FORMAT(/  1X,'THIS IS AN EIGENVECTOR FOLLOWING RESTART.',
     1       /  1X,'ALL INFORMATION IS READ FROM FILE NB4.'/)
  590 FORMAT(/  1X,'GEOMETRY IS ALREADY OPTIMIZED'/)
  600 FORMAT(// 1X,'*****')
  610 FORMAT(/  1X,'AT THE BEGINNING OF CYCLE',I5,
     1             '  THE ENERGY IS ',F12.5,' KCAL/MOL',
     2       /  1X,'THE CURRENT POINT IS ...')
  615 FORMAT(/  1X,'WITH LAGRANGE MULTIPLIERS ...')
  620 FORMAT(/  3X,'I',6X,I4,9(8X,I4))
  630 FORMAT(   1X,'X(I)',10(1X,F11.5))
  640 FORMAT(   1X,'G(I)',10(1X,F11.5))
  645 FORMAT(   1X,'D(I)',10(1X,F11.5))
  647 FORMAT(/  1X,'GEOMETRY CONSTRAINTS',
     1     // 1X,'TYPE     CURRENT       TARGET         DIFF     ATOMS')
  648 FORMAT(2X,I2,3X,F10.5,3X,F10.5,3X,F10.5,3X,4I3)
  650 FORMAT(/  1X,'CURRENT GRADIENT NORM  = ',E11.4)
  660 FORMAT(// 1X,'CURRENT HESSIAN MATRIX')
C 665 FORMAT(   1X,'CYCLE:',I4,' GRAD:',F10.2,' HEAT:',G13.7)
  670 FORMAT(   1X,'CYCLE =',I4,' , TOTAL TIME = ',F10.3,
     1             ' , HEAT =',F12.5,' , GNORM =',F15.5)
  680 FORMAT(// 1X,'EIGENVECTORS OF CURRENT HESSIAN MATRIX')
  690 FORMAT(   1X,'EIGENVALUES OF HESSIAN :',I3,' NEGATIVE')
  700 FORMAT(/  1X,'OVERLAP WITH TS MODE IS BELOW THE THRESHOLD (OMIN)',
     1       /  1X,'FOR THE CURRENT SEARCH DIRECTION VECTOR (D).',
     2       /  1X,'REDETERMINE VECTOR (D) WITH SMALLER LIMIT (DMAX).')
  710 FORMAT(/  1X,'ENERGY CHANGE EXPECTED = ',E11.4,
     1       /  1X,'ENERGY CHANGE FOUND    = ',E11.4,
     2       /  1X,'RATIO  FOUND/EXPECTED  = ',E11.4)
  719 FORMAT(/  1X,'HIGHER ENERGY GAP      = ',E11.4,
     1             ' - RESETTING HESSIAN')
  720 FORMAT(   1X,'HIGHER ENERGY          = ',E11.4,'   REJECTED')
  721 FORMAT(   1X,'HIGHER GRADIENT NORM   = ',E11.4,'   REJECTED')
C 722 FORMAT(   1X,'ENERGY CHANGES .....     ', 11X ,'   REJECTED')
  725 FORMAT(   1X,'STEP SIZE REDUCED TO   = ',E11.4)
  730 FORMAT(   1X,'STEP SIZE USED         = ',E11.4)
  740 FORMAT(   1X,'CURRENT TRUST RADIUS   = ',E11.4)
  750 FORMAT(/  1X,'MINIMUM TRUST RADIUS   = ',E11.4,
     1       // 1X,'OPTIMIZATION TERMINATING: TRUST RADIUS BELOW LIMIT',
     2       /  1X,'GEOMETRY MAY NOT BE COMPLETELY OPTIMIZED.')
  760 FORMAT(/  1X,'TOTAL TIME',F18.3,' SECONDS')
  770 FORMAT(/  1X,'TERMINATION: TOO MANY OPTIMIZATION CYCLES.')
  780 FORMAT(/  1X,'FINAL GRADIENT NORM    = ',E11.4,
     1       /  1X,'BELOW REQUESTED VALUE  = ',E11.4)
  790 FORMAT(   1X)
  800 FORMAT(/  1X,'ORBITAL MAPPING FAILURE REPORTED')
  810 FORMAT(   1X,'RETRYING WITH STEP SIZE HALVED')
  820 FORMAT(/  1X,'ORBITAL MAPPING HAS FAILED COMPLETELY')
C 900 FORMAT(/  1X,'  I    LAMBDA        SS        FX       EIGVAL',
C    1             '      SS*FX     DEPREI'/)
C 910 FORMAT(   1X,I3,2F11.5,2E11.3,2F11.5)
      END
