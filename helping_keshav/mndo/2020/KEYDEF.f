      SUBROUTINE KEYDEF (KEYWRD,IMOPAC,KEYMOD)
C     *
C     HANDLING OF STANDARD MNDO AND MOPAC-TYPE KEYWORDS.
C     *
C     NOTATION. I=INPUT, O=OUTPUT.
C     KEYWRD    CHARACTER STRING CONTAINING THE KEYWORDS (I).
C     IMOPAC    TYPE OF INPUT (O).
C               =-1  KEYWORD  INPUT, MNDO97 CONVENTIONS.
C               = 0  STANDARD INPUT, NUMERICAL INPUT WITHOUT KEYWORDS.
C               = 1  KEYWORD  INPUT, MOPAC-TYPE CONVENTIONS.
C     KEYMOD    CONTROL OF THE ACTIONS TAKEN BY KEYDEF (I,O).
C               =-9  ERROR FLAG, REQUESTED OPTIONS NOT AVAILABLE.
C               =-8  KEYWORD EOFILE FOUND, SIGNAL END OF INPUT FILE.
C               =-1  DETERMINE IMOPAC, NO PRINTING.
C               = 0  DEFINE AND PRINT ALL KEYWORD-BASED OPTIONS.
C               = 1  PRINT AVAILABLE KEYWORD-BASED OPTIONS, NO ACTION.
C               = 2  GENERATE NEW STRING FROM STANDARD NUMERICAL INPUT.
C               = 3  INITIALIZE ALL OPTIONS TO ZERO AND RETURN.
C     *
C     STANDARD ACTION (KEYMOD=0):
C     KEYDEF CHECKS ALL KEYWORDS AND PRINTS THOSE IT RECOGNIZES.
C     IF IT FINDS AN UNKNOWN KEYWORD THE PROGRAM WILL BE STOPPED.
C     ORIGINALLY ADAPTED FROM MOPAC(6.0) WRITTEN BY J.J.P.STEWART.
C     COMPLETELY REWRITTEN TO INCLUDE STANDARD KEYWORDS FROM MNDO96.
C     *
C     TREATMENT OF MOPAC(6.0) KEYWORDS:
C     IF A MOPAC KEYWORD CORRESPONDS TO AN OPTION IN THIS PROGRAM,
C     THE CORRESPONDING VARIABLE IS SET TO AN APPROPRIATE VALUE.
C     IF NOT, THE PROGRAM IS USUALLY STOPPED. IN THE CASE OF PRINT
C     OPTIONS, A MOPAC KEYWORD IS SOMETIMES IGNORED.
C     *
      USE LIMIT, ONLY: LMZ
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      PARAMETER (LM96=235)
      PARAMETER (LM96X=32)
      PARAMETER (LMMO1=128)
      PARAMETER (LMMO2=16)
      PARAMETER (LMMO3=17)
      CHARACTER*6   KEY96,KEY96X
      CHARACTER*7   KEYMO1,KEYMO2,KEYMO3
      CHARACTER*60  TXTMO1,TXTMO2,TXTMO3
      CHARACTER*(*) KEYWRD
      CHARACTER*800 ALLKEY,TMPKEY
      LOGICAL BIRAD,CI,EXCI,MYWORD,TRIP,UHF
      COMMON
     ./CCIS  / KMO,LMO,NC,LROOT
     ./CPEOPT/ NFLCPE,NPTCPE,NCPEZ
     ./INOPT1/ IN1(300)
     ./INOPT3/ XN3(50)
     ./NBFILE/ NBF(20)
     ./OPTTOL/ TOLEND(9)
     ./ORIGIN/ NDIP0
     ./PARM7 / DEPFAC
     ./PPOPT / NPDDG,NPBETA,NPALP
     ./PQOPT / NFLPQD,NPTPQD
     ./SCRT  / SCFCRT,PLCRT,SCFCRS,PLCRS
     ./SDISPB/ SDRLD(LMZ),SDRLQ(LMZ),SDRHD(LMZ),SDRHQ(LMZ),
     .         SDDP(LMZ),SDQP(LMZ),SDDPQ(LMZ),SDQPQ(LMZ),
     .         SDNEF(LMZ),NFLSD
      DIMENSION KEY96(LM96),LEN96(LM96)
      DIMENSION NN1(LM96),NP1(LM96)
      DIMENSION KEY96X(LM96X),LEN96X(LM96X)
      DIMENSION KEYMO1(LMMO1),KEYMO2(LMMO2),KEYMO3(LMMO3)
      DIMENSION LENMO1(LMMO1),LENMO2(LMMO2),LENMO3(LMMO3)
      DIMENSION TXTMO1(LMMO1),TXTMO2(LMMO2),TXTMO3(LMMO3)
      DIMENSION IN1MO1(LMMO1),IN1MO2(LMMO2),IN1MO3(LMMO3)
      DIMENSION INVMO1(LMMO1)
C *** KEY96(I) ALLOWS TO SIMULATE THE NUMERICAL INPUT TO MNDO96
C     BY USING KEYWORDS IN MOPAC-STYLE: INTEGER INPUT.
      DATA (KEY96(I),I=1,50) /
     1             'LIMIT ','IOP   ','JOP   ','IGEOM ','IFORM ',
     2             'LINDIR','MPLIB ','IEF   ','IDIIS ','INREFD',
     3             'IPAROK','MMINP ','NMR   ','NSAV7 ','NSAV8 ',
     4             'NSAV9 ','NSAV13','NSAV15','NSAV16','IMMOK ',
     5             'IHBOND','IFLD1 ','IFLD2 ','IFLD3 ','ICUTS ',
     6             'ICUTG ','IEXBAS','ICOSMO','IPSANA','IMMDP ',
     7             'INAC  ','MAXEND','MAXLIN','MAXRTL','ISCF  ',
     8             'IPLSCF','MIDDLE','IPRINT','KPRINT','LPRINT',
     9             'MPRINT','JPRINT','IPREC ','ICONV ','IHESS ',
     A             'IDFP  ','NREPET','LINITG','LCONVG','LGDUM '/
      DATA (KEY96(I),I=51,100) /
     1             'IHDLC1','IHDLC2','IHDLC3','INGEOM','INTDIR',
     2             'LINDMS','LINDIA','LINFRG','INPFRG','INP21 ',
     3             'INP22 ','INP23 ','INP24 ','INP25 ','KHARGE',
     4             'IMULT ','KTRIAL','KGEOM ','IPUBO ','IUHF  ',
     5             'KITSCF','NPRINT','IFAST ','IDIAG ','KSYM  ',
     6             'NUMSYM','KCI   ','NSTART','NSTEP ','MODE  ',
     7             'IRECLC','IUPD  ','IGTHES','LLAMDA','LNONR ',
     8             'LRSCAL','LGNMIN','LNOUPD','LEFDUM','IPSPRT',
     9             'IENRG ','ICORE ','IDISK ','IMIX  ','IDENS ',
     A             'INDSYM','IQSWAP','IAVEIT','IMAXIT','INRHS '/
      DATA (KEY96(I),I=101,150) /
     1             'IKRVEC','IROWS ','IPRCON','INCPUS','IDSTRP',
     2             'IHLST ','IHLWRP','IKMODE','ISOLVE','IKRSAV',
     3             'IUMIX ','IURHS ','IUK   ','IURES ','NMRLEV',
     4             'INTCTL','INCOFF','NMRNUC','IATERG','NUMATM',
     5             'MMCOUP','MMPOT ','MMLINK','NLINK ','MMFILE',
     6             'MCHARG','MMSKIP','IOP128','IOP129','IOP130',
     7             'ICI1  ','ICI2  ','IOUTCI','MOVO  ','MPERT ',
     8             'NCIREF','MCIREF','LEVEXC','IROOT ','LROOT ',
     9             'CICHG ','MULTCI','NCISYM','CIDIR ','CIDIAG',
     A             'IUVCD ','IMCD  ','IPOP  ','CIPLOT','CILEAD'/
      DATA (KEY96(I),I=151,200) /
     1             'JCI1  ','JCI2  ','PIPOP ','INATUR','CISELT',
     2             'IMOMAP','GUG157','KEEPCI','NCIGRD','ICROSS',
     3             'MINDAV','MAXDAV','KITDAV','NRMDAV','MAXMAP',
     4             'MAPTHR','NCONJ ','GUG168','GUG169','GUG170',
     5             'MAXCG ','MAXPUR','MCMAX ','MIDEMP','MPURIF',
     6             'MLROOT','MCGPRE','MCGUPD','MPSCAL','MCUTAU',
     7             'MCUTM ','MCUTF ','MCUTP ','MCUT1 ','MCUT2 ',
     8             'MCUTR ','IOP187','IOP189','IOP188','IOP190',
     9             'NRST  ','LDROP ','LDELL ','LSUB  ','LALPHA',
     A             'LCONV ','LTOLF ','LMAXST','IGRAD ','LPOINT'/
      DATA (KEY96(I),I=201,LM96) /
     1             'LFAC  ','LLDUM ','KPOINT','KFAC'  ,'KMASS ',
     2             'KKDUM ','NTEMP ','NTEMP1','NTEMP2','IOP210',
     3             'IMODE ','INOUT ','IVBSE ','IVBOVR','IFERMI',
     4             'NFLOAT','NDOCC ','IOP218','IOP219','IOP220',
     5             'ICUTZS','ITOLFM','ICUTML','MAXFMT','LIMFMT',
     6             'IHCORR','IOP227','IOP228','IOP229','IOP230',
     7             'NSPA  ','NVDW  ','IPOT  ','NITRO ','MODCSM'/
C     LEN96(I) IS THE LENGTH OF THE STRING DEFINING KEY96(I).
      DATA LEN96 / 5,3,3,5,5, 6,5,3,5,6, 6,5,3,5,5, 5,6,6,6,5,
     1             6,5,5,5,5, 5,6,6,6,5, 4,6,6,6,4, 6,6,6,6,6,
     2             6,6,5,5,5, 4,6,6,6,5, 6,6,6,6,6, 6,6,6,6,5,
     3             5,5,5,5,6, 5,6,5,5,4, 6,6,5,5,4, 6,3,6,5,4,
     4             6,4,6,6,5, 6,6,6,6,6, 5,5,5,4,5, 6,6,6,6,5,
     5             6,5,6,6,6, 5,6,6,6,6, 5,5,3,5,6, 6,6,6,6,6,
     6             6,5,6,5,6, 6,6,6,6,6, 4,4,6,4,5, 6,6,6,5,5,
     7             5,6,6,5,6, 5,4,4,6,6, 4,4,5,6,6, 6,6,6,6,6,
     8             6,6,6,6,6, 6,5,6,6,6, 5,6,5,6,6, 6,6,6,6,6,
     9             5,5,5,5,5, 5,6,6,6,6, 4,5,5,4,6, 5,5,6,5,6,
     A             4,5,6,4,5, 5,5,6,6,6, 5,5,5,6,6, 6,5,6,6,6,
     B             6,6,6,6,6, 6,6,6,6,6, 4,4,4,5,6/
C *** KEY96X(I) ALLOWS TO SIMULATE THE NUMERICAL INPUT TO MNDO96
C     BY USING KEYWORDS IN MOPAC-STYLE: DECIMAL INPUT.
      DATA KEY96X/ 'DMAX  ','DDMIN ','DDMAX ','RMIN  ','RMAX  ',
     1             'OMIN  ','GNORMX','DSTEP ','DECONV','DPCONV',
     2             'DCPHF ','DPREC ','DCDIFF','DSHIFT','DBASCR',
     3             'EPSI  ','RSOLV ','DELSC ','DISEX ','FCUTF ',
     4             'FCUTP ','FCUT1 ','FCUT2 ','FCUTR ','CALPHA',
     5             'CBETA ','GAPCON','V00C  ','V11C  ','V01C  ',
     6             'GAPDYN','DOMEGA'/
C     LEN96X(I) IS THE LENGTH OF THE STRING DEFINING KEY96X(I).
      DATA LEN96X/ 4,5,5,4,4, 4,6,5,6,6, 5,5,6,6,6, 4,5,5,5,5,
     1             5,5,5,5,6, 5,6,4,4,4, 6,6/
C *** KEYMO1(I) CONTAINS MOPAC-TYPE KEYWORDS WITHOUT = ...
C     NO ADDITIONAL NUMERICAL INPUT ASSOCIATED WITH THE KEYWORD.
C     I VALUES UP TO 111 REFER TO KEYWORDS USED IN MOPAC(6.0).
C     I VALUES ABOVE 111 REFER TO KEYWORDS DEFINED LATER.
      DATA (KEYMO1(I),I=1,50) /
     1             'AUTHOR ','VECT   ',' DENS  ','SPIN   ',' DEP   ',
     2             'VELO   ','TIMES  ','PARASOK','FLEPO  ','BONDS  ',
     3             'GEO-OK ','FOCK   ','LARGE  ',' S1978 ',' SI1978',
     4             ' GRAP  ','1ELEC  ',' NOMM  ',' MMOK  ','INTERP ',
     5             ' ESR   ','DFP    ','ANALYT ',' MECI  ','LOCAL  ',
     6             'MULLIK ',' XYZ   ',' PI    ','ECHO   ','SING   ',
     7             'DOUB   ','QUAR   ','QUIN   ','SEXT   ','H-PRIO ',
     8             'X-PRIO ','T-PRIO ','POWSQ  ','POLAR  ','DEBUG  ',
     9             'RESTART','IRC    ','1SCF   ','GRAD   ','UHF    ',
     A             'TRIPLET','SYM    ',' DRC   ','DFORCE ','FORCE  '/
      DATA (KEYMO1(I),I=51,100) /
     1             'MINDO  ','AM1    ','PM3    ','MNDO   ','NOINTER',
     2             'DENOUT ','OLDENS ','ENPART ','NOXYZ  ','SIGMA  ',
     3             'TRANS  ','SADDLE ',' LET   ','COMPFG ','DERIV  ',
     4             'FULSCF ','DCART  ','FMAT   ','HCORE  ','ITER   ',
     5             'PULAY  ','LINMIN ','LOCMIN ','DEBUGPU','CAMP   ',
     6             'KING   ','EIGS   ','MOLDAT ','HYPERF ','OPCI   ',
     7             ' PL    ','SEARCH ','0SCF   ',' EF    ',' TS    ',
     8             ' PRNT6 ','EIGINV ',' NONR  ','ORIDE  ','ESP    ',
     9             'DIPOLE ','DIPX   ','DIPY   ','DIPZ   ','CONNOLL',
     A             'ESPRST ',' POTWRT','WILLIAM','SYMAVG ','STO3G  '/
      DATA (KEYMO1(I),I=101,LMMO1) /
     1             'AIGIN  ','AIGOUT ','AIDER  ','OLDGEO ',' MAX   ',
     2             'NODIIS ',' K=    ','NOLOG  ','NOANCI ','NOTHIEL',
     3             'ISOTOPE','SYBYL  ','OPTFOR ','MNDOC  ','MNDOD  ',
     4             'MNDOH  ','CNDO   ',' GNMIN ',' RSCAL ',' NOUPD ',
     5             'OM1    ','OM2    ','OM3    ',' COSMO ','MNDODH ',
     6             'MOLDEN ','ODM2   ','ODM3   '/
C     LENMO1(I) IS THE LENGTH OF THE STRING DEFINING KEYMO1(I).
      DATA LENMO1/ 6,4,5,4,5, 4,5,7,5,5, 6,4,5,6,7, 5,5,5,5,6,
     1             4,3,6,5,5, 6,4,3,4,4, 4,4,4,4,6, 6,6,5,5,6,
     2             7,4,4,4,3, 7,3,5,6,5, 5,3,3,5,7, 6,6,6,5,5,
     3             6,6,4,6,5, 6,5,4,5,4, 5,6,6,7,4, 4,4,6,6,4,
     4             3,6,4,3,3, 5,6,5,5,4, 6,4,4,4,7, 6,7,7,6,5,
     5             5,6,5,6,5, 6,3,5,6,7, 7,5,6,5,5, 5,4,6,6,6,
     6             3,3,3,6,6, 6,4,4/
C     IN1MO1(I): INDEX J OF OPTION IN1(J) ASSOCIATED WITH KEYMO1(I).
C     IN1MO1(I)=-1: THE KEYWORD KEYMO1(I) IS IGNORED.
C     IN1MO1(I)=-2: THE KEYWORD KEYMO1(I) IS NOT AVAILABLE. STOP.
      DATA IN1MO1/  0,72,72,72,-2, -2,-1,11,38,19, -1,72,-1,11,11,
     1             18,72, 0,20,-2, -2,46,29,-1,-2, 19, 0,-1, 0, 0,
     2             66,66,66,66,-2, -2,-2,-2,22, 0, 37,-2, 3, 3,70,
     3             66,75,-2, 3, 3,  2, 2, 2, 2,-1, 69,67,-2,-1,-2,
     4              0,-2, 0,-1,-1, 56,-1,39,-1,-1,  9,38,38,72,-2,
     5             -2,-1,-1,-2,-1, 72,38,68, 8, 8, 38,-1,85,-1,-2,
     6             -2,-2,-2,-2,-2, -2,-2,-2,-2,-2,  0,-2,-2, 0, 0,
     7             -1,-2,-1,29,51,  0,19, 3, 2, 2,  2, 2,87,86,88,
     8              2, 2, 2,28, 2, 17, 2, 2/
C     INVMO1(I): VALUE FOR OPTION IN1(J) ASSOCIATED WITH KEYMO1(I).
      DATA INVMO1/  0, 0, 1, 1, 0,  0, 0,-1, 1, 2,  0, 2, 0, 4, 4,
     1              1, 2, 0, 1, 0,  0, 1, 1, 0, 0,  2, 0, 0, 0, 0,
     2              2, 4, 5, 6, 0,  0, 0, 0, 1, 0,  1, 0,-1,-2, 1,
     3              3, 1, 0, 5, 5,  1,-2,-7, 0, 0,  1, 1, 0, 0, 0,
     4              0, 0, 0, 0, 0,  1, 0, 1, 0, 0,  1, 1, 1, 2, 0,
     5              0, 0, 0, 0, 0,  2, 1,-1, 1, 1,  1, 0, 1, 0, 0,
     6              0, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0,
     7              0, 0, 0,-1, 1,  0, 1, 3,-1,-10,-3, 2, 1, 1, 1,
     8             -5,-6,-8, 1,-13, 2,-22,-23/
C *** KEYMO2(I) CONTAINS MOPAC-TYPE KEYWORDS WITH = (INTEGER).
C     THERE IS ADDITIONAL INTEGER INPUT ASSOCIATED WITH THE KEYWORD.
C     I VALUES UP TO 15 REFER TO KEYWORDS USED IN MOPAC(6.0).
C     I VALUES ABOVE 15 REFER TO KEYWORDS DEFINED IN THIS LATER.
      DATA KEYMO2/ 'IRC=   ','CHARGE ','MICROS ','TRANS= ','CYCLES ',
     1             'FILL   ','ITRY   ',' ROT   ',' MODE  ',' RECALC',
     2             ' MS=   ',' POINT1',' POINT2',' POINT ','NSURF  ',
     3             ' PRNT= '/
C     LENMO2(I) IS THE LENGTH OF THE STRING DEFINING KEYMO2(I).
      DATA LENMO2/ 4,6,6,6,6, 4,4,4,5,7, 4,7,7,6,5, 6/
C     IN1MO2(I): INDEX J OF OPTION IN1(J) ASSOCIATED WITH KEYMO2(I).
C     IN1MO2(I)=-2: THE KEYWORD KEYMO2(I) IS NOT AVAILABLE. STOP.
      DATA IN1MO2/ -2,65,-2, 0,34, -2,71,76,-2,-2, -2, 0, 0, 0,-2,
     1             38/
C *** KEYMO3(I) CONTAINS MOPAC-TYPE KEYWORDS WITH = (REAL).
C     THERE IS ADDITIONAL REAL INPUT ASSOCIATED WITH THE KEYWORD.
C     I VALUES UP TO 11 REFER TO KEYWORDS USED IN MOPAC(6.0).
C     I VALUES ABOVE 11 REFER TO KEYWORDS DEFINED LATER.
      DATA KEYMO3/ 'DRC=   ','KINETIC','SHIFT  ',' STEP1 ',' STEP2 ',
     1             'BAR    ',' DMAX  ',' STEP  ','SCALE  ','SCINCR ',
     2             'SLOPE  ',' DDMIN=',' DDMAX=',' RMIN= ',' RMAX= ',
     3             ' OMIN= ',' EPS=  '/
C     LENMO3(I) IS THE LENGTH OF THE STRING DEFINING KEYMO3(I).
      DATA LENMO3/ 4,7,5,6,6, 3,5,5,5,6, 5,7,7,6,6, 6,5/
C     IN1MO3(I): INDEX J OF OPTION XN3(J) ASSOCIATED WITH KEYMO3(I).
C     IN1MO3(I)=-2: THE KEYWORD KEYMO3(I) IS NOT AVAILABLE. STOP.
      DATA IN1MO3/ -2,-2,-2, 0, 0, -2, 1, 0,-2,-2, -2, 2, 3, 4, 5,
     1              6,16/
C *** TXTMO1(I) CONTAINS DESCRIPTIVE TEXT ASSOCIATED WITH KEYMO1(I).
      DATA (TXTMO1(I),I=1,10)/
     1  ' *  AUTHOR   - PROGRAM MNDO97 WRITTEN BY W.THIEL',
     2  ' *  VECTORS  - FINAL EIGENVECTORS TO BE PRINTED',
     3  ' *  DENSITY  - FINAL DENSITY MATRIX TO BE PRINTED',
     4  ' *  SPIN     - FINAL UHF SPIN MATRIX TO BE PRINTED',
     5  ' *  DEP      - OUTPUT FORTRAN CODE FOR BLOCK-DATA',
     6  ' *  VELOCITY - INPUT STARTING VELOCITIES FOR DRC',
     7  ' *  TIMES    - TIMES OF VARIOUS STAGES TO BE PRINTED',
     8  ' *  PARASOK  - USE SOME MNDO PARAMETERS IN AM1',
     9  ' *  FLEPO    - PRINT DETAILS OF GEOMETRY OPTIMISATION',
     A  ' *  BONDS    - FINAL BOND-ORDER MATRIX TO BE PRINTED'/
      DATA (TXTMO1(I),I=11,20)/
     1  ' *  GEO-OK   - OVERRIDE INTERATOMIC DISTANCE CHECK',
     2  ' *  FOCK     - LAST FOCK MATRIX TO BE PRINTED',
     3  ' *  LARGE    - EXPANDED OUTPUT TO BE PRINTED',
     4  ' *  S1978    - 1978 SULFUR PARAMETERS TO BE USED',
     5  ' *  SI1978   - 1978 SILICON PARAMETERS TO BE USED',
     6  ' *  GRAPH    - GENERATE FILE FOR GRAPHICS',
     7  ' *  1ELECTRON- FINAL ONE-ELECTRON MATRIX TO BE PRINTED',
     8  ' *  NOMM     - DO NOT MAKE MM CORRECTION TO CONH BARRIER',
     9  ' *  MMOK     - APPLY MM CORRECTION TO CONH BARRIER',
     A  ' *  INTERP   - PRINT DETAILS OF CAMP-KING CONVERGER'/
      DATA (TXTMO1(I),I=21,30)/
     1  ' *  ESR      - RHF SPIN DENSITY CALCULATION REQUESTED',
     2  ' *  DFP      - USE DAVIDON FLETCHER POWELL OPTIMIZER',
     3  ' *  ANALYT   - USE ANALYTIC DERIVATIVES ',
     4  ' *  MECI     - M.E.C.I. WORKING TO BE PRINTED',
     5  ' *  LOCALIZE - LOCALIZED ORBITALS TO BE PRINTED',
     6  ' *  MULLIK   - THE MULLIKEN ANALYSIS TO BE PERFORMED',
     7  ' *  XYZ      - CARTESIAN COORDINATE SYSTEM TO BE USED',
     8  ' *  PI       - PRINT BONDS MATRIX, SIGMA-PI-DELL PARTS',
     9  ' *  ECHO     - ALL INPUT DATA TO BE ECHOED BEFORE RUN',
     A  ' *  SINGLET  - SPIN STATE DEFINED AS A SINGLET'/
      DATA (TXTMO1(I),I=31,40)/
     1  ' *  DOUBLET  - SPIN STATE DEFINED AS A DOUBLET',
     2  ' *  QUARTET  - SPIN STATE DEFINED AS A QUARTET',
     3  ' *  QUINTET  - SPIN STATE DEFINED AS A QUINTET',
     4  ' *  SEXTET   - SPIN STATE DEFINED AS A SEXTET',
     5  ' *  H-PRIOR  - HEAT OF FORMATION TAKES PRIORITY IN DRC',
     6  ' *  X-PRIOR  - GEOMETRY CHANGES TAKE PRIORITY IN DRC',
     7  ' *  T-PRIOR  - TIME TAKES PRIORITY IN DRC',
     8  ' *  POWSQ    - PRINT DETAILS OF WORKING IN POWSQ',
     9  ' *  POLAR    - CALCULATE HYPERPOLARIZABILITIES',
     A  ' *  DEBUG    - DEBUG OPTION TURNED ON'/
      DATA (TXTMO1(I),I=41,50)/
     1  ' *  RESTART  - CALCULATION RESTARTED',
     2  ' *  IRC      - INTRINSIC REACTION COORDINATE CALCULATION',
     3  ' *  1SCF     - DO 1 SCF AND THEN STOP ',
     4  ' *  GRADIENTS- ALL GRADIENTS TO BE PRINTED',
     5  ' *  UHF      - UNRESTRICTED HARTREE-FOCK CALCULATION',
     6  ' *  TRIPLET  - SPIN STATE DEFINED AS A TRIPLET',
     7  ' *  SYMMETRY - SYMMETRY CONDITIONS TO BE IMPOSED',
     8  ' *  DRC      - DYNAMIC REACTION COORDINATE CALCULATION',
     9  ' *  DFORCE   - PRINT HESSIAN MATRIX IN FORCE',
     A  ' *  FORCE    - FORCE CALCULATION SPECIFIED'/
      DATA (TXTMO1(I),I=51,60)/
     1  ' *  MINDO/3  - THE MINDO/3 HAMILTONIAN TO BE USED',
     2  ' *  AM1      - THE AM1 HAMILTONIAN TO BE USED',
     3  ' *  PM3      - THE PM3 HAMILTONIAN TO BE USED',
     4  ' *  MNDO     - THE MNDO HAMILTONIAN TO BE USED',
     5  ' *  NOINTER  - INTERATOMIC DISTANCES NOT TO BE PRINTED',
     6  ' *  DENOUT   - DENSITY MATRIX OUTPUT ON CHANNEL NB11',
     7  ' *  OLDENS   - INITIAL DENSITY MATRIX READ OF DISK',
     8  ' *  ENPART   - ENERGY TO BE PARTITIONED INTO COMPONENTS',
     9  ' *  NOXYZ    - CARTESIAN COORDINATES NOT TO BE PRINTED',
     A  ' *  SIGMA    - GEOMETRY TO BE OPTIMIZED USING SIGMA'/
      DATA (TXTMO1(I),I=61,70)/
     1  ' *  TRANS    - DELETE THE REACTION VIBRATION FROM THERMO',
     2  ' *  SADDLE   - TRANSITION STATE TO BE OPTIMIZED',
     3  ' *  LET      - OVERRIDE SOME SAFETY CHECKS',
     4  ' *  COMPFG   - PRINT HEAT OF FORMATION CALC''D IN COMPFG',
     5  ' *  DERIV    - PRINT PART OF WORKING IN SUB. DERIV',
     6  ' *  FULSCF   - IN SEARCHES, FULL SCF CALCN''S TO BE DONE',
     7  ' *  DCART    - PRINT DETAILS OF WORKING IN DCART',
     8  ' *  FMAT     - PRINT DETAILS OF WORKING IN FMAT',
     9  ' *  HCORE    - PRINT DETAILS OF WORKING IN HCORE',
     A  ' *  ITER     - PRINT DETAILS OF WORKING IN ITER'/
      DATA (TXTMO1(I),I=71,80)/
     1  ' *  PULAY    - PULAY''S METHOD TO BE USED IN SCF',
     2  ' *  LINMIN   - PRINT DETAILS OF LINE MINIMIZATION',
     3  ' *  LOCMIN   - PRINT DETAILS OF LINE MINIMIZATION',
     4  ' *  DEBUGPULAY-PRINT DETAILS OF WORKING IN PULAY',
     5  ' *  CAMP     - THE CAMP-KING CONVERGER TO BE USED',
     6  ' *  KING     - THE CAMP-KING CONVERGER TO BE USED',
     7  ' *  EIGS     - PRINT ALL EIGENVALUES IN ITER',
     8  ' *  MOLDAT   - PRINT DETAILS OF WORKING IN MOLDAT',
     9  ' *  HYPERFINE- PRINT HYPERFINE COUPLING CONSTANTS',
     A  ' *  OPCI     - PRINT DETAILS OF WORKING IN OPCI'/
      DATA (TXTMO1(I),I=81,90)/
     1  ' *  PL       - MONITOR CONVERGENCE IN DENSITY MATRIX',
     2  ' *  SEARCH   - PRINT DETAILS OF LINE MINIMIZATION',
     3  ' *  0SCF     - AFTER READING AND PRINTING DATA, STOP',
     4  ' *  EF       - USE EF ROUTINE FOR MINIMUM SEARCH',
     5  ' *  TS       - USE EF ROUTINE FOR TS SEARCH',
     6  ' *  PRNT6    - EXTRA PRINTING IN EF ROUTINE',
     7  ' *  EIGINV   - USE HESSIAN EIGENVALUE REVERSION IN EF',
     8  ' *  NONR     - DO NOT USE NEWTON-RAPHSON STEP IN EF',
     9  ' *  ORIDE    - ALWAYS USE COMPUTED LAMBDAS IN EF',
     A  ' *  ESP      - ELECTROSTATIC POTENTIAL CALCULATION'/
      DATA (TXTMO1(I),I=91,100)/
     1  ' *  DIPOLE   - FIT THE ESP TO THE CALCULATED DIPOLE',
     2  ' *  DIPX     - X COMPONENT OF DIPOLE TO BE FIT',
     3  ' *  DIPY     - Y COMPONENT OF DIPOLE TO BE FIT',
     4  ' *  DIPZ     - Z COMPONENT OF DIPOLE TO BE FIT',
     5  ' *  CONNOLLY - USE CONNOLLY SURFACE',
     6  ' *  ESPRST   - RESTART OF ELECTRIC POTENTIAL CALCULATION',
     7  ' *  POTWRT   - SAVE ELECTRIC POTENTIAL DATA ON FILE 21',
     8  ' *  WILLIAMS - USE WILLIAMS SURFACE',
     9  ' *  SYMAVG   - AVERAGE SYMMETRY EQUIVALENT ESP CHARGES',
     A  ' *  STO3G    - DEORTHOGONALIZE ORBITALS IN STO-3G BASIS'/
      DATA (TXTMO1(I),I=101,110)/
     1  ' *  AIGIN    - GEOMETRY MUST BE IN GAUSSIAN FORMAT',
     2  ' *  AIGOUT   - IN ARC FILE, INCLUDE AB-INITIO GEOMETRY',
     3  ' *  AIDER    - READ IN AB INITIO DERIVATIVES',
     4  ' *  OLDGEO   - PREVIOUS GEOMETRY TO BE USED',
     5  ' *  MAX      - GRID SIZE 23*23 ',
     6  ' *  NODIIS   - DO NOT USE GDIIS GEOMETRY OPTIMIZER',
     7  ' *  K=       - BRILLOUIN ZONE STRUCTURE TO BE CALCULATED',
     8  ' *  NOLOG    - SUPPRESS LOG FILE TRAIL, WHERE POSSIBLE',
     9  ' *  NOANCI   - DO NOT USE ANALYTICAL C.I. DERIVATIVES',
     A  ' *  NOTHIEL  - DO NOT USE FSTMIN LINE SEARCH'/
      DATA (TXTMO1(I),I=111,120)/
     1  ' *  ISOTOPE  - FORCE MATRIX WRITTEN TO DISK (FILE 4)',
     2  ' *  SYBYL    - A SYBYL OUTPUT FILE NB16 IS GENERATED',
     3  ' *  OPTFOR   - OPTIMIZATION AND FORCE CALCULATION',
     4  ' *  MNDOC    - THE MNDOC HAMILTONIAN TO BE USED',
     5  ' *  MNDOD    - THE MNDOD HAMILTONIAN TO BE USED',
     6  ' *  MNDOH    - THE MNDOH HAMILTONIAN TO BE USED',
     7  ' *  CNDO     - THE CNDO/2 HAMILTONIAN TO BE USED',
     8  ' *  GNMIN    - SPECIAL OPTION FOR EF ROUTINE',
     9  ' *  RSCAL    - SPECIAL OPTION FOR EF ROUTINE',
     A  ' *  NOUPD    - SPECIAL OPTION FOR EF ROUTINE'/
      DATA (TXTMO1(I),I=121,LMMO1)/
     1  ' *  OM1      - THE OM1 HAMILTONIAN TO BE USED',
     2  ' *  OM2      - THE OM2 HAMILTONIAN TO BE USED',
     3  ' *  OM3      - THE OM3 HAMILTONIAN TO BE USED',
     4  ' *  COSMO    - COSMO SOLVATION TREATMENT',
     5  ' *  MNDODH   - COMBINED MNDOD/MNDOH HAMILTONIAN',
     6  ' *  MOLDEN   - A MOLDEN OUTPUT FILE IS GENERATED',
     7  ' *  ODM2     - THE ODM2 HAMILTONIAN TO BE USED',
     8  ' *  ODM3     - THE ODM3 HAMILTONIAN TO BE USED'/
C *** TXTMO2(I) CONTAINS DESCRIPTIVE TEXT ASSOCIATED WITH KEYMO2(I).
      DATA TXTMO2/
     1  ' *  IRC=N    - INTRINSIC REACTION COORDINATE:        ',
     2  ' *  CHARGE   - MOLECULAR CHARGE, INPUT VALUE:        ',
     3  ' *  MICROS=N - NUMBER OF MICROSTATES FOR C.I.:       ',
     4  ' *  TRANS=   - DELETE N VIBRATIONS FROM THERMO:      ',
     5  ' *  CYCLES=  - MAXIMUM NUMBER OF CYCLES IN NLLSQ:    ',
     6  ' *  FILL=    - CLOSED-SHELL RHF, OCCUPY ORBITAL:     ',
     7  ' *  ITRY=    - MAXIMUM NUMBER OF SCF ITERATIONS:     ',
     8  ' *  ROT      - SYMMETRY NUMBER FOR THERMODYNAMICS:   ',
     9  ' *  MODE=    - TS FOLLOWING ALONG HESSIAN MODE:      ',
     A  ' *  RECALC=  - CYCLES BETWEEN HESSIAN RECALCULATION: ',
     B  ' *  MS=      - MAGNETIC COMPONENT OF SPIN IN MECI:   ',
     C  ' *  POINT1   - NUMBER OF ROWS IN GRID CALCULATION:   ',
     D  ' *  POINT2   - NUMBER OF COLUMNS IN GRID CALCULATION:',
     E  ' *  POINT    - NUMBER OF POINTS IN PATH CALCULATION: ',
     F  ' *  NSURF    - NUMBER OF LAYERS IN ESP CALCULATION:  ',
     G  ' *  PRNT=    - PRINTING FLAG FOR EF ROUTINES:        '/
C *** TXTMO3(I) CONTAINS DESCRIPTIVE TEXT ASSOCIATED WITH KEYMO3(I).
      DATA (TXTMO3(I),I=1,10)/
     1  ' *  DRC=     - HALF-LIFE (IN FS) FOR KIN ENERGY LOSS:',
     2  ' *  KINETIC= - KIN ENERGY (KCAL/MOL) ADDED TO DRC:   ',
     3  ' *  SHIFT    - USE A DAMPING FACTOR OF               ',
     4  ' *  STEP1    - FIRST  STEP SIZE IN GRID CALCULATION: ',
     5  ' *  STEP2    - SECOND STEP SIZE IN GRID CALCULATION: ',
     6  ' *  BAR=     - REDUCE BAR LENGTH BY A MAXIMUM OF:    ',
     7  ' *  DMAX=    - MAXIMUM STEP SIZE (ANG/RAD) FOR EF:   ',
     8  ' *  STEP     - STEP SIZE IN PATH CALCULATION:        ',
     9  ' *  SCALE    - SCALE VAN-DER-WAALS RADIUS IN ESP BY: ',
     A  ' *  SCINCR   - INCREMENT BETWEEN LAYERS IN ESP:      '/
      DATA (TXTMO3(I),I=11,LMMO3)/
     1  ' *  SLOPE    - SCALE FACTOR FOR MNDO ESP CHARGES:    ',
     2  ' *  DDMIN=   - INPUT FOR DDMIN VARIABLE IN EF:       ',
     3  ' *  DDMAX=   - INPUT FOR DDMAX VARIABLE IN EF:       ',
     4  ' *  RMIN=    - INPUT FOR RMIN VARIABLE IN EF:        ',
     5  ' *  RMAX=    - INPUT FOR RMAX VARIABLE IN EF:        ',
     6  ' *  OMIN=    - INPUT FOR OMIN VARIABLE IN EF:        ',
     7  ' *  EPS=     - DIELECTRICITY CONSTANT IN COSMO:      '/
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** PRINT AVAILABLE KEYWORDS (IF REQUESTED) AND RETURN.
      IF(KEYMOD.EQ.1) THEN
         CALL KEYDOC (LM96,LM96X,LMMO1,LMMO2,LMMO3,KEY96,KEY96X,
     1     KEYMO1,KEYMO2,KEYMO3,LEN96,LEN96X,LENMO1,LENMO2,LENMO3,
     2     TXTMO1,TXTMO2,TXTMO3,IN1MO1,IN1MO2,IN1MO3,INVMO1)
         RETURN
      ENDIF
C *** GENERATE A NEW KEYWORD STRING (IF REQUESTED) AND RETURN.
      IF(KEYMOD.EQ.2) THEN
         CALL KEYWRT (KEYWRD,IMOPAC,KEY96,LEN96,LM96)
         RETURN
      ENDIF
C *** INITIALIZE ALL OPTIONS TO ZERO.
      IF(KEYMOD.GE.3) THEN
         IN1(1:LM96)  = 0
         XN3(1:LM96X) = 0.0D0
         RETURN
      ENDIF
C *** INITIALIZATION OF LOCAL VARIABLES.
      KSTOP  = 0
      MOPINP = 0
      ALLKEY = KEYWRD
      LKEY   = LEN(KEYWRD)
C *** INITIALIZATION OF ARGUMENT VARIABLE.
      IF(KEYMOD.LT.0) THEN
         IMOPAC = 1
         GO TO 40
      ENDIF
C *** INITIALIZATION OF INPUT OPTIONS.
      DO 10 I=1,LM96
      IN1(I) = 0
      NN1(I) = 0
      NP1(I) = 0
   10 CONTINUE
      KMO    = 0
      LMO    = 0
      NC     = 0
      LROOT  = 0
      DO 15 I=1,LM96X
      XN3(I) = 0.0D0
   15 CONTINUE
C *** CHECK FOR KEYWORDS EQUIVALENT TO STANDARD INPUT.
C     INPUT FOR INTEGER DATA.
      IN1INP = 0
      DO 20 I=1,LM96
      L      = LEN96(I)
      IF(MYWORD(ALLKEY(:LKEY),KEY96(I)(:L))) THEN
         IN1INP = IN1INP+1
         IN1(I) = NINT(READA(KEYWRD,INDEX(KEYWRD,KEY96(I)(:L)),1))
         NN1(I) = NN1(I)+1
         NP1(IN1INP) = I
      ENDIF
   20 CONTINUE
C     PRINTING SECTION FOR INTEGER INPUT.
      IF(IN1INP.GT.0) THEN
         WRITE(NB6,400)
         IN1ROW = (IN1INP+4)/5
         DO 25 I=1,IN1ROW
         J1     = 1+(I-1)*5
         J2     = MIN(I*5,IN1INP)
         WRITE(NB6,410) (KEY96(NP1(J)),IN1(NP1(J)),J=J1,J2)
   25    CONTINUE
         WRITE(NB6,420)
      ENDIF
C     INPUT FOR DECIMAL DATA.
      IN3INP = 0
      DO 30 I=1,LM96X
      L      = LEN96X(I)
      IF(MYWORD(ALLKEY(:LKEY),KEY96X(I)(:L))) THEN
         IN3INP = IN3INP+1
         XN3(I) = READA(KEYWRD,INDEX(KEYWRD,KEY96X(I)(:L)),1)
         NP1(IN3INP) = I
      ENDIF
   30 CONTINUE
C     PRINTING SECTION FOR DECIMAL INPUT.
      IF(IN3INP.GT.0) THEN
         IN3ROW = (IN3INP+4)/5
         DO 35 I=1,IN3ROW
         J1     = 1+(I-1)*5
         J2     = MIN(I*5,IN3INP)
         WRITE(NB6,415) (KEY96X(NP1(J)),XN3(NP1(J)),J=J1,J2)
   35    CONTINUE
         WRITE(NB6,420)
      ENDIF
C     PRINT HEADER.
      WRITE(NB6,430)
      WRITE(NB6,440)
C *** REMOVE SPECIAL KEYWORDS FROM MOPAC(6.0).
   40 CONTINUE
      IF(MYWORD(ALLKEY(160:),' SETUP')) MOPINP=MOPINP+1
      IF(MYWORD(ALLKEY(:LKEY),'MOPAC')) MOPINP=MOPINP+1
      IF(MYWORD(ALLKEY(:LKEY),' &')) I=2
      IF(MYWORD(ALLKEY(:LKEY),' +')) I=3
      IF(KEYMOD.LT.0 .AND. MOPINP.GT.0) RETURN
C *** CHECK ALL REMAINING MOPAC-TYPE KEYWORDS.
C     BASED ON THE DEFINITIONS AND CONVENTIONS OF MOPAC(6.0).
C *** LOOP OVER MOPAC-TYPE KEYWORDS WITHOUT NUMERICAL INPUT.
      DO 45 I=1,LMMO1
      L      = LENMO1(I)
      IF(MYWORD(ALLKEY(:LKEY),KEYMO1(I)(:L))) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         WRITE(NB6,500) TXTMO1(I)
         J      = IN1MO1(I)
         IF(J.GT.0) THEN
             IN1(J) = INVMO1(I)
             NN1(J) = NN1(J)+1
         ELSE IF(J.EQ.-1) THEN
             WRITE(NB6,950)
         ELSE IF(J.EQ.-2) THEN
             WRITE(NB6,960)
             KSTOP = KSTOP+1
         ENDIF
      ENDIF
   45 CONTINUE
C *** LOOP OVER MOPAC-TYPE KEYWORDS WITH INTEGER INPUT.
      DO 50 I=1,LMMO2
      L      = LENMO2(I)
      IF(MYWORD(ALLKEY(:LKEY),KEYMO2(I)(:L))) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         II     = NINT(READA(KEYWRD,INDEX(KEYWRD,KEYMO2(I)(:L)),0))
         WRITE(NB6,510) TXTMO2(I),II
         J      = IN1MO2(I)
         IF(J.GT.0) THEN
             IN1(J) = II
             NN1(J) = NN1(J)+1
         ELSE IF(J.EQ.-1) THEN
             WRITE(NB6,950)
         ELSE IF(J.EQ.-2) THEN
             WRITE(NB6,960)
             KSTOP = KSTOP+1
         ENDIF
      ENDIF
   50 CONTINUE
C *** LOOP OVER MOPAC-TYPE KEYWORDS WITH REAL INPUT.
      DO 60 I=1,LMMO3
      L      = LENMO3(I)
      IF(MYWORD(ALLKEY(:LKEY),KEYMO3(I)(:L))) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         XX     = READA(KEYWRD,INDEX(KEYWRD,KEYMO3(I)(:L)),0)
         WRITE(NB6,520) TXTMO3(I),XX
         J      = IN1MO3(I)
         IF(J.GT.0) THEN
             XN3(J) = XX
         ELSE IF(J.EQ.-1) THEN
             WRITE(NB6,950)
         ELSE IF(J.EQ.-2) THEN
             WRITE(NB6,960)
             KSTOP = KSTOP+1
         ENDIF
      ENDIF
   60 CONTINUE
C *** DEFINE OPTIONS WHICH IMPLICITLY DEPEND ON SOME KEYWORDS.
      IF(IN1(19).EQ.2) IN1(72)=2
      IF(IN1(66).GE.4) IN1(70)=1
      IF(INDEX(KEYWRD,' TS'   ).NE.0) IN1( 3)=1
      IF(INDEX(KEYWRD,'MNDOC' ).NE.0) IN1(77)=2
      IF(INDEX(KEYWRD,'DFORCE').NE.0) IN1(40)=1
      TRIP   = IN1(66).EQ.3
      UHF    = IN1(70).EQ.1
C     PRINT SOME COMMENTS.
      IF(INDEX(KEYWRD,'POWSQ'  ).NE.0) WRITE(NB6,530)
      IF(INDEX(KEYWRD,'SIGMA'  ).NE.0) WRITE(NB6,540)
      IF(INDEX(KEYWRD,'TRANS ' ).NE.0) WRITE(NB6,550)
      IF(INDEX(KEYWRD,' XYZ'   ).NE.0) WRITE(NB6,560)
      IF(INDEX(KEYWRD,'ISOTOPE').NE.0) WRITE(NB6,570)
      IF(IN1(66).GE.4) WRITE(NB6,580)
C *** CHECK FOR SPECIAL MOPAC-TYPE KEYWORDS.
C     THIS SECTION COVERS MOPAC OPTIONS WHICH ARE TOO COMPLEX
C     TO BE TRANSLATED INTO THE OPTIONS OF THIS PROGRAM BY
C     THE GENERAL CODE ABOVE. LIST OF THESE OPTIONS (17):
C     EXTERNAL, DEPVAR, BIRAD, EXCI, OPEN(, T=, DUMP, C.I.,
C     SCFCRT, NLLSQ, ROOT, PREC, GNORM, THERMO, IUPD, HESS,
C     SETUP.
      IF (MYWORD(ALLKEY(:LKEY),' EXTE') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         I=INDEX(KEYWRD,' EXTE')
         J=INDEX(KEYWRD(I:),'=')+I
         I=INDEX(KEYWRD(J:),' ')+J-1
         WRITE(NB6,600) KEYWRD(J:I)
         IN1(11) = 1
      ENDIF
      IF (MYWORD(ALLKEY(:LKEY),' DEPVAR') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         DEPFAC = READA(KEYWRD,INDEX(KEYWRD,'DEPVAR'),0)
         WRITE(NB6,610) DEPFAC
      ENDIF
C     CPE SETUP (TJG 06/17/04).
      IF (MYWORD(ALLKEY(:LKEY),'FLCPE') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NFLCPE = NINT(READA(KEYWRD,INDEX(KEYWRD,'FLCPE'),1))
         WRITE(6,613) NFLCPE
      END IF
      IF (MYWORD(ALLKEY(:LKEY),'PTCPE') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NPTCPE = NINT(READA(KEYWRD,INDEX(KEYWRD,'PTCPE'),1))
         WRITE(6,614) NPTCPE
      END IF
      IF (MYWORD(ALLKEY(:LKEY),'CPEZ') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NCPEZ = NINT(READA(KEYWRD,INDEX(KEYWRD,'CPEZ'),1))
         WRITE(6,615) NCPEZ
      END IF
      IF (MYWORD(ALLKEY(:LKEY),'FLPQD') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NFLPQD = NINT(READA(KEYWRD,INDEX(KEYWRD,'FLPQD'),1))
         WRITE(6,616) NFLPQD
      END IF
      IF (MYWORD(ALLKEY(:LKEY),'PTPQD') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NPTPQD = NINT(READA(KEYWRD,INDEX(KEYWRD,'PTPQD'),1))
         WRITE(6,617) NPTPQD
      END IF
C     USE/READ PAIRWISE DISTANCE DEPENDENT GAUSSIANS (TJG 06/23/05).
      IF (MYWORD(ALLKEY(:LKEY),'PDDG') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NPDDG = NINT(READA(KEYWRD,INDEX(KEYWRD,'PDDG'),1))
         WRITE(6,618) NPDDG
      END IF
C     USE/READ PAIRWISE BETA PARAMETERS (TJG 06/23/05).
      IF (MYWORD(ALLKEY(:LKEY),'PBETA') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NPBETA = NINT(READA(KEYWRD,INDEX(KEYWRD,'PBETA'),1))
         WRITE(6,619) NPBETA
      END IF
      IF (MYWORD(ALLKEY(:LKEY),'DIP0') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NDIP0 = NINT(READA(KEYWRD,INDEX(KEYWRD,'DIP0'),1))
         WRITE(6,621) NDIP0
      END IF
      IF (MYWORD(ALLKEY(:LKEY),'PALP') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NPALP = NINT(READA(KEYWRD,INDEX(KEYWRD,'PALP'),1))
         WRITE(6,622) NPALP
      END IF
C     "SIMPLE" DISPERSION, AS OPPOSED TO PELLENQ DISPERSION (TJG 06/29/05).
      IF (MYWORD(ALLKEY(:LKEY),'FLSD') ) THEN
         IF(KEYMOD.LT.0) RETURN
         NFLSD = NINT(READA(KEYWRD,INDEX(KEYWRD,'FLSD'),1))
         WRITE(6,623) NFLSD
      END IF
C     OPTIONS FOR SPECIAL WAVEFUNCTIONS.
      BIRAD  = MYWORD(ALLKEY(:LKEY),'BIRAD')
      IF(BIRAD) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         WRITE(NB6,620)
         IN1(66) = 1
         IN1(77) = 1
      ENDIF
      EXCI   = MYWORD(ALLKEY(:LKEY),'EXCITED')
      IF(EXCI) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         WRITE(NB6,630)
         IN1(66) = 1
         IN1(77) = 1
         LROOT   = 2
      ENDIF
      IF(MYWORD(ALLKEY(:LKEY),'OPEN(')) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         I      = INDEX(KEYWRD,'OPEN(')
         IELEC  = NINT(READA(KEYWRD,I,0))
         ILEVEL = NINT(READA(KEYWRD,I+7,0))
         WRITE(NB6,640) IELEC,ILEVEL
         IF(IELEC.EQ.ILEVEL .AND. IELEC.GE.0 .AND. IELEC.LE.2) THEN
            IN1(70) = -1
            IF(IELEC.EQ.1) IN1(66)=2
            IF(IELEC.EQ.2 .AND. IN1(66).EQ.0) IN1(66)=1
         ELSE
            WRITE(NB6,960)
            KSTOP = KSTOP+1
         ENDIF
      ENDIF
C     OPTION FOR TIME LIMIT.
      IF(MYWORD(ALLKEY(:LKEY),' T=')) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         I      = INDEX(KEYWRD,' T=')
         TLIMIT = READA(KEYWRD,I,0)
         DO 110 J=I+3,241
            IF( KEYWRD(J+1:J+1).EQ.' ') THEN
               IF(KEYWRD(J:J).EQ.'M') TLIMIT=TLIMIT*60.0D0
               IF(KEYWRD(J:J).EQ.'H') TLIMIT=TLIMIT*3600.0D0
               IF(KEYWRD(J:J).EQ.'D') TLIMIT=TLIMIT*86400.0D0
               GO TO 120
            ENDIF
  110    CONTINUE
  120    CONTINUE
         IN1(1) = INT(TLIMIT)
         IF(TLIMIT.LT.99999.9D0) THEN
            WRITE(NB6,650) TLIMIT
         ELSE
            WRITE(NB6,660) TLIMIT
         ENDIF
      ENDIF
C     OPTION FOR RESTART FILE.
      IF(MYWORD(ALLKEY(:LKEY),' DUMP')) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         TDUMP  = READA(KEYWRD,INDEX(KEYWRD,' DUMP'),0)
         DO 130 J=I+6,241
            IF( KEYWRD(J+1:J+1).EQ.' ') THEN
               IF(KEYWRD(J:J).EQ.'M') TDUMP=TDUMP*60.0D0
               IF(KEYWRD(J:J).EQ.'H') TDUMP=TDUMP*3600.0D0
               IF(KEYWRD(J:J).EQ.'D') TDUMP=TDUMP*86400.0D0
               GO TO 140
            ENDIF
  130    CONTINUE
  140    CONTINUE
         IF(TDUMP.LT.99999.9D0)THEN
            WRITE(NB6,670) TDUMP
         ELSE
            WRITE(NB6,680) TDUMP
         ENDIF
         WRITE(NB6,950)
      ENDIF
C     KEYWORD CI HAS CHANGED FROM MOPAC(5.0) TO MOPAC(6.0).
      CI = MYWORD(ALLKEY(:LKEY),'C.I.')
      IF(CI) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         J      = INDEX(KEYWRD,'C.I.=(')
         IF(J.NE.0) THEN
            NCI = NINT(READA(KEYWRD,INDEX(KEYWRD,'C.I.=(')+5,0))
            MCI = NINT(READA(KEYWRD,INDEX(KEYWRD,'C.I.=(')+7,0))
            WRITE(NB6,700) MCI,NCI
         ELSE
            NCI = NINT(READA(KEYWRD,INDEX(KEYWRD,'C.I.=')+5,0))
            MCI = 0
            WRITE(NB6,690) NCI
         ENDIF
         IF(J.NE.0 .OR. NCI.NE.2) THEN
            WRITE(NB6,710)
            KSTOP = KSTOP+1
         ELSE
            IN1(77) = 1
         ENDIF
      ENDIF
      IF (MYWORD(ALLKEY(:LKEY),'ROOT') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         LROOT  = NINT(READA(KEYWRD,INDEX(KEYWRD,'ROOT'),0))
         WRITE(NB6,720) LROOT
         IF(LROOT.GT.3) THEN
            WRITE(NB6,710)
            KSTOP = KSTOP+1
         ENDIF
      ENDIF
C     OPTION FOR SCF CONVERGENCE.
      IF (MYWORD(ALLKEY(:LKEY),'SCFCRT') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         SCFCRT = READA(KEYWRD,INDEX(KEYWRD,'SCFCRT'),0)
         PLTEST = 0.05D0*SQRT(SCFCRT)
         IN1(35)=-NINT(LOG10(SCFCRT))
         IN1(36)=-NINT(LOG10(PLTEST))
         WRITE(NB6,730) SCFCRT
         WRITE(NB6,731) PLTEST
         WRITE(NB6,732) IN1(35),IN1(36)
      ENDIF
C     OPTIONS FOR OPTIMIZATIONS.
      IF (MYWORD(ALLKEY(:LKEY),'NLLSQ') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         WRITE(NB6,750)
         IF(IN1(3).LT.1) THEN
            IN1(3) = 1
            NN1(3) = NN1(3)+1
         ELSE IF(IN1(3).EQ.3) THEN
            IN1(3) = 4
         ELSE IF(IN1(3).EQ.5) THEN
            IN1(3) = 6
         ENDIF
      ENDIF
      IF (MYWORD(ALLKEY(:LKEY),'PREC') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         WRITE(NB6,760)
         IN1(43) = -100
         IF(IN1(3).EQ.1 .OR. IN1(3).EQ.4 .OR. IN1(3).EQ.6) THEN
            TOLEND(1) = 1.0D-12
            TOLEND(2) = 1.0D-12
            TOLEND(3) = 0.2D0
         ELSE
            TOLEND(1) = 0.00001D0
            TOLEND(2) = 0.00004D0
            TOLEND(3) = 0.01D0
            TOLEND(4) = 0.00001D0
         ENDIF
         XN3(7) = 0.05D0
      ENDIF
C     NEW DEFAULT VALUE FOR GNORM IN MOPAC(6.0).
      IF (MYWORD(ALLKEY(:LKEY),'GNORM') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         GNORMI = READA(KEYWRD,INDEX(KEYWRD,'GNORM'),0)
         WRITE(NB6,770) GNORMI
         GNORM0 = 0.01D0
         IF(INDEX(KEYWRD,'LET').EQ.0 .AND. GNORMI.LT.GNORM0) THEN
            GNORMI = GNORM0
            WRITE(NB6,780) GNORMI
         ENDIF
         IF(GNORMI.GT.0.0D0) THEN
            IN1(43) = -10
            IF(IN1(3).EQ.1 .OR. IN1(3).EQ.4 .OR. IN1(3).EQ.6) THEN
               TOLEND(1) = 1.0D-12
               TOLEND(2) = 1.0D-12
               TOLEND(3) = GNORMI
            ELSE
               TOLEND(1) = 0.0D0
               TOLEND(2) = 0.0D0
               TOLEND(3) = GNORMI
               TOLEND(4) = 0.0D0
               IN1(44)   = 3
            ENDIF
         ELSE
            WRITE(NB6,950)
         ENDIF
         XN3(7) = GNORMI
      ENDIF
C     OPTION FOR THERMODYNAMICS.
      IF (MYWORD(ALLKEY(:LKEY),'THERMO') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         WRITE(NB6,790)
         IN1(40)=1
         I=INDEX(KEYWRD,'THERMO(')
         IF(I.NE.0) THEN
            TMPKEY = KEYWRD
            TMPKEY(:I) = ' '
            TMPKEY(INDEX(TMPKEY,')'):) = ' '
            NTEMP1 = NINT(READA(KEYWRD,I,0))
            IF(NTEMP1.LT.100) THEN
               NTEMP1 = 100
               WRITE(NB6,800) NTEMP1
            ENDIF
            J=INDEX(TMPKEY,',')
            IF(J.NE.0) THEN
               TMPKEY(J:J) = ' '
               NTEMP3 = NINT(READA(TMPKEY,J,0))
               IF(NTEMP3.LT.NTEMP1) THEN
                  NTEMP  = 21
                  NTEMP2 = 10
               ELSE IF(NTEMP3.EQ.NTEMP1) THEN
                  NTEMP  =  1
                  NTEMP2 = 10
               ELSE
                  K      = INDEX(TMPKEY,',')
                  IF(K.NE.0) THEN
                     TMPKEY(K:K) = ' '
                     NTEMP2 = NINT(READA(TMPKEY,K,0))
                     IF(NTEMP2.LT.1) THEN
                        NTEMP2 = 1
                        WRITE(NB6,810) NTEMP2
                     ENDIF
                  ELSE
                     NTEMP2 = (NTEMP3-NTEMP1)/20
                     IF(NTEMP2.EQ.0) NTEMP2=1
                     IF(NTEMP2.GE. 2 .AND. NTEMP2.LT.  5) NTEMP2=2
                     IF(NTEMP2.GE. 5 .AND. NTEMP2.LT. 10) NTEMP2=5
                     IF(NTEMP2.GE.10 .AND. NTEMP2.LT. 20) NTEMP2=10
                     IF(NTEMP2.GE.20 .AND. NTEMP2.LT. 50) NTEMP2=20
                     IF(NTEMP2.GE.50 .AND. NTEMP2.LT.100) NTEMP2=50
                     IF(NTEMP2.GE.100) NTEMP2=100
                  ENDIF
                  NTEMP  = 1+(NTEMP3-NTEMP1)/NTEMP2
                  IF(NTEMP.GT.25) THEN
                     NTEMP  = 25
                     WRITE(NB6,820) NTEMP
                  ENDIF
               ENDIF
               NTEMP4 = NTEMP1+(NTEMP-1)*NTEMP2
               IF(NTEMP3.NE.NTEMP4) THEN
                  NTEMP3 = NTEMP4
                  WRITE(NB6,830) NTEMP3
               ENDIF
            ELSE
               NTEMP  = 21
               NTEMP2 = 10
               NTEMP3 = NTEMP1+200
            ENDIF
            IF(NTEMP.GT.1) WRITE(NB6,840) NTEMP1,NTEMP3
            IN1(62) = NTEMP
            IN1(63) = NTEMP1
            IN1(64) = NTEMP2
         ENDIF
      ENDIF
C     NEW SPECIAL KEYWORDS FROM MOPAC(6.0) IN THIS SECTION.
C     KEYWORDS FOR EIGENVECTOR FOLLOWING.
      IF(MYWORD(ALLKEY(:LKEY),'IUPD')) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         II=NINT(READA(KEYWRD,INDEX(KEYWRD,'IUPD='),0))
         IF(II.EQ.0) WRITE(NB6,850)
         IF(II.EQ.1) WRITE(NB6,860)
         IF(II.EQ.2) WRITE(NB6,870)
         IN1(82) = II
      ENDIF
      IF(MYWORD(ALLKEY(:LKEY),'HESS')) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         II=NINT(READA(KEYWRD,INDEX(KEYWRD,'HESS='),0))
         IF(II.EQ.0) WRITE(NB6,880)
         IF(II.EQ.1) WRITE(NB6,890)
         IF(II.EQ.2) WRITE(NB6,900)
         IF(II.EQ.3) WRITE(NB6,910)
         IF(II.EQ.4) WRITE(NB6,911)
         IF(II.EQ.5) WRITE(NB6,912)
         IN1(83) = II
      ENDIF
      IF(MYWORD(ALLKEY(:162),' SETUP') ) THEN
         IF(KEYMOD.LT.0) RETURN
         MOPINP = MOPINP+1
         WRITE(NB6,920)
      ENDIF
C *** CHECK FOR REDEFINITION OF IMOPAC.
      IF(MOPINP.EQ.0) THEN
         IMOPAC = -1
      ENDIF
      IF(KEYMOD.LT.0) RETURN
C *** PRINT NUMBER OF KEYWORDS ENCOUNTERED.
      IF(IN1INP.GT.0 .AND. MOPINP.EQ.0) THEN
         WRITE(NB6,450) IN1INP
      ELSE IF(IN1INP.EQ.0 .AND. MOPINP.EQ.0) THEN
         WRITE(NB6,460)
         IMOPAC = 1
      ELSE IF(IN1INP.GT.0 .AND. MOPINP.GT.0) THEN
         WRITE(NB6,470) IN1INP,MOPINP
      ENDIF
      WRITE(NB6,430)
C *** CHECK FOR INPUT ERRORS.
      IF(UHF) THEN
         IF(BIRAD .OR. EXCI .OR. CI) THEN
            WRITE(NB6,'(//,'' UHF USED WITH BIRAD, EXCITED OR C.I.'')')
            WRITE(NB6,970)
            STOP 'KEYDEF'
         ENDIF
      ELSE
         IF(EXCI .AND. TRIP) THEN
            WRITE(NB6,'(//,'' EXCITED USED WITH TRIPLET'')')
            WRITE(NB6,970)
            STOP 'KEYDEF'
         ENDIF
      ENDIF
      IF(NN1(2).GT.1) THEN
         WRITE(NB6,'(//,'' ONLY ONE CHOICE OF HAMILTONIAN ALLOWED'')')
         WRITE(NB6,970)
         STOP 'KEYDEF'
      ENDIF
      IF(IMOPAC.EQ.1) THEN
         I = INDEX(KEYWRD,' GRAD')
         NN1GEO = NN1(3)+NN1(8)
         IF(NN1GEO.GT.2 .OR. NN1(8).GT.1 .OR.
     1     (NN1(3).GT.1 .AND. I.EQ.0)) THEN
            WRITE(NB6,980)
            STOP 'KEYDEF'
         ENDIF
         IF(INDEX(KEYWRD,' LET').GT.0) THEN
            IF(INDEX(KEYWRD,'FORCE').GT.0) IN1(3)=2
         ENDIF
      ENDIF
      IF(INDEX(KEYWRD,'MULLIK').NE.0 .AND. UHF) THEN
         WRITE(NB6,'(A)')' MULLIKEN POPULATION NOT AVAILABLE WITH UHF'
         STOP 'KEYDEF'
      ENDIF
C *** CHECK FOR AN UNRECOGNIZED KEYWORD.
C *** FIND IT AND THEN ABANDON THE RUN.
      IF(ALLKEY.NE.' ') THEN
         J=0
         DO 150 I=1,LKEY-1
            IF(ALLKEY(I:I).NE.' '.OR.ALLKEY(I:I+1).NE.'  ') THEN
               J=J+1
               ALLKEY(J:J)=ALLKEY(I:I)
            ENDIF
  150    CONTINUE
         IF(ALLKEY(LKEY:LKEY).NE.' ') THEN
            J=J+1
            ALLKEY(J:J)=ALLKEY(LKEY:LKEY)
         ENDIF
         J=MAX(1,J)
         IF(INDEX(KEYWRD,'EOFILE').NE.0) THEN
            KEYMOD =-8
         ELSE IF(INDEX(KEYWRD,'DEBUG').NE.0) THEN
            WRITE(NB6,'('' *  DEBUG KEYWORDS USED:  '',A)')ALLKEY(:J)
         ELSE
            WRITE(NB6,'(///,'' UNRECOGNIZED KEY-WORDS: ('',A,'')'')')
     1            ALLKEY(:J)
            WRITE(NB6,'(///,'' CALCULATION STOPPED.'')')
            STOP 'KEYDEF'
         ENDIF
      ENDIF
C *** CHECK FOR KEYWORDS WHICH ARE NOT AVAILABLE IN THIS PROGRAM.
C     FOR MOPAC(5.0) WITH A SINGLE DATA SET  - STOP AT THIS POINT.
C     FOR MOPAC(6.0) WITH MULTIPLE DATA SETS - CONTINUE WITH NEXT SET.
      IF(KSTOP.GT.0) THEN
         WRITE(NB6,990) KSTOP
         KEYMOD =-9
      ENDIF
      RETURN
  400 FORMAT(//1X,'***** STANDARD INPUT USING KEYWORDS *****',/)
  410 FORMAT(  1X,4(A,' =',I5,5X),A,' =',I5)
  415 FORMAT(  1X,4(A,' =',F8.4,2X),A,' =',F8.4)
  420 FORMAT(/ 1X)
  430 FORMAT(  1X,71('*'))
  440 FORMAT(' * INPUT OF OPTIONS VIA KEYWORDS')
  450 FORMAT(' * NUMBER OF MNDO97 KEYWORDS FOUND:',I3,/,
     1       ' * MOPAC KEYWORDS NOT FOUND: IMOPAC=-1')
  460 FORMAT(' * NO MNDO97 OR MOPAC KEYWORDS FOUND',/,
     1       ' * MOPAC-TYPE INPUT ASSUMED: IMOPAC=1')
  470 FORMAT(' * NUMBER OF MNDO97 KEYWORDS FOUND:',I3,/,
     1       ' * NUMBER OF MOPAC  KEYWORDS FOUND:',I3)
  500 FORMAT(A)
  510 FORMAT(A,I5)
  520 FORMAT(A,F10.5)
  530 FORMAT(' *  POWSQ    - COMMENT: PLEASE USE KEYWORD NLLSQ')
  540 FORMAT(' *  SIGMA    - COMMENT: PLEASE USE KEYWORD NLLSQ')
  550 FORMAT(' *  TRANS    - COMMENT: KEYWORD EQUIVALENT TO DEFAULT',/,
     1       ' *  TRANS    - THERMO INCLUDES ONLY GENUINE VIBRATIONS')
  560 FORMAT(' *  XYZ      - COMMENT: THIS MAY NOT BE EFFICIENT.',/,
     1       ' *  XYZ      - INPUT IN INTERNAL COORDINATES AND',/,
     2       ' *  XYZ      - OPTIMIZATION IN CARTESIAN COORDINATES.',/,
     3       ' *  XYZ      - ALL COORDINATES ARE OPTIMIZED (3*N).')
  570 FORMAT(' *  ISOTOPE  - COMMENT: KEYWORD EQUIVALENT TO DEFAULT')
  580 FORMAT(' *  QUARTET  - COMMENT: UHF FOR MULTIPLICITY.GT.3',/,
     1       ' *  ... ETC  - RHF CALCULATION IMPOSSIBLE PRESENTLY')
  600 FORMAT(' *  EXTERNAL - USE ATOMIC PARAMETERS FROM FILE',/15X,A)
  610 FORMAT(' *  DEPVAR=N - FACTOR FOR BOND LENGTH IS',F7.4)
  613 FORMAT(' *  FLCPE=N  - FLAG FOR CPE CORRECTION IS',I5)
  614 FORMAT(' *  PTCPE=N  - FLAG FOR CPE VERBOSE PRINTING IS',I5)
  615 FORMAT(' *  CPEZ=N   - FLAG FOR Q INDEPENDENT CPE ZETA IS',I5)
  616 FORMAT(' *  FLPQD=N  - FLAG FOR PELLENQ DISP.',I5)
  617 FORMAT(' *  PTPQD=N  - FLAG FOR PELLENQ DISP. VERBOSE PRINT',I5)
  618 FORMAT(' *  PDDG=N   - FLAG FOR PAIRWISE CORE-CORE',I5)
  619 FORMAT(' *  PBETA=N  - FLAG FOR PAIRWISE BETA',I5)
  621 FORMAT(' *  DIP0=N   - FLAG FOR DIPOLE ORIGIN',I5)
  622 FORMAT(' *  PALP=N   - FLAG FOR PAIRWISE ALPHA CORE-CORE',I5)
  623 FORMAT(' *  FLDS=N   - FLAG FOR SIMPLE DISPERSION',I5)
  620 FORMAT(' *  BIRADICAL- SYSTEM HAS TWO UNPAIRED ELECTRONS')
  630 FORMAT(' *  EXCITED  - FIRST EXCITED STATE IS TO BE OPTIMIZED')
  640 FORMAT(' *  OPEN(N,N)- THERE ARE',I2,' ELECTRONS IN',I2,' LEVELS')
  650 FORMAT(' *  T=       - A TIME OF',F8.1,' SECONDS REQUESTED')
  660 FORMAT(' *  T=       - A TIME OF',G11.3,' SECONDS REQUESTED')
  670 FORMAT(' *  DUMP=N   - RESTART FILE WRITTEN EVERY',F8.1,' SEC')
  680 FORMAT(' *  DUMP=N   - RESTART FILE WRITTEN EVERY',G11.3,' SEC')
  690 FORMAT(' *  C.I.=N   -',I2,' M.O.S TO BE USED IN C.I.')
  700 FORMAT(' * C.I.=(N,M)-',I2,' DOUBLY FILLED LEVELS USED IN A ',/,
     1       ' *             C.I. INVOLVING ',I2,' M.O.''S')
  710 FORMAT(' *           - ONLY MINIMAL CI IN THIS PROGRAM - STOP')
  720 FORMAT(' *  ROOT     - C.I. ROOT TO BE OPTIMIZED:',I2)
  730 FORMAT(' *  SCFCRT   - DEFAULT SCF CRITERION REPLACED BY',G12.3)
  731 FORMAT(' *           - DEFAULT DENSITY CRITERION SET TO ',G12.3)
  732 FORMAT(' *           - CONTROL VARIABLES ISCF=',I2,', IPLSCF=',I2)
  750 FORMAT(' *  NLLSQ    - GRADIENTS TO BE MINIMIZED USING NLLSQ.')
  760 FORMAT(' *  PRECISE  - CRITERIA TO BE INCREASED BY 100 TIMES')
  770 FORMAT(' *  GNORM=   - EXIT WHEN GRADIENT NORM DROPS BELOW ',G8.3)
  780 FORMAT(' *           - GNORM IS RESET TO ITS DEFAULT VALUE ',G8.3)
  790 FORMAT(' *  THERMO   - THERMODYNAMIC QUANTITIES TO BE CALCULATED')
  800 FORMAT(' *           - MINIMUM TEMPERATURE RESET TO',I4,' K')
  810 FORMAT(' *           - TEMPERATURE INCREMENT RESET TO',I4,' K')
  820 FORMAT(' *           - NUMBER OF TEMPERATURES LIMITED TO',I4)
  830 FORMAT(' *           - MAXIMUM TEMPERATURE RESET TO',I4,' K')
  840 FORMAT(' *           - TEMPERATURES BETWEEN',I4,' AND',I4,' K')
  850 FORMAT(' *  IUPD=    - HESSIAN WILL NOT BE UPDATED')
  860 FORMAT(' *  IUPD=    - HESSIAN WILL BE UPDATED USING POWELL')
  870 FORMAT(' *  IUPD=    - HESSIAN WILL BE UPDATED USING BFGS')
  880 FORMAT(' *  HESS=    - DIAGONAL HESSIAN AS INITIAL GUESS FOR EF')
  890 FORMAT(' *  HESS=    - INITIAL HESSIAN FOR EF WILL BE CALCULATED')
  900 FORMAT(' *  HESS=    - INITIAL HESSIAN FOR EF READ FROM DISK')
  910 FORMAT(' *  HESS=    - INITIAL HESSIAN FOR EF CALC NUMERICALLY')
  911 FORMAT(' *  HESS=    - DIAGONAL HESSIAN FOR EF CALC NUMERICALLY')
  912 FORMAT(' *  HESS=    - UNIT HESSIAN USED AS INITIAL GUESS FOR EF')
  920 FORMAT(' *  SETUP    - EXTRA KEYWORDS TO BE READ FROM FILE SETUP')
  950 FORMAT(' *           - KEYWORD NOT AVAILABLE    *** IGNORED ***')
  960 FORMAT(' *           - KEYWORD NOT AVAILABLE    *** STOP ***')
  970 FORMAT(//,' IMPOSSIBLE OPTION REQUESTED',
     1       //,' CALCULATION ABANDONED, SORRY.')
  980 FORMAT(//,' MORE THAN ONE GEOMETRY OPTION SPECIFIED',
     1       / ,' CONFLICT MUST BE RESOLVED BEFORE JOB WILL RUN')
  990 FORMAT(   ' NUMBER OF KEYWORDS NOT AVAILABLE IN THIS PROGRAM',I5,
     1       / ,' SEE OUTPUT ABOVE FOR DETAILS. STOP.',//)
      END
