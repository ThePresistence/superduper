      SUBROUTINE FORMD (EIGVAL,FX,U,LMH,NVAR,DMAX,TS,LRSCAL,LNONR,
     1                  IPRINT,MODE)
C     *
C     THIS ROUTINE DEFINES THE SEARCH DIRECTION VECTOR (D) FOR UPDATING
C     THE GEOMETRY USING EITHER THE NEWTON-RAPHSON, THE P-RFO, OR THE
C     QA ALGORITHM. CONDITION: THE STEP SIZE MUST BE LESS THAN DMAX.
C     *
C     REFERENCES:
C     (1) J.SIMONS, P.JORGENSEN, H.TAYLOR, AND J.OZMENT, J.PHYS.CHEM.
C         87, 2745 (1983).
C     (2) A.BANERJEE, N.ADAMS, J.SIMONS, AND R.SHEPARD, J.PHYS.CHEM.
C         89, 52 (1985).
C     (3) J.BAKER, J.COMPUT.CHEM. 7, 385 (1986).
C     (4) J.NICHOLS, H.TAYLOR, P.SCHMIDT, AND J.SIMONS, J.CHEM.PHYS.
C         92, 340 (1990).
C     (5) P.CULOT, G.DIVE, V.H.NGUYEN, AND J.M.GHUYSEN, THEOR.CHIM.ACTA
C         82, 189 (1992).
C     *
      USE LIMIT, ONLY: LMV
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DOUBLE PRECISION LAMDA,LAMDA0
      LOGICAL TS,RSCAL,FRODO1,FRODO2,DONR
      LOGICAL PRT,PRTDEB
      COMMON
     ./CONSTN/ ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
     ./FLPOCM/ GRAD(LMV),D(LMV),ALPHA,FIP1
     ./NBFILE/ NBF(20)
     ./OPTEF / OLDG(LMV),VMODE(LMV),DD
      DIMENSION EIGVAL(NVAR),FX(NVAR),U(LMH,LMH)
C     TOLL    CONVERGENCE CRITERION IN ITERATIVE CALCULATION OF LAMDA
C     STEP    INITIAL STEP SIZE (SSTEP) IN LAMDA SEARCH
C     BIG     USED TO DEFINE AN UPPER LIMIT (SSMAX) IN LAMDA SEARCH
C     EPS     USED TO DEFINE A  LOWER LIMIT (SSMIN) IN LAMDA SEARCH
C     TEN     USED TO DEFINE A  LOWER LIMIT (SSMIN) IN LAMDA SEARCH
C     SFIX    USED TO DEFINE A FIXED LAMDA VALUE IF SEARCH FAILS
C     TMTWO   LIMIT BELOW WHICH EIGENVALUES ARE CONSIDERED TO BE ZERO
C     TMSIX   TOLERANCE IN COMPARISON OF STEP SIZES (DD,DMAX)
      DATA TOLL /1.0D-08/, BIG  /1.0D+03/
      DATA STEP /5.0D-02/, TEN  /1.0D+01/
      DATA TMTWO/1.0D-02/, TMSIX/1.0D-06/
      DATA SFIX /1.0D+01/, EPS  /1.0D-12/
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** INITIALIZATION.
      RSCAL  = LRSCAL.EQ.1
      DONR   = LNONR.NE.1
      PRT    = IPRINT.GE.1
      PRTDEB = IPRINT.GE.5
      SKAL   = ONE
      LAMDA  = ZERO
      LAMDA0 = ZERO
      ILAMDA = 0
C *** SELECT EIGENVECTOR TO BE FOLLOWED (IT).
C     SELECT OTHER EIGENVECTOR WITH LOWEST EIGENVALUE (JT).
      IT     = 0
      JT     = 1
      IF(TS) THEN
         IT  = MODE
         IF(IT.EQ.1) JT=2
         EIGIT  = EIGVAL(IT)
      ENDIF
C     EONE IS THE LOWEST EIGENVALUE OF A MODE THAT IS NOT FOLLOWED.
C     EONE CORRESPONDS TO BMIN IN CHAPTER 4 OF REF 5.
      EONE   = EIGVAL(JT)
C *** DEFINE OPTIONS FOR LAMDA SEARCH.
      SSMIN  = MAX(ABS(EONE)*EPS,(TEN*EPS))
      SSMAX  = MAX(BIG,ABS(EONE))
      SSMAX  = SSMAX*BIG
      SSTOLL = TOLL
      D2MAX  = DMAX*DMAX
C     *
C *** BRANCH FOR PURE NEWTON-RAPHSON STEP.
C     THIS IS EFFECTIVELY THE DEFAULT CHOICE FOR A PROPER HESSIAN.
      IF(TS.AND. EIGIT.LT.ZERO .AND. EONE.GE.ZERO .AND. DONR) THEN
         IF(PRTDEB) WRITE(NB6,500)
         IF(PRT) WRITE(NB6,520) LAMDA
         ILAMDA = 1
         GO TO 200
      ELSE IF(.NOT.TS .AND. EONE.GE.ZERO .AND. DONR) THEN
         IF(PRTDEB) WRITE(NB6,510)
         IF(PRT) WRITE(NB6,520) LAMDA
         ILAMDA = 1
         GO TO 200
      ENDIF
C     *
C *** P-RFO EVALUATION OF LAMDA0 AND LAMDA FOR TS SEARCH,
C     AND RFO EVALUATION OF LAMDA=LAMDA0 FOR MINIMUM SEARCH.
C     *
C     DETERMINE LAMDA0 FOR FOLLOWING THE TS MODE TOWARDS MAXIMUM.
C     P-RFO STEP, SEE REF 3, FORMULA FOR LAMDAP IN CHAPTER II.3.
   10 IF(TS) THEN
         LAMDA0 = EIGVAL(IT)+SQRT(EIGVAL(IT)**2+FOUR*FX(IT)**2)
         LAMDA0 = LAMDA0*PT5
         IF(PRT) WRITE(NB6,530) LAMDA0
      ENDIF
C     SOLVE ITERATIVELY FOR LAMDA.
C     DETERMINE LAMDA FOR FOLLOWING ALL OTHER MODES TOWARDS MINIMUM.
C     - SEE REF 3, ITERATIVE SOLUTION TO EQ 8 (SUM OVER ALL I.NE.IT).
C     - NOTE THAT THIS DIFFERS FROM THE ORIGINAL ALGORITHM OF REF 3
C     - WHERE LAMDA IS DETERMINED FROM THE HIGHEST EIGENVALUE (NO SUM).
C     THE INITIAL GUESS FOR LAMDA IS NORMALLY ZERO.
C     - EXCEPTION: IF THERE IS MORE THAN ONE NEGATIVE EIGENVALUE, THE
C     - INITIAL GUESS FOR LAMDA SHOULD BE LESS THAN EONE (SEE ABOVE).
C     START BY BRACKETING ROOT, THEN SEARCH BY BRUTE FORCE BISECT.
      SSTEP  = STEP
      IF(EONE.LE.ZERO) LAMDA=EONE-SSTEP
      IF(EONE.GT.ZERO) SSTEP=EONE
      FRODO1 = .FALSE.
      FRODO2 = .FALSE.
      BL = LAMDA - SSTEP
      BU = LAMDA + SSTEP*PT5
   20 FL = ZERO
      FU = ZERO
      DO 30 I=1,NVAR
      IF(I.EQ.IT) GO TO 30
      FL = FL + (FX(I)*FX(I))/(BL-EIGVAL(I))
      FU = FU + (FX(I)*FX(I))/(BU-EIGVAL(I))
   30 CONTINUE
      FL = FL - BL
      FU = FU - BU
      IF(FL*FU.LT.ZERO) GO TO 40
      BL = BL - (EONE-BL)
      BU = BU + PT5*(EONE-BU)
      IF(BL.LE.-SSMAX) THEN
         BL = -SSMAX
         FRODO1 = .TRUE.
      ENDIF
      IF(ABS(EONE-BU).LE.SSMIN) THEN
         BU = EONE-SSMIN
         FRODO2 = .TRUE.
      ENDIF
      IF(FRODO1.AND.FRODO2) THEN
         WRITE(NB6,540) EONE,BL,BU,FL,FU
         WRITE(NB6,550)
         GO TO 80
      ENDIF
      GO TO 20
C     AT THIS POINT THE FIRST ITERATIVE PROCEDURE HAS CONVERGED.
C     LAMDA IS THE ARITHMETIC MEAN OF THE LOWER AND UPPER BRACKET.
C     SUBSEQUENTLY THERE IS ANOTHER ITERATIVE CYLE TO MAKE SURE
C     THAT THE LAMDA VALUES FROM SUCCESSIVE ITERATIONS CONVERGE.
   40 CONTINUE
      NCNT   = 0
      XLAMDA = ZERO
   50 CONTINUE
      FL = ZERO
      FU = ZERO
      FM = ZERO
      LAMDA = PT5*(BL+BU)
      DO 60 I=1,NVAR
      IF(I.EQ.IT) GO TO 60
      FL = FL + (FX(I)*FX(I))/(BL-EIGVAL(I))
      FU = FU + (FX(I)*FX(I))/(BU-EIGVAL(I))
      FM = FM + (FX(I)*FX(I))/(LAMDA-EIGVAL(I))
   60 CONTINUE
      FL = FL - BL
      FU = FU - BU
      FM = FM - LAMDA
      IF(ABS(XLAMDA-LAMDA).LT.SSTOLL) GO TO 70
      NCNT = NCNT + 1
      IF(NCNT.GT.1000) THEN
         WRITE(NB6,560) BL,BU,LAMDA,FL,FU
         STOP 'FORMD'
      ENDIF
      XLAMDA = LAMDA
      IF(FM*FU.LT.ZERO) BL = LAMDA
      IF(FM*FL.LT.ZERO) BU = LAMDA
      GO TO 50
C     CONVERGED P-RFO LAMDA VALUE AVAILABLE AT THIS POINT.
   70 CONTINUE
      IF(PRT) WRITE(NB6,570) LAMDA
      ILAMDA = 2
      GO TO 200
C     *
C *** QA ALGORITHM FOR THE DETERMINATION OF LAMDA.
C     *
C     THIS SECTION OF THE CODE IS ONLY REACHED IN TWO CASES:
C     - THE ITERATIVE SEARCH FOR LAMDA (SEE ABOVE) HAS FAILED.
C     - THE STEP IS TOO LARGE, AND SCALING HAS NOT BEEN REQUESTED.
C     THE CODE BELOW THEN ATTEMPTS ANOTHER DETERMINATION OF LAMDA
C     FOLLOWING THE PROPOSAL IN REF 5, CHAPTER 4.4 (THIRD EQUATION).
C     THE QA ALGORITHM EMPLOYS THE CONSTRAINT LAMDA0=-LAMDA.
C     NOTE THAT SCALING IS SWITCHED ON AT THE END OF THIS SECTION.
C     HENCE, THE QA ALGORITHM WILL LEAD TO THE DEFINITION OF SOME
C     SEARCH DIRECTION VECTOR (D) AT THE END OF THIS ROUTINE.
   80 LAMDA  = ZERO
      FRODO1 = .FALSE.
      FRODO2 = .FALSE.
      SSTEP  = STEP
      IF(EONE.LE.ZERO) LAMDA=EONE-SSTEP
      IF(TS .AND. -EIGIT.LT.EONE) LAMDA=-EIGIT-SSTEP
      IF(EONE.GT.ZERO) SSTEP=EONE
      BL = LAMDA - SSTEP
      BU = LAMDA + SSTEP*PT5
   90 FL = ZERO
      FU = ZERO
      DO 100 I=1,NVAR
      IF(I.EQ.IT) GO TO 100
      FL = FL + (FX(I)/(BL-EIGVAL(I)))**2
      FU = FU + (FX(I)/(BU-EIGVAL(I)))**2
  100 CONTINUE
      IF(TS) THEN
         FL = FL + (FX(IT)/(BL+EIGVAL(IT)))**2
         FU = FU + (FX(IT)/(BU+EIGVAL(IT)))**2
      ENDIF
      FL = FL - D2MAX
      FU = FU - D2MAX
      IF(FL*FU.LT.ZERO) GO TO 110
      BL = BL - (EONE-BL)
      BU = BU + PT5*(EONE-BU)
      IF(BL.LE.-SSMAX) THEN
         BL     = -SSMAX
         FRODO1 = .TRUE.
      ENDIF
      IF(ABS(EONE-BU).LE.SSMIN) THEN
         BU = EONE-SSMIN
         FRODO2 = .TRUE.
      ENDIF
      IF(FRODO1.AND.FRODO2) THEN
         WRITE(NB6,540) EONE,BL,BU,FL,FU
         WRITE(NB6,550)
C        BOTH LAMDA SEARCHES FAILED, GO FOR FIXED LEVEL SHIFTED NR.
C        THIS IS UNLIKELY TO PRODUCE ANYTHING USEFUL, BUT WE TRY.
         LAMDA  = EONE-SFIX
         IF(TS) LAMDA0 = EIGIT+SFIX
         RSCAL  = .TRUE.
         ILAMDA = 4
         IF(PRT) WRITE(NB6,580) LAMDA,LAMDA0
         GO TO 200
      ENDIF
      GO TO 90
  110 CONTINUE
      NCNT   = 0
      XLAMDA = ZERO
  120 CONTINUE
      FL = ZERO
      FU = ZERO
      FM = ZERO
      LAMDA = PT5*(BL+BU)
      DO 130 I=1,NVAR
      IF(I.EQ.IT) GO TO 130
      FL = FL + (FX(I)/(BL-EIGVAL(I)))**2
      FU = FU + (FX(I)/(BU-EIGVAL(I)))**2
      FM = FM + (FX(I)/(LAMDA-EIGVAL(I)))**2
  130 CONTINUE
      IF(TS) THEN
         FL = FL + (FX(IT)/(BL+EIGVAL(IT)))**2
         FU = FU + (FX(IT)/(BU+EIGVAL(IT)))**2
         FM = FM + (FX(IT)/(LAMDA+EIGVAL(IT)))**2
      ENDIF
      FL = FL - D2MAX
      FU = FU - D2MAX
      FM = FM - D2MAX
      IF(ABS(XLAMDA-LAMDA).LT.SSTOLL) GO TO 140
      NCNT = NCNT + 1
      IF(NCNT.GT.1000) THEN
         WRITE(NB6,560) BL,BU,LAMDA,FL,FU
         STOP 'FORMD'
      ENDIF
      XLAMDA = LAMDA
      IF(FM*FU.LT.ZERO) BL = LAMDA
      IF(FM*FL.LT.ZERO) BU = LAMDA
      GO TO 120
C     CONVERGED QA LAMDA VALUE AVAILABLE AT THIS POINT.
  140 CONTINUE
      LAMDA0 = -LAMDA
      RSCAL  = .TRUE.
      ILAMDA = 3
      IF(PRT) WRITE(NB6,590) LAMDA
C     *
C *** CALCULATE THE SEARCH DIRECTION VECTOR (D).
C     SEE REF 1, EQ.(5); REF 2, EQ.6; REF 3, CH.II.3; REF 5, CH.4.4.
C     *
  200 CONTINUE
      DO 210 I=1,NVAR
      D(I) = ZERO
  210 CONTINUE
      DO 230 I=1,NVAR
      IF(I.EQ.IT) THEN
         TEMP = FX(IT)/(LAMDA0-EIGVAL(IT))
      ELSE IF(LAMDA.EQ.ZERO .AND. ABS(EIGVAL(I)).LT.TMTWO) THEN
         TEMP = ZERO
      ELSE
         TEMP = FX(I)/(LAMDA-EIGVAL(I))
      ENDIF
      DO 220 J=1,NVAR
      D(J) = D(J)+TEMP*U(J,I)
  220 CONTINUE
  230 CONTINUE
C *** COMPUTE AND CHECK THE STEP SIZE (DD).
      DD = SQRT(DDOT(NVAR,D,1,D,1))
      IF(PRT) THEN
         IF(ILAMDA.EQ.1) WRITE(NB6,600) DD
         IF(ILAMDA.EQ.2) WRITE(NB6,610) DD
         IF(ILAMDA.EQ.3) WRITE(NB6,620) DD
         IF(ILAMDA.EQ.4) WRITE(NB6,630) DD
      ENDIF
      IF(DD.LT.(DMAX+TMSIX)) THEN
C        XLAMD  = LAMDA
C        XLAMD0 = LAMDA0
         RETURN
      ENDIF
C *** TRY P-RFO STEP IF PURE NEWTON-RAPHSON STEP IS TOO LARGE.
      IF(ILAMDA.EQ.1) GO TO 10
C *** SCALE THE SEARCH DIRECTION VECTOR (IF REQUESTED AND REQUIRED).
      IF(RSCAL) THEN
         SKAL   = DMAX/DD
         DO 240 I=1,NVAR
         D(I)   = D(I)*SKAL
  240    CONTINUE
         DD     = SQRT(DDOT(NVAR,D,1,D,1))
C        XLAMD  = LAMDA
C        XLAMD0 = LAMDA0
         IF(PRT) WRITE(NB6,640) SKAL
         RETURN
      ENDIF
C *** TRY QA STEP IF P-RFO STEP IS TOO LARGE.
      IF(ILAMDA.EQ.2) GO TO 80
      RETURN
  500 FORMAT( 1X,'TS SEARCH, NEWTON-RAPHSON STEP')
  510 FORMAT( 1X,'MIN SEARCH, NEWTON-RAPHSON STEP')
  520 FORMAT( 1X,'LAMBDA FOR NR STEP     = ',E11.4)
  530 FORMAT( 1X,'LAMBDA TOWARDS MAXIMUM = ',E11.4)
  540 FORMAT( 1X,'NUMERICAL PROBLEMS IN BRACKETING LAMBDA',5F9.3)
  550 FORMAT( 1X,'GOING FOR FIXED STEP SIZE....')
  560 FORMAT( 1X,'TOO MANY ITERATIONS IN LAMBDA BISECT',5F9.3)
  570 FORMAT( 1X,'LAMBDA TOWARDS MINIMUM = ',E11.4)
  580 FORMAT( 1X,'LAMBDA ESTIMATE (MIN)  = ',E11.4,
     1       /1X,'LAMBDA ESTIMATE (MAX)  = ',E11.4)
  590 FORMAT( 1X,'LAMBDA FOR QA STEP     = ',E11.4)
  600 FORMAT( 1X,'PURE NR STEP SIZE      = ',E11.4)
  610 FORMAT( 1X,'P-RFO STEP SIZE        = ',E11.4)
  620 FORMAT( 1X,'QA STEP SIZE           = ',E11.4)
  630 FORMAT( 1X,'ESTIMATED STEP SIZE    = ',E11.4)
  640 FORMAT( 1X,'SCALE FACTOR FOR STEP  = ',E11.4)
      END
