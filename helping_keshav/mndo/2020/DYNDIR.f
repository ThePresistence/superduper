      SUBROUTINE DYNDIR (LEN,LFA,LM5X,LM5R)
C     *
C     DYNAMIC MEMORY ALLOCATION FOR DIRECT SCF CALCULATION.
C     *
C     NOTATION.
C     LEN  = AVAILABLE LENGTH OF BLANK COMMON AREA (INPUT VALUE,
C            NOT MODIFIED IN THIS ROUTINE).
C     LFA  = LAST ADDRESS OF BLANK COMMON AREA THAT HAS PREVIOUSLY
C            BEEN RESERVED (INPUT VALUE, NOT MODIFIED IN THIS ROUTINE).
C     LM5X = LAST ADDRESS OF BLANK COMMON AREA THAT IS ACTUALLY USED
C            BY THE ARRAYS DEFINED PRESENTLY (DETERMINED HERE).
C     LM5R = LAST ADDRESS OF BLANK COMMON AREA THAT NEEDS TO REMAIN
C            RESERVED LATER ON (DETERMINED IN THIS ROUTINE).
C     *
      USE LIMIT, ONLY: LM1
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL NODIAG
      LOGICAL UHF
      COMMON
     ./ATOMS / NUMAT,NAT(LM1),NFIRST(LM1),NLAST(LM1)
     ./FLAG4 / INTSUM
     ./INOPT2/ IN2(300)
     ./LIMITS/ LM2,LM3,LM4,LM6,LM7,LM8,LM9
     ./LMSCF / LS1,LS2,LS3,LS4,LS5,LS6,LS7,LS8,LS9
     ./LMUHF / LU1,LU2,LU3,LU4,LU5,LU6,LU7,LU8
     ./NBFILE/ NBF(20)
     ./ORBITS/ NUMB,NORBS,NMOS,NALPHA,NBETA
     ./UHF   / UHF
C     *
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** INPUT OPTIONS.
      IOP    = IN2(2)
      JPRINT = IN2(42)
      LINDMS = IN2(56)
      LINDIA = IN2(57)
      IFAST  = IN2(73)
      IDIAG  = IN2(74)
      NSTART = IN2(78)
      IMOCC  = ABS(IN2(70))
      INOUT  = IN2(212)
      INOUT1 = INOUT
C *** INITIALIZATION.
      L22    = LM2*NORBS
      NODIAG = LINDMS.GT.0 .AND. LINDIA.EQ.0
C     *
C *** DEFINE INDEX ARRAY.
C *** DEFINE NUMBER OF TWO-CENTER TWO-ELECTRON INTEGRALS.
      INTTOT = LM6*LM6
      INTSUM = 0
      DO 40 I=2,NUMAT
      ITEMP  = NLAST(I)-NFIRST(I)+1
      IW     = (ITEMP*(ITEMP+1))/2
      DO 30 J=1,I-1
      JTEMP  = NLAST(J)-NFIRST(J)+1
      JW     = (JTEMP*(JTEMP+1))/2
      INTSUM = INTSUM+IW*JW
   30 CONTINUE
   40 CONTINUE
      IF(IOP.GT.0) INTSUM=(NUMAT*(NUMAT+1))/2
C *** DEFINE BUFFER FOR TWO-ELECTRON INTEGRALS.
C     NO SUCH BUFFER IN INTEGRAL-DIRECT METHODS.
      LM9    = 0
C     *
C *** COMPUTE LENGTH OF GENERAL BUFFER FOR SCF CALCULATION.
C     USED ONLY BY SUBROUTINE SCFCAL IN CALLS TO ITER,VERTEX,GRAPH,CIS.
C     THESE ROUTINES EMPLOY THE BUFFER FOR INTERMEDIATE ARRAYS IN:
C     - STANDARD DIAGONALIZATION (EVVRSP,TDIAG,TQL2,TRED2,DSPEV,DSPEVX,
C       DSYEV,DSYEVX: UP TO 8*LM2 WORDS),
C     - DIVIDE-AND-CONQUER DIAGONALIZATION (DSPEVD,DSYEVD: UP TO
C       3*LM2*LM2 + 2*LM2*LG(LM2) + 5*LM2 + 1 WORDS).
C     - PSEUDODIAGONALIZATION (DIAG: UP TO LM2*NUMB (RHF) OR UP TO
C       LM2*NALPHA (UHF) WORDS),
C     - FOCK MATRIX GENERATION (HFOCKP: 2*LM6 WORDS),
C     - CALCULATION OF A TWO-ELECTRON MO INTEGRAL (SPCW: LM6 WORDS,
C       CALLED FROM ITER,VERTEX,GRAPH,CIS,HECOR), POSSIBLY COMBINED
C       WITH STORAGE OF MO EIGENVALUES (ITER: LM2+LM6 WORDS, SEE CALLS
C       TO DCOPY/HECOR/DCOPY).
C     - MULLIKEN POPULATION ANALYSIS (GRAPH,MULLIK: 2*LM2+NUMAT WORDS).
C     - COMPUTATION OF S**(-1/2) MATRIX, DIAGONALIZATION STEP (GRAPH,
C       SMHALF,TDIAG: 2*LM2 WORDS).
C     THE CODE DETERMINES THE MAXIMUM LENGTH ACTUALLY REQUIRED.
      IF(NODIAG) THEN
         LWORK = 0
      ELSE
         CALL DYNDIA (IDIAG,NORBS,LWORK,LIWORK)
      ENDIF
      IF(IFAST.GT.1 .OR. LINDMS.GT.0) THEN
         LDIAG = 0
      ELSE
         IF(UHF) THEN
            LDIAG = LM2*NALPHA
         ELSE
            LDIAG = LM2*NUMB
         ENDIF
      ENDIF
      LD     = MAX(LDIAG,LWORK)
      LD     = MAX(LD,2*LM6)
      LD     = MAX(LD,LM2+LM2+NUMAT)
C *** COMPUTE LENGTH OF BUFFER FOR IN-CORE SCF CALCULATION.
C     MAXIMUM MEMORY REQUIREMENTS FOR UHF AND RHF.
      IF(UHF) THEN
         LSA = 9*L22+2*LM2+LD
      ELSE
         LSA = 5*L22+LM2+LD
      ENDIF
      LSA1   = LSA
C     REDUCED MEMORY REQUIREMENTS DUE TO INPUT (INOUT,NSTART).
C     INOUT .LT.0: CORE HAMILTONIAN MATRIX COMPUTED ON-THE-FLY.
C     NSTART.LT.0: DIFFERENCE DENSITY MATRIX NOT USED.
C     IF(INOUT.LT.0) THEN
C        LSA1  = LSA1-L22
C     ENDIF
      IF(NSTART.LT.0) THEN
         LSA1  = LSA1-L22
         IF(UHF) LSA1=LSA1-L22
      ENDIF
C     *
C *** CHECK MEMORY FOR SCF CALCULATION.
      LFA1   = LFA
      LFIT   = 0
      LM5X   = LFA1+LSA1+LM9
      LMASCF = LM5X
      IF(LM5X.LE.LEN) GO TO 100
C     REDUCE BUFFER FOR SCF TREATMENT (H COMPUTED ON-THE-FLY).
C     IF(INOUT.GE.0) THEN
C        INOUT  =-1
C        LFIT   = 1
C        LSA1   = LSA1-L22
C        LM5X   = LFA1+LSA1+LM9
C        IF(LM5X.LE.LEN) GO TO 100
C     ENDIF
C     REDUCE BUFFER FOR SCF TREATMENT IN CASE OF USING SLOW
C     DIAGONALIZATION ROUTINES BY COMPUTING THE MINIMUM NUMBER
C     OF MOLECULAR ORBITALS.
      IF(IFAST.EQ.2 .AND. IMOCC.LE.2 .AND. LINDMS.EQ.0) THEN
         LM3   = NMOS
         LDEL5 = LM2*(NORBS-NMOS)
         LSA1  = LSA1-LDEL5
         IF(UHF) LSA1=LSA1-LDEL5
         LM5X  = LFA1+LSA1+LM9
         IF(LM5X.LE.LEN) GO TO 100
      ENDIF
C     *
C *** ERROR EXIT.
      WRITE(NB6,900)
      WRITE(NB6,910) LEN,LM5X,LMASCF
      STOP 'DYNDIR'
C     *
C *** ASSIGN ADDRESSES FOR SCF CALCULATION.
C     THE SCF ARRAYS START AT THE FOLLOWING ADDRESSES.
C     RHF: C  LS1, E  LS2, Q LS3, D  LS5, F  LS6, H LS7, P  LS8, W LS9.
C     UHF: CA LS1, EA LS2, Q LS3, DA LS5, FA LS6, H LS7, PA LS8, W LS9.
C     UHF: CB LU1, EB LU2, Q LS3, DB LU5, FB LU6, H LS7, PB LU8, W LU9.
C     THE ORDER OF THE ARRAYS IN MEMORY IS INDICATED BY COMMENTS BELOW.
  100 CONTINUE
      L23    = LM2*LM3
C *** RHF: P(L22),C(L23),E(LM2),F(L22),H(LM4),D(LM4),Q(LD),W(LM9).
      LS8    = LFA1+1
      LS1    = LS8+L22
      LS2    = LS1+L23
      LS6    = LS2+LM2
      LS7    = LS6+L22
C     CHECK WHETHER ARRAY H IS STORED.
C     IF(INOUT.GE.0) THEN
         LS5 = LS7+L22
C     ELSE
C        LS5 = LS7
C     ENDIF
C     CHECK WHETHER ARRAY D IS STORED.
      IF(NSTART.GE.0) THEN
         LS3 = LS5+L22
      ELSE
         LS3 = LS5
      ENDIF
C *** UHF: PA(L22),PB(L22),CA(L23),CB(L23),EA(LM2),EB(LM2),
C     UHF: FA(L22),FB(L22),H(L22),DA(L22),DB(L22),Q(LD),W(LM9).
      IF(UHF) THEN
         LS8 = LFA1+1
         LU8 = LS8+L22
         LS1 = LU8+L22
         LU1 = LS1+L23
         LS2 = LU8+L23
         LU2 = LS2+LM2
         LS6 = LU2+LM2
         LU6 = LS6+L22
         LS7 = LU6+L22
C        CHECK WHETHER ARRAY H IS STORED.
C        IF(INOUT.GE.0) THEN
            LS5 = LU6+L22
C        ELSE
C           LS5 = LU6
C        ENDIF
C        CHECK WHETHER ARRAYS DA,DB ARE STORED.
         IF(NSTART.GE.0) THEN
            LU5 = LS5+L22
            LS3 = LU5+L22
         ELSE
            LU5 = LS5
            LS3 = LS5
         ENDIF
         LU3 = LS3+LM6
      ELSE
         LU1 = LS1
         LU2 = LS2
         LU3 = LS3
         LU5 = LS5
         LU6 = LS6
         LU8 = LS8
      ENDIF
      LS9    = LS3+LD
      LS4    = LS3+LM6
      LU4    = LS4
      LU7    = LS7
C *** DEFINE END OF RESERVED BUFFER SPACE.
C     LAST RESERVED ADDRESS AFTER SCF POSTPROCESSING IN SCFCAL.
      LM5R   = LS6-1
C *** RESET INPUT OPTIONS.
C     IN2(212) = INOUT
C     *
C *** PRINTING SECTION.
      IF(JPRINT.LT.2) RETURN
C     DETAILED MESSAGES ON MEMORY USAGE.
      IF(LM2.EQ.NORBS) THEN
         WRITE(NB6,560) LM2,LM3,LM4,LM6
      ELSE
         WRITE(NB6,565) NORBS,LM3,LM2,LM4,LM6
      ENDIF
      IF(IOP.GT.0) THEN
         WRITE(NB6,570) INTSUM
      ELSE
         WRITE(NB6,590) INTTOT,INTSUM,LM9
      ENDIF
C     MEMORY ALLOCATION.
      IF(UHF) THEN
         WRITE(NB6,600) LS8,LS8+L22-1,L22,LU8,LU8+L22-1,L22,
     1                  LS1,LS1+L23-1,L23,LU1,LU1+L23-1,L23,
     2                  LS2,LS2+LM2-1,LM2,LU2,LU2+LM2-1,LM2,
     3                  LS6,LS6+L22-1,L22,LU6,LU6+L22-1,L22
         IF(INOUT.GE.0) THEN
            WRITE(NB6,601) LS7,LS7+L22-1,L22
         ENDIF
         IF(NSTART.GE.0) THEN
            WRITE(NB6,602) LS5,LS5+L22-1,L22,LU5,LU5+L22-1,L22
         ENDIF
         WRITE(NB6,603) LS3,LS3+LD-1,LD
      ELSE
         WRITE(NB6,610) LS8,LS8+L22-1,L22,
     1                  LS1,LS1+L23-1,L23,
     2                  LS2,LS2+LM2-1,LM2,
     3                  LS6,LS6+L22-1,L22
         IF(INOUT.GE.0) THEN
            WRITE(NB6,601) LS7,LS7+L22-1,L22
         ENDIF
         IF(NSTART.GE.0) THEN
            WRITE(NB6,612) LS5,LS5+L22-1,L22
         ENDIF
         WRITE(NB6,603) LS3,LS3+LD-1,LD
      ENDIF
C     COMMENTS ON ACTIONS IN DYNDIR.
      IF(LFIT.GT.0) THEN
         WRITE(NB6,630)
         IF(INOUT.EQ.-1 .AND. INOUT1.GE.0) WRITE(NB6,680)
      ENDIF
      RETURN
C 510 FORMAT(///1X,'*** WARNING ****',
C    1       // 1X,'DUE TO MEMORY LIMITATIONS THE PROGRAM CANNOT ',
C    2             'USE THE MOST EFFICIENT IN-CORE ALGORITHMS ',
C    3       /  1X,'FOR THE SCF CALCULATION.')
C 520 FORMAT(/  1X,'AVAILABLE LENGTH OF BLANK COMMON           ',I10,
C    1       /  1X,'CURRENT LENGTH FOR SCF                     ',I10,
C    2       /  1X,'FIELD LENGTH REQUIRED FOR IN-CORE SCF      ',I10)
  560 FORMAT(///1X,'NUMBER OF BASIS ORBITALS                   ',I10,
     1       /  1X,'NUMBER OF EIGENVECTORS COMPUTED            ',I10,
     2       /  1X,'DIMENSION OF LOWER TRIANGLE MATRIX IN SCF  ',I10,
     3       /  1X,'NUMBER OF ONE-CENTER AO PAIRS              ',I10)
  565 FORMAT(///1X,'NUMBER OF BASIS ORBITALS                   ',I10,
     1       /  1X,'NUMBER OF EIGENVECTORS COMPUTED            ',I10,
     2       /  1X,'ROW DIMENSION OF SQUARE MATRICES IN SCF    ',I10,
     3       /  1X,'DIMENSION OF LOWER TRIANGLE MATRIX IN SCF  ',I10,
     4       /  1X,'NUMBER OF ONE-CENTER AO PAIRS              ',I10)
  570 FORMAT(   1X,'NUMBER OF TWO-ELECTRON INTEGRALS           ',I10)
  590 FORMAT(   1X,'NUMBER OF TWO-ELECTRON INTEGRALS (TOTAL)   ',I10,
     1       /  1X,'NUMBER OF TWO-ELECTRON INTEGRALS (UNIQUE)  ',I10,
     2       /  1X,'NUMBER OF TWO-ELECTRON INTEGRALS (STORED)  ',I10)
  600 FORMAT(///1X,'MEMORY ALLOCATION FOR UHF-SCF CALCULATION',
     1       // 1X,'    START    FINAL   LENGTH    CONTENTS',
     2       // 1X,3I9,4X,'ALPHA DENSITY MATRIX',
     3       /  1X,3I9,4X,'BETA  DENSITY MATRIX',
     4       /  1X,3I9,4X,'ALPHA EIGENVECTORS',
     5       /  1X,3I9,4X,'BETA  EIGENVECTORS',
     6       /  1X,3I9,4X,'ALPHA EIGENVALUES',
     7       /  1X,3I9,4X,'BETA  EIGENVALUES',
     8       /  1X,3I9,4X,'ALPHA FOCK MATRIX',
     9       /  1X,3I9,4X,'BETA  FOCK MATRIX')
  601 FORMAT(   1X,3I9,4X,'CORE HAMILTONIAN MATRIX')
  602 FORMAT(   1X,3I9,4X,'ALPHA DIFFERENCE DENSITY MATRIX',
     1       /  1X,3I9,4X,'BETA  DIFFERENCE DENSITY MATRIX')
  603 FORMAT(   1X,3I9,4X,'DIAGONALIZATION BUFFERS')
  610 FORMAT(///1X,'MEMORY ALLOCATION FOR RHF-SCF CALCULATION',
     1       // 1X,'    START    FINAL   LENGTH    CONTENTS',
     2       // 1X,3I9,4X,'DENSITY MATRIX',
     3       /  1X,3I9,4X,'EIGENVECTORS',
     4       /  1X,3I9,4X,'EIGENVALUES',
     5       /  1X,3I9,4X,'FOCK MATRIX')
  612 FORMAT(   1X,3I9,4X,'DIFFERENCE DENSITY MATRIX')
  630 FORMAT(///1X,'*** COMMENTS ON MEMORY ALLOCATION ***')
  680 FORMAT(/  1X,'ONE-ELECTRON INTEGRALS COMPUTED ON-THE-FLY',
     1          1X,'TO SAVE MEMORY (INOUT RESET TO -1).')
  900 FORMAT(///1X,'*** ERROR ****',
     1       // 1X,'DUE TO INSUFFICIENT MEMORY THE PROGRAM CANNOT ',
     2             'CARRY OUT THE SCF CALCULATION.')
  910 FORMAT(/  1X,'AVAILABLE LENGTH OF BLANK COMMON           ',I10,
     1       /  1X,'MINIMUM FIELD LENGTH REQUIRED FOR SCF      ',I10,
     2       /  1X,'FIELD LENGTH REQUIRED FOR IN-CORE SCF      ',I10)
      END
