      SUBROUTINE GETGEO (KSTOP)
C     *
C     INPUT ROUTINE FOR MOLECULAR GEOMETRY.
C     ADAPTED FROM MOPAC(6.0) WRITTEN BY J.J.P.STEWART.
C     *
C     AN ELEMENT IS SPECIFIED BY ITS CHEMICAL SYMBOL OR BY ITS
C     ATOMIC NUMBER (OPTIONALLY FOLLOWED BY ITS ISOTOPIC MASS).
C     *
C     ON EXIT
C     NATOMS    = NUMBER OF ATOMS PLUS DUMMY ATOMS (IF ANY).
C     NUMAT     = NUMBER OF ATOMS WITHOUT DUMMY ATOMS.
C     LABELS    = ARRAY OF ATOMIC LABELS INCLUDING DUMMY ATOMS.
C     NAT       = ARRAY OF ATOMIC LABELS WITHOUT DUMMY ATOMS.
C     GEO       = ARRAY OF INTERNAL COORDINATES.
C     NA        = ARRAY OF LABELS OF ATOMS, BOND LENGTHS.
C     NB        = ARRAY OF LABELS OF ATOMS, BOND ANGLES.
C     NC        = ARRAY OF LABELS OF ATOMS, DIHEDRAL ANGLES.
C     NVAR      = NUMBER OF PARAMETERS TO BE OPTIMIZED.
C     XPARAM    = STARTING VALUE OF PARAMETERS TO BE OPTIMIZED.
C     LREACT    = LABEL OF REACTION COORDINATE.
C     LGRID1    = LABEL OF FIRST GRID VARIABLE.
C     LGRID2    = LABEL OF SECOND GRID VARIABLE.
C     RC(1)     = STARTING VALUE OF REACTION COORDINATE.
C     RC1(1)    = STARTING VALUE OF FIRST GRID VARIABLE.
C     RC2(1)    = STARTING VALUE OF SECOND GRID VARIABLE.
C     *
C     DEPENDING ON THE ACTUAL GEOMETRY INPUT ENCOUNTERED,
C     THE FOLLOWING INPUT OPTIONS MAY BE REDEFINED.
C     IN1(4)    = IGEOM
C     IN1(68)   = KGEOM
C     *
      USE LIMIT, ONLY: LM1, LMV, LMS, LMR, LMG, LMZ
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL LEADSP,INT,ERROR
      CHARACTER*800 KEYWRD
      CHARACTER ELEMNT*2,LINE*80,SPACE*1,NINE*1,IZERO*1
      CHARACTER TAB*1,COMMA*1,STRING*80,ELE*2
C     CHARACTER LTXT*1,TXTATM*8
      CHARACTER ELI*2
      COMMON
     ./AMASS / AMS(LM1)
     ./ATOMC / COORD(3,LM1)
     ./ATOMS / NUMAT,NAT(LM1),NFIRST(LM1),NLAST(LM1)
     ./CONSTF/ A0,AFACT,EV,EVCAL,PI,W1,W2,BIGEXP
     ./CONSTN/ ZERO,ONE,TWO,THREE,FOUR,PT5,PT25
     ./DFP   / XPARAM(LMV),NVAR
     ./ELEMTS/ ELEMNT(107)
     ./INOPT1/ IN1(300)
     ./ISTOPE/ CMS(LMZ),BMS(LMZ)
     ./KEYWRD/ KEYWRD
      COMMON
     ./NBFILE/ NBF(20)
     ./PARM1 / GEO(3,LM1),NC(LM1),NB(LM1),NA(LM1),LABELS(LM1),NATOMS
     ./PARM2 / NSYM,LOCPAR(LMS*3)
     ./PARM3 / LOC(LMV),NVV
     ./PARM4 / RC(LMR),LREACT,LTOTAL
     ./PARM5 / RC1(LMG),RC2(LMG),LGRID1,LTOT1,LGRID2,LTOT2
      DIMENSION ISTART(40),LOPT(3)
C     DIMENSION TXTATM(LM1)
      SAVE COMMA,SPACE,NINE,IZERO
      DATA COMMA,SPACE,NINE,IZERO/',',' ','9','0'/
C *** FILE NUMBERS.
      NB5    = NBF(5)
      NB6    = NBF(6)
C *** INITIALIZATION.
      TAB    = CHAR(9)
      IFLAG  = 0
      ISERR  = 0
      LGRID1 = 0
      LGRID2 = 0
      LREACT = 0
      LTOTAL = 0
      LTOT1  = 0
      LTOT2  = 0
      MAXTXT = 0
      NATOMS = 0
      NSYM   = 0
      NUMAT  = 0
      NVAR   = 0
C     AMSUM  = ZERO
      BFACT  = ONE/AFACT
C *** READ THE INPUT DATA.
   10 READ(NB5,'(A)',END=100,ERR=180)LINE
      IF(LINE.EQ.' ') GO TO 100
      NATOMS = NATOMS+1
      IF(NATOMS.GT.LM1) THEN
         WRITE(NB6,'(//10X,''****  MAX. NUMBER OF ATOMS ALLOWED:'',I4)')
     1         LM1
         STOP 'GETGEO'
      ENDIF
C *** CHECK FOR DESCRIPTIVE TEXT.
      I      = INDEX(LINE,'(')
      IF(I.NE.0)THEN
         K      = INDEX(LINE,')')
C        TXTATM(NATOMS) = LINE(I:K)
         MAXTXT = MAX(MAXTXT,K-I+1)
         STRING = LINE(1:I-1)//LINE(K+1:)
         LINE   = STRING
C     ELSE
C        TXTATM(NATOMS) = ' '
      ENDIF
C *** CLEAN THE INPUT DATA.
      CALL UPPCAS(LINE(1:80),80)
      ICOMMA = ICHAR(COMMA)
      ITAB   = ICHAR(TAB)
      DO 30 I=1,80
      KHAR   = ICHAR(LINE(I:I))
      IF(KHAR.EQ.ICOMMA .OR. KHAR.EQ.ITAB) LINE(I:I)=SPACE
   30 CONTINUE
C     INITIALIZE ISTART TO INTERPRET BLANKS AS ZEROS
      DO 40 I=1,10
      ISTART(I) = 80
   40 CONTINUE
C     FIND INITIAL DIGIT OF ALL NUMBERS, CHECK FOR LEADING SPACES
C     FOLLOWED BY A CHARACTER AND STORE IN ISTART.
      LEADSP = .TRUE.
      NVALUE = 0
      DO 50 I=1,80
         IF(LEADSP .AND. LINE(I:I).NE.SPACE) THEN
            NVALUE=NVALUE+1
            ISTART(NVALUE)=I
         ENDIF
         LEADSP=(LINE(I:I).EQ.SPACE)
   50 CONTINUE
C *** ESTABLISH THE ELEMENT'S NAME AND ISOTOPE, CHECK FOR ERRORS
      WEIGHT = ZERO
      STRING = LINE(ISTART(1):ISTART(2)-1)
      IF(STRING(1:1).GE.IZERO .AND. STRING(1:1).LE.NINE) THEN
C        ATOMIC NUMBER USED: NO ISOTOPE ALLOWED
         LABEL=NINT(READA(STRING,1,0))
         IF (LABEL.EQ.0) GO TO 90
         IF (LABEL.LT.0.OR.LABEL.GT.107) THEN
            WRITE(NB6,'(''  ILLEGAL ATOMIC NUMBER'')')
            GO TO 190
         ENDIF
         GO TO 70
      ENDIF
C     ATOMIC SYMBOL USED
      SYMB   = ABS(READA(STRING,1,0))
      IF(SYMB.LT.1.0D-15) THEN
C        NO ISOTOPE
         ELE = STRING(1:2)
      ELSE
         WEIGHT = SYMB
         IF(STRING(2:2).GE.IZERO .AND. STRING(2:2).LE.NINE) THEN
            ELE = STRING(1:1)
         ELSE
            ELE = STRING(1:2)
         ENDIF
      ENDIF
C     CHECK FOR ERROR IN ATOMIC SYMBOL
C     THE FOLLOWING CODE IS MORE COMPLICATED THAN IN MOPAC(6.0)
C     SINCE ELEMNT(I) MAY CONTAIN A LOWER-CASE LETTER (E.G. Li)
C     WHICH HAS TO BE CONVERTED TO UPPER CASE BEFORE COMPARING
C     WITH THE UPPER-CASE VARIABLE ELE (SEE ELSE BRANCH BELOW).
      IF(ELE(1:1).EQ.'-' .AND. ELE(2:2).NE.'-')ELE(2:2)=' '
      ICAPA  = ICHAR('A')
      ILOWA  = ICHAR('a')
      ILOWZ  = ICHAR('z')
      DO 60 I=1,107
         IF(ELE.EQ.ELEMNT(I)) THEN
            LABEL=I
            GO TO 70
         ELSE
            ELI=ELEMNT(I)
            ILINE=ICHAR(ELI(2:2))
            IF(ILINE.GE.ILOWA.AND.ILINE.LE.ILOWZ) THEN
               ELI(2:2)=CHAR(ILINE+ICAPA-ILOWA)
               IF(ELE.EQ.ELI) THEN
                  LABEL=I
                  GO TO 70
               ENDIF
            ENDIF
         ENDIF
   60 CONTINUE
      WRITE(NB6,'(''  UNRECOGNIZED ELEMENT NAME: ('',A,'')'')')ELE
      GO TO 190
C *** ALL OKAY, SAVE INPUT DATA.
   70 CONTINUE
      LABELS(NATOMS) = LABEL
      GEO(1,NATOMS)  = READA(LINE,ISTART(2),0)
      GEO(2,NATOMS)  = READA(LINE,ISTART(4),0)
      GEO(3,NATOMS)  = READA(LINE,ISTART(6),0)
      LOPT(1)        = NINT(READA(LINE,ISTART(3),0))
      LOPT(2)        = NINT(READA(LINE,ISTART(5),0))
      LOPT(3)        = NINT(READA(LINE,ISTART(7),0))
      NA(NATOMS)     = NINT(READA(LINE,ISTART(8),0))
      NB(NATOMS)     = NINT(READA(LINE,ISTART(9),0))
      NC(NATOMS)     = NINT(READA(LINE,ISTART(10),0))
      IF(LABEL.NE.99 .AND. LABEL.LE.LMZ) THEN
         NUMAT = NUMAT+1
         NAT(NUMAT) = LABEL
         AMS(NUMAT) = CMS(LABEL)
      ENDIF
C     DEFINE ATOMIC MASSES VIA INPUT.
      IF(WEIGHT.NE.ZERO) THEN
         WRITE(NB6,'('' FOR ATOM'',I4,''  ISOTOPIC MASS:'',F15.5)')
     1         NATOMS, WEIGHT
         AMS(NUMAT)=WEIGHT
      ENDIF
C     DETERMINE MOLECULAR WEIGHT.
C     IF(LABEL.NE.99 .AND. LABEL.LE.LMZ) AMSUM=AMSUM+AMS(NUMAT)
C
C     CHECK POSSIBLE INPUT ERROR FOR ATOM 3.
C     TAKEN FROM MOPAC(6.0) FOR COMPATIBILITY AND ADAPTED (LOPT).
C     THE ELSE-IF STATEMENT DOES NOT SEEM ENTIRELY SAFE,
C     BUT IT IS USED IN THIS FORM BY MOPAC(6.0).
C     THE ELSE-PART SHOULD BE COMMENTED OUT IF THERE ARE PROBLEMS.
      IF(NATOMS.EQ.3) THEN
         IF(LOPT(3).EQ.2) THEN
            NA(3) = 1
            NB(3) = 2
            LOPT(3)  = 0
            GEO(3,3) = ZERO
         ELSE IF(LOPT(3).EQ.1 .AND. ABS(GEO(3,3)-TWO).LT.1.0D-04) THEN
            NA(3) = 2
            NB(3) = 1
            LOPT(3)  = 0
            GEO(3,3) = ZERO
         ENDIF
      ENDIF
C     CHECK FOR GAUSSIAN GEOMETRY INPUT.
      IF(LOPT(3).GT.1 .OR. LOPT(2).GT.1 .OR. LOPT(3).GT.1) ISERR=ISERR+1
      IF(ISERR.EQ.1) THEN
       WRITE(NB6,'(A)') ' GEOMETRY INPUT APPARENTLY IN GAUSSIAN FORMAT.'
       WRITE(NB6,'(A)') ' PLEASE SPECIFY KEYWORD AIGIN. STOP.'
       KSTOP = KSTOP+1
       GO TO 10
      ENDIF
C     STORE VARIABLES TO BE OPTIMIZED, AND PATH AND GRID VARIABLES.
C     ASSUME INPUT IN INTERNAL COORDINATES BY DEFAULT (SEE XPARAM).
      DO 80 J=1,3
      IF(LOPT(J).GT.0) THEN
         NVAR = NVAR+1
         LOC(NVAR) = 3*(NATOMS-1)+J
         XPARAM(NVAR) = GEO(J,NATOMS)
         IF(J.GT.1) XPARAM(NVAR) = XPARAM(NVAR)*BFACT
      ELSE IF(LOPT(J).LT.0) THEN
         IFLAG = IFLAG+1
         IF(IFLAG.EQ.1) THEN
            IF(IN1(68).GE.0) IN1(68)=1
            LREACT = 3*(NATOMS-1)+J
            RC(1)  = GEO(J,NATOMS)
         ENDIF
         IF(IFLAG.EQ.2) THEN
            IF(IN1(68).GE.0) IN1(68)=2
            LGRID1 = LREACT
            RC1(1) = RC(1)
            LGRID2 = 3*(NATOMS-1)+J
            RC2(1) = GEO(J,NATOMS)
            LREACT = 0
         ENDIF
      ENDIF
   80 CONTINUE
      GO TO 10
C *** ALL DATA READ IN, CLEAN UP AND RETURN.
   90 NATOMS = NATOMS-1
  100 IF(NATOMS.EQ.0) STOP 'GETGEO'
      NA(2)  = 1
      NVV    = NVAR
C     LTXT   = CHAR(MAXTXT)
C     CHECK FOR INTERNAL VS CARTESIAN INPUT.
      IF(NATOMS.GT.3) THEN
         INT = NA(4).NE.0
      ELSE
         IF(GEO(2,3).LT.10.0D0 .AND. NATOMS.EQ.3) WRITE(NB6,500)
         INT = .TRUE.
      ENDIF
C     SET CONTROL VARIABLES AND CONVERT TO RADIANS.
      IF(.NOT.INT) THEN
         IN1(4) = 1
         CALL GMETRY (+1)
      ELSE
         IN1(4) = 0
         GEO(2,2) = ZERO
         DO 110 I=1,NATOMS
         GEO(2,I) = GEO(2,I)*BFACT
         GEO(3,I) = GEO(3,I)*BFACT
  110    CONTINUE
         IF(LREACT.GT.0 .AND. MOD(LREACT,3).NE.1) RC (1)=RC (1)*BFACT
         IF(LGRID1.GT.0 .AND. MOD(LGRID1,3).NE.1) RC1(1)=RC1(1)*BFACT
         IF(LGRID2.GT.0 .AND. MOD(LGRID2,3).NE.1) RC2(1)=RC2(1)*BFACT
         IF(NA(3).EQ.0) THEN
            NB(3) = 1
            NA(3) = 2
         ENDIF
      ENDIF
C     CHECK INPUT DATA FOR FATAL ERRORS.
      DO 120 I=1,NATOMS
         IF(LABELS(I).LE.0) THEN
            WRITE(NB6,'('' ATOMIC NUMBER OF '',I3,'' ?'')') LABELS(I)
            STOP 'GETGEO'
         ENDIF
         IF(INT) THEN
            ERROR = NA(I).GE.I .OR. NB(I).GE.I .OR. NC(I).GE.I
            ERROR = ERROR .OR.  NA(I).EQ.NB(I) .AND. I.GT.1
            ERROR = ERROR .OR.  NA(I).EQ.NC(I) .AND. I.GT.2
            ERROR = ERROR .OR.  NB(I).EQ.NC(I) .AND. I.GT.2
            ERROR = ERROR .OR.  NA(I)*NB(I)*NC(I).EQ.0 .AND. I.GT.3
            IF(ERROR) THEN
                WRITE(NB6,'('' ATOM NUMBER '',I3,'' IS ILLDEFINED'')') I
                STOP 'GETGEO'
            ENDIF
         ENDIF
  120 CONTINUE
      IF(IFLAG.GT.2) THEN
         WRITE(NB6,510) IFLAG
         LREACT = 0
         KSTOP = KSTOP+1
C        STOP 'GETGEO'
      ENDIF
C *** REDEFINE OPTIMIZED VARIABLES IN THE CASE OF CARTESIAN INPUT.
      IF(.NOT.INT) THEN
         DO 130 I=1,NVAR
         J   = (LOC(I)+2)/3
         K   = LOC(I)-(J-1)*3
         XPARAM(I) = GEO(K,J)
  130    CONTINUE
      ENDIF
C *** CODE FOR OPTION XYZ ACCORDING TO MOPAC CONVENTIONS.
C     IF THE GEOMETRY INPUT IS IN INTERNAL COORDINATES AND OPTION XYZ
C     IS SET, ALL CALCULATIONS WILL BE DONE IN CARTESIAN COORDINATES.
      IF(INT .AND. INDEX(KEYWRD,' XYZ').NE.0) THEN
         CALL SYMTRY (+1)
         CALL GMETRY (-1)
         NVAR    = 0
         DO 150 I=1,NUMAT
         DO 140 J=1,3
         NVAR    = NVAR+1
         GEO(J,I)     = COORD(J,I)
         XPARAM(NVAR) = GEO(J,I)
         LOC(NVAR)    = NVAR
  140    CONTINUE
  150    CONTINUE
         NVV    = NVAR
         NA(1)  = 99
         IN1(4) = 1
      ENDIF
      RETURN
C *** PRINT ERROR MESSAGES.
  180 WRITE(NB6,'( '' ERROR DURING READ AT ATOM NUMBER '', I3 )')NATOMS
  190 K      = NATOMS-1
      WRITE(NB6,'('' LAST DATA READ ARE '')')
      WRITE(NB6,520) LABELS(K),(GEO(J,K),LOPT(J),J=1,3),NA(K),NB(K),
     1               NC(K)
      STOP 'GETGEO'
  500 FORMAT(//10X,' WARNING: INTERNAL COORDINATES ARE ASSUMED -',
     1       / 10X,' FOR THREE-ATOM SYSTEMS ',//)
  510 FORMAT(//1X,I4,' GRID VARIABLES ARE DEFINED',
     1       / 1X,'ONLY TWO GRID VARIABLES ARE PERMITTED')
  520 FORMAT(I4,2X,3(F10.5,2X,I2,2X),3(I2,1X))
      END
