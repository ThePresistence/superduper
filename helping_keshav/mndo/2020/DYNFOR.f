      SUBROUTINE DYNFRC (LEN,LFA,LFB)
C     *
C     DYNAMIC CORE ALLOCATION FOR OPTIMIZATION AND FORCE CONSTANTS.
C     *
C     NOTATION.
C     LEN = AVAILABLE LENGTH OF BLANK COMMON AREA (INPUT VALUE,
C           NOT MODIFIED IN THIS ROUTINE).
C     LFA = LAST ADDRESS OF BLANK COMMON AREA THAT IS ACTUALLY USED
C           IN OPTIMIZATION OR FORCE CONSTANT ROUTINES WHICH CALL
C           SCF ROUTINES (DETERMINED HERE).
C     LFB = LAST ADDRESS OF BLANK COMMON AREA THAT IS ACTUALLY USED
C           IN THE NORMAL COORDINATE ANALYSIS BY SUBROUTINE FORCE
C           (DETERMINED HERE).
C     *
      USE LIMIT, ONLY: LM1, LMV, LMYL
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      LOGICAL OPTMIN,OPTTS
      COMMON
     ./ATOMS / NUMAT,NAT(LM1),NFIRST(LM1),NLAST(LM1)
     ./DFP   / X(LMV),NVAR
     ./INOPT2/ IN2(300)
     ./LMFOR / LF1,LF2,LF3,LF4,LF5,LF6,LF7,LF8,LFC
     ./NBFILE/ NBF(20)
     ./YARLAG/ YLVAL(LMYL),YLGRD(LMYL),YLD(LMYL),NYL
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** INPUT OPTIONS.
      JOP    = IN2(3)
      IEF    = IN2(8)
      MAXEND = IN2(32)
      JPRINT = IN2(42)
      ICROSS = IN2(160)
C *** INITIALIZATION.
      LF1    = 1
      LFA    = 0
      LFB    = 0
      LFC    = 0
      IF(JOP.LT.0) RETURN
      OPTMIN = (JOP.EQ.0 .OR. JOP.EQ.3 .OR. JOP.EQ.5) .AND. MAXEND.GT.1
      OPTTS  = (JOP.EQ.1 .OR. JOP.EQ.4 .OR. JOP.EQ.6) .AND. MAXEND.GT.1
C *** YARKONY CONICAL INTERSECTION SEARCH
      IF(ICROSS.EQ.5) THEN
         NVARLM = NVAR+NYL
         LF2 = LF1+NVARLM*NVARLM
         LF8 = LF2+NVARLM*NVARLM
         LFA = 3*NVARLM*NVARLM
C *** SEARCH FOR ENERGY MINIMUM.
      ELSE IF(OPTMIN .AND. IEF.EQ.0) THEN
         LFA = NVAR*(NVAR+1)/2
C *** SEARCH FOR TRANSITION STATE.
      ELSE IF(OPTTS .AND. IEF.EQ.0) THEN
         LF2 = LF1+NVAR*NVAR
         LF8 = LF2+NVAR*NVAR
         LFA = 3*NVAR*NVAR
C *** EIGENVECTOR FOLLOWING.
      ELSE IF((OPTMIN .OR. OPTTS) .AND. IEF.GT.0) THEN
         LF2 = LF1+NVAR*NVAR
         LF8 = LF2+NVAR*NVAR
         LFA = 3*NVAR*NVAR
      ENDIF
C *** FORCE CONSTANT CALCULATION.
      IF(JOP.GE.2) THEN
         I3N = 3*NUMAT
         LF3 = LF1+I3N*I3N
         LF4 = LF3+I3N*3
         LF5 = LF4+I3N*I3N
         LF6 = LF5+I3N*I3N
         LF7 = LF6+I3N
         LFA = MAX(LFA,I3N*I3N+3*I3N)
         LFB = 3*I3N*I3N+10*I3N
      ENDIF
      LFC = LFA
C *** PRINTING SECTION.
      IF(JPRINT.GE.2) THEN
C        GEOMETRY OPTIMIZATION.
         IF(OPTMIN .AND. IEF.EQ.0) THEN
            NV1 = NVAR*(NVAR+1)/2
            WRITE(NB6,500) LF1,NV1,NV1
         ELSE IF(OPTTS .AND. IEF.EQ.0) THEN
            NV2 = NVAR*NVAR
            WRITE(NB6,510) LF1,LF1+NV2-1,NV2,LF2,LF2+NV2-1,NV2,
     1                     LF8,LF8+NV2-1,NV2
         ELSE IF((OPTMIN .OR. OPTTS) .AND. IEF.GT.0) THEN
            NV2 = NVAR*NVAR
            WRITE(NB6,520) LF1,LF1+NV2-1,NV2,LF2,LF2+NV2-1,NV2,
     1                     LF8,LF8+NV2-1,NV2
         ENDIF
C        FORCE CONSTANT CALCULATION.
         IF(JOP.GE.2) THEN
            NV2 = I3N*I3N
            NV3 = I3N*3
            NV6 = I3N*6
            WRITE(NB6,530) LF1,LF1+NV2-1,NV2,LF3,LF3+NV3-1,NV3,
     1                     LF4,LF4+NV2-1,NV2,LF5,LF5+NV2-1,NV2,
     2                     LF6,LF6+I3N-1,I3N,LF7,LF7+NV6-1,NV6
            IF(JPRINT.GE.5) WRITE(NB6,540) LFA,LFB
         ENDIF
      ENDIF
C *** CHECK MEMORY.
      IF(LFB.GT.LEN) THEN
         WRITE(NB6,600) LEN,LFB
         STOP 'DYNFRC'
      ENDIF
      IF(LFA.GT.LEN) THEN
         IF(IEF.GT.0) THEN
            WRITE(NB6,610) LEN,LFA
         ELSE IF(JOP.LT.2) THEN
            WRITE(NB6,620) LEN,LFA
         ELSE
            WRITE(NB6,630) LEN,LFA
         ENDIF
         STOP 'DYNFRC'
      ENDIF
      RETURN
  500 FORMAT(///1X,'MEMORY ALLOCATION FOR GEOMETRY OPTIMIZATION',
     1       // 1X,'    START    FINAL   LENGTH    CONTENTS',
     2       // 1X,3I9,4X,'INVERSE HESSIAN MATRIX')
  510 FORMAT(///1X,'MEMORY ALLOCATION FOR GRADIENT NORM MINIMIZATION',
     1       // 1X,'    START    FINAL   LENGTH    CONTENTS',
     2       /  1X,3I9,4X,'Q MATRIX FOR NONLINEAR LEAST SQUARES METHOD',
     3       /  1X,3I9,4X,'R MATRIX FOR NONLINEAR LEAST SQUARES METHOD',
     4       /  1X,3I9,4X,'TRANSPOSED R MATRIX USED AS WORKING ARRAY')
  520 FORMAT(///1X,'MEMORY ALLOCATION FOR EIGENVECTOR FOLLOWING',
     1       // 1X,'    START    FINAL   LENGTH    CONTENTS',
     2       /  1X,3I9,4X,'CURRENT HESSIAN MATRIX',
     3       /  1X,3I9,4X,'EIGENVECTORS OF HESSIAN MATRIX',
     4       /  1X,3I9,4X,'PREVIOUS HESSIAN MATRIX')
  530 FORMAT(///1X,'MEMORY ALLOCATION FOR FORCE CONSTANT ANALYSIS',
     1       // 1X,'    START    FINAL   LENGTH    CONTENTS',
     2       /  1X,3I9,4X,'CARTESIAN FORCE CONSTANT MATRIX',
     3       /  1X,3I9,4X,'CARTESIAN DIPOLE DERIVATIVES',
     4       /  1X,3I9,4X,'EIGENVECTORS OF THE GF-MATRIX',
     5       /  1X,3I9,4X,'SCRATCH ARRAY FOR COPY OF MATRIX',
     6       /  1X,3I9,4X,'EIGENVALUES OF THE GF-MATRIX',
     7       /  1X,3I9,4X,'SCRATCH ARRAYS FOR SEVERAL VECTORS')
  540 FORMAT(// 1X,'ADDRESS OF LAST WORD BEFORE SCF BUFFER     ',I10,
     1       /  1X,'LAST ADDRESS IN FORCE CONSTANT BUFFER      ',I10)
  600 FORMAT(///1X,'*** ERROR. ***',
     1       // 1X,'DUE TO INSUFFICIENT MEMORY THE PROGRAM CANNOT ',
     2             'CARRY OUT THE NORMAL COORDINATE ANALYSIS.',
     3       // 1X,'AVAILABLE LENGTH OF BLANK COMMON           ',I10,
     4       /  1X,'MINIMUM FIELD LENGTH REQUIRED              ',I10)
  610 FORMAT(///1X,'*** ERROR. ***',
     1       // 1X,'DUE TO INSUFFICIENT MEMORY THE PROGRAM CANNOT ',
     2             'CARRY OUT THE EIGENVECTOR FOLLOWING.',
     3       // 1X,'AVAILABLE LENGTH OF BLANK COMMON           ',I10,
     4       /  1X,'MINIMUM FIELD LENGTH REQUIRED              ',I10)
  620 FORMAT(///1X,'*** ERROR. ***',
     1       // 1X,'DUE TO INSUFFICIENT MEMORY THE PROGRAM CANNOT ',
     2             'CARRY OUT THE GEOMETRY OPTIMIZATION.',
     3       // 1X,'AVAILABLE LENGTH OF BLANK COMMON           ',I10,
     4       /  1X,'MINIMUM FIELD LENGTH REQUIRED              ',I10)
  630 FORMAT(///1X,'*** ERROR. ***',
     1       // 1X,'DUE TO INSUFFICIENT MEMORY THE PROGRAM CANNOT ',
     2             'CARRY OUT THE REQUESTED CALCULATION.',
     3       // 1X,'AVAILABLE LENGTH OF BLANK COMMON           ',I10,
     4       /  1X,'MINIMUM FIELD LENGTH REQUIRED              ',I10)
      END
