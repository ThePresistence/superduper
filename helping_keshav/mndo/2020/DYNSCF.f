      SUBROUTINE DYNSCF (LEN,LFA,LM5X,LM5R)
C     *
C     DYNAMIC MEMORY ALLOCATION FOR SCF CALCULATION.
C     *
C     NOTATION.
C     LEN  = AVAILABLE LENGTH OF BLANK COMMON AREA (INPUT VALUE,
C            NOT MODIFIED IN THIS ROUTINE).
C     LFA  = LAST ADDRESS OF BLANK COMMON AREA THAT HAS PREVIOUSLY
C            BEEN RESERVED (INPUT VALUE, NOT MODIFIED IN THIS ROUTINE).
C     LM5X = LAST ADDRESS OF BLANK COMMON AREA THAT IS ACTUALLY USED
C            BY THE ARRAYS DEFINED PRESENTLY (DETERMINED HERE).
C     LM5R = LAST ADDRESS OF BLANK COMMON AREA THAT NEEDS TO REMAIN
C            RESERVED LATER ON (DETERMINED IN THIS ROUTINE).
C     *
      USE LIMIT, ONLY: LM1
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
CSET  LM6VEC DEFINES THE VECTOR LENGTH ABOVE WHICH IT IS FASTER TO USE
CSET  SUBROUTINE FOCK INSTEAD OF SUBROUTINE FOCKX ON A VECTOR MACHINE.
CSET  LM6VEC=100 SHOULD BE APPROPRIATE FOR VECTOR MACHINES (E.G. CRAY).
CSET  LM6VEC=0 IMPLIES A CALL TO SUBROUTINE FOCKX AND WILL ALWAYS WORK.
      PARAMETER (LM6VEC=0)
      LOGICAL DIRECT,NODIAG
      LOGICAL UHF
      COMMON
     ./ATOMS / NUMAT,NAT(LM1),NFIRST(LM1),NLAST(LM1)
     ./FLAG4 / INTSUM
     ./INOPT1/ IN1(300)
     ./INOPT2/ IN2(300)
     ./LIMITS/ LM2,LM3,LM4,LM6,LM7,LM8,LM9
     ./LMSCF / LS1,LS2,LS3,LS4,LS5,LS6,LS7,LS8,LS9
     ./LMUHF / LU1,LU2,LU3,LU4,LU5,LU6,LU7,LU8
     ./NBFILE/ NBF(20)
     ./ORBITS/ NUMB,NORBS,NMOS,NALPHA,NBETA
     ./UHF   / UHF
C     *
C *** FILE NUMBERS.
      NB6    = NBF(6)
C *** INPUT OPTIONS.
      IMODE1 = IN1(211)
      INOUT1 = IN1(212)
      IMODE  = IN2(211)
      INOUT  = IN2(212)
      IOP    = IN2(2)
      MIDDLE = IN2(37)
      JPRINT = IN2(42)
      INTDIR = IN2(55)
      LINDMS = IN2(56)
      LINDIA = IN2(57)
      IFAST  = IN2(73)
      IDIAG  = IN2(74)
      NSTART = IN2(78)
      IMOCC  = ABS(IN2(70))
C *** INITIALIZATION.
      L22    = LM2*NORBS
C     DIRECT METHODS AND CG-DMS.
      LINDIR = INTDIR+LINDMS
      DIRECT = INTDIR.GT.0
      NODIAG = LINDMS.GT.0 .AND. LINDIA.EQ.0
C     *
C *** DEFINE NUMBER OF TWO-CENTER TWO-ELECTRON INTEGRALS.
      INTTOT = LM6*LM6
      INTSUM = 0
      DO 20 I=2,NUMAT
      ITEMP  = NLAST(I)-NFIRST(I)+1
      IW     = (ITEMP*(ITEMP+1))/2
      DO 10 J=1,I-1
      JTEMP  = NLAST(J)-NFIRST(J)+1
      JW     = (JTEMP*(JTEMP+1))/2
      INTSUM = INTSUM+IW*JW
   10 CONTINUE
   20 CONTINUE
      IF(IOP.GT.0) INTSUM=(NUMAT*(NUMAT+1))/2
C *** DEFINE BUFFER FOR TWO-ELECTRON INTEGRALS.
C     MAXIMUM MEMORY REQUIREMENTS FOR A GIVEN INPUT (IOP,IMODE).
      IF(IOP.GT.0) THEN
         LM9 = INTSUM
      ELSE IF(IMODE.LE.0) THEN
         LM9 = INTTOT
      ELSE IF(IMODE.EQ.1) THEN
         LM9 = INTSUM
      ELSE
         LM9 = IMODE*512
         LM9 = MIN(LM9,INTSUM)
      ENDIF
      IF(DIRECT) THEN
         LM9 = 0
      ENDIF
C     *
C *** COMPUTE LENGTH OF GENERAL BUFFER FOR SCF CALCULATION.
C     USED ONLY BY SUBROUTINE SCFCAL IN CALLS TO ITER,VERTEX,GRAPH,CIS.
C     THESE ROUTINES EMPLOY THE BUFFER FOR INTERMEDIATE ARRAYS IN:
C     - STANDARD DIAGONALIZATION (EVVRSP,TDIAG,TQL2,TRED2,DSPEV,DSPEVX,
C       DSYEV,DSYEVX: UP TO 8*LM2 WORDS),
C     - DIVIDE-AND-CONQUER DIAGONALIZATION (DSPEVD,DSYEVD: UP TO
C       3*LM2*LM2 + 2*LM2*LG(LM2) + 5*LM2 + 1 WORDS).
C     - PSEUDODIAGONALIZATION (DIAG: UP TO LM2*NUMB (RHF) OR UP TO
C       LM2*NALPHA (UHF) WORDS),
C     - FOCK MATRIX GENERATION (FOCK,FOCKX,FOCK2: LM6 WORDS),
C     - CALCULATION OF A TWO-ELECTRON MO INTEGRAL (SPCW: LM6 WORDS,
C       CALLED FROM ITER,VERTEX,GRAPH,CIS,HECOR), POSSIBLY COMBINED
C       WITH STORAGE OF MO EIGENVALUES (ITER: LM2+LM6 WORDS, SEE CALLS
C       TO DCOPY/HECOR/DCOPY).
C     - MULLIKEN POPULATION ANALYSIS (GRAPH,MULLIK: 2*LM2+NUMAT WORDS).
C     - COMPUTATION OF S**(-1/2) MATRIX, DIAGONALIZATION STEP (GRAPH,
C       SMHALF,TDIAG: 2*LM2 WORDS).
C     THE CODE DETERMINES THE MAXIMUM LENGTH ACTUALLY REQUIRED.
      IF(NODIAG) THEN
         LWORK = 0
      ELSE
         CALL DYNDIA (IDIAG,NORBS,LWORK,LIWORK)
      ENDIF
      IF(IFAST.GT.1 .OR. LINDMS.GT.0) THEN
         LDIAG = 0
      ELSE
         IF(UHF) THEN
            LDIAG = LM2*NALPHA
         ELSE
            LDIAG = LM2*NUMB
         ENDIF
      ENDIF
      LD     = MAX(LDIAG,LWORK)
      LD     = MAX(LD,LM2+LM6)
      LD     = MAX(LD,LM2+LM2+NUMAT)
C *** COMPUTE LENGTH OF BUFFER FOR IN-CORE SCF CALCULATION.
C     MAXIMUM MEMORY REQUIREMENTS FOR UHF AND RHF.
      LSFIT  = 0
      IF(UHF) THEN
         LSA = 4*L22+2*LM2+LD+5*LM4
      ELSE
         LSA = 2*L22+LM2+LD+3*LM4
      ENDIF
      LSA1   = LSA
C     REDUCED MEMORY REQUIREMENTS DUE TO INPUT (INOUT,NSTART).
      IF(INOUT.GE.2) THEN
         IF(NSTART.GE.0) THEN
            LSFIT = 4
            LSA1  = LSA1-L22
            IF(UHF) LSA1=LSA1-L22+LM4
         ELSE
            LSFIT = 5
            LSA1  = LSA1-L22-LM4
            IF(UHF) LSA1=LSA1-L22
         ENDIF
      ENDIF
C     *
C *** CHECK MEMORY FOR SCF CALCULATION.
      LFA1   = LFA
      LFIT   = 0
      LM5X   = LFA1+LSA1+LM9
      LMASCF = LM5X
      IF(LM5X.LE.LEN) GO TO 100
C     TRY TO REDUCE BUFFER FOR TWO-ELECTRON INTEGRALS.
      IF(IOP.LE.0 .AND. IMODE.EQ.0 .AND. .NOT.DIRECT) THEN
         LFIT  = 1
         IMODE = 1
         LM9   = INTSUM
         LM5X  = LFA1+LSA1+LM9
         IF(LM5X.LE.LEN) GO TO 100
         LFIT  = 2
         IMODE = 10
         LM9   = IMODE*512
         LM9   = MIN(LM9,INTSUM)
         LM5X  = LFA1+LSA1+LM9
         IF(LM5X.LE.LEN) GO TO 100
      ENDIF
C     TRY TO REDUCE BUFFER FOR OPTIMIZATION AND FORCE CONSTANTS.
      IF(MIDDLE.GE.0 .AND. LFA.GT.0 .AND. LINDIR.EQ.0) THEN
         LFIT  = 3
         IF(IFAST.LT.1) IFAST=1
         LFA1  = 0
         LM5X  = LSA1+LM9
         IF(LM5X.LE.LEN) GO TO 100
      ENDIF
C     REDUCE BUFFER FOR SCF TREATMENT.
      IF(INOUT.LT.2) THEN
         INOUT = 2
         IF(NSTART.GE.0) THEN
            LFIT = 4
            LSA1 = LSA1-L22
            IF(UHF) LSA1=LSA1-L22+LM4
         ELSE
            LFIT = 5
            LSA1 = LSA1-L22-LM4
            IF(UHF) LSA1=LSA1-L22
         ENDIF
         LM5X = LFA1+LSA1+LM9
         IF(LM5X.LE.LEN) GO TO 100
      ENDIF
C     REDUCE BUFFER FOR SCF TREATMENT IN CASE OF USING SLOW
C     DIAGONALIZATION ROUTINES BY COMPUTING THE MINIMUM NUMBER
C     OF MOLECULAR ORBITALS.
      IF(IFAST.EQ.2 .AND. IMOCC.LE.2 .AND. LINDMS.EQ.0) THEN
         LM3   = NMOS
         LDEL5 = LM2*(NORBS-NMOS)
         LSA1  = LSA1-LDEL5
         IF(UHF) LSA1=LSA1-LDEL5
         LM5X  = LFA1+LSA1+LM9
         IF(LM5X.LE.LEN) GO TO 100
      ENDIF
C     *
C *** ERROR EXIT.
      WRITE(NB6,900)
      WRITE(NB6,910) LEN,LM5X,LMASCF
      STOP 'DYNSCF'
C     *
C *** ASSIGN ADDRESSES FOR SCF CALCULATION.
C     THE SCF ARRAYS START AT THE FOLLOWING ADDRESSES.
C     RHF: C  LS1, E  LS2, Q LS3, D  LS5, F  LS6, H LS7, P  LS8, W LS9.
C     UHF: CA LS1, EA LS2, Q LS3, DA LS5, FA LS6, H LS7, PA LS8, W LS9.
C     UHF: CB LU1, EB LU2, Q LS3, DB LU5, FB LU6, H LS7, PB LU8, W LU9.
C     THE ORDER OF THE ARRAYS IN MEMORY IS INDICATED BY COMMENTS BELOW.
  100 CONTINUE
      L23    = LM2*LM3
      LS1    = LFA1+1
      LS2    = LS1+L23
      LS9    = LS2+LM2
      LS6    = LS9+LM9
C     RHF: C(L22),E(LM2),W(LM9),F(L22),H(LM4),D(LM4),P(LM4),Q(LD).
      IF(LFIT.LT.4 .AND. LSFIT.LT.4) THEN
         LS7 = LS6+L22
         LS5 = LS7+LM4
         LS8 = LS5+LM4
C     RHF: C(L22),E(LM2),W(LM9),F(LM4)=H(LM4),D(LM4),P(LM4),Q(LD).
      ELSE IF(LFIT.LE.4 .AND. LSFIT.LE.4) THEN
         LS7 = LS6
         LS5 = LS6+LM4
         LS8 = LS5+LM4
C     RHF: C(L22),E(LM2),W(LM9),F(LM4)=H(LM4)=D(LM4),P(LM4),Q(LD).
      ELSE
         LS7 = LS6
         LS5 = LS6
         LS8 = LS6+LM4
      ENDIF
      IF(UHF) THEN
         LU1 = LS8+LM4
         LU2 = LU1+L23
         LU6 = LU2+LM2
C        UHF: CA(L22),EA(LM2),W(LM9),FA(L22),H(LM4),DA(LM4),PA(LM4),
C        UHF: CB(L22),EB(LM2),FB(L22),DB(LM4),PB(LM4),Q(LD).
         IF(LFIT.LT.4 .AND. LSFIT.LT.4) THEN
            LU5 = LU6+L22
            LU8 = LU5+LM4
C        UHF: CA(L22),EA(LM2),W(LM9),FA(LM4)=H(LM4),DA(LM4),PA(LM4),
C        UHF: CB(L22),EB(LM2),FB(LM4),DB(LM4),PB(LM4),Q(LD).
         ELSE IF(LFIT.LE.4 .AND. LSFIT.LE.4) THEN
            LU5 = LU6+LM4
            LU8 = LU5+LM4
C        UHF: CA(L22),EA(LM2),W(LM9),FA(LM4)=H(LM4)=DA(LM4),PA(LM4),
C        UHF: CB(L22),EB(LM2),FB(LM4)=DB(LM4),PB(LM4),Q(LD).
         ELSE
            LU5 = LU6
            LU8 = LU6+LM4
         ENDIF
      ELSE
         LU1 = LS1
         LU2 = LS2
         LU5 = LS5
         LU6 = LS6
         LU8 = LS8
      ENDIF
      LS3    = LU8+LM4
      LS4    = LS3+LM6
      LU3    = LS3
      LU4    = LS4
      LU7    = LS7
      IF(LFA1.EQ.0 .AND. INOUT.EQ.0 .AND. LFA.GE.LS8) INOUT=1
C *** DEFINE END OF RESERVED BUFFER SPACE.
C     LAST RESERVED ADDRESS AFTER SCF POSTPROCESSING IN SCFCAL.
      LM5R   = LS4-1
C *** RESET INPUT OPTIONS.
      IF(IMODE.EQ.0) IMODE=-LM6VEC
      IN2(73)  = IFAST
      IN2(211) = IMODE
      IN2(212) = INOUT
C     *
C *** PRINTING SECTION.
      IF(JPRINT.LT.0) RETURN
      IF(JPRINT.LT.2 .AND. LFIT.EQ.0) RETURN
      IF(LFIT.GT.0) THEN
         WRITE(NB6,510)
         WRITE(NB6,520) LEN,LM5X,LMASCF
      ENDIF
      IF(JPRINT.LT.1) RETURN
      IF(IOP.LE.0 .AND. IMODE1.GT.0) WRITE(NB6,550) INTTOT,LM9
      IF(INOUT1.GT.0) WRITE(NB6,555)
      IF(JPRINT.LT.2) RETURN
C     DETAILED MESSAGES ON MEMORY USAGE.
      IF(LM2.EQ.NORBS) THEN
         WRITE(NB6,560) LM2,LM3,LM4,LM6
      ELSE
         WRITE(NB6,565) NORBS,LM3,LM2,LM4,LM6
      ENDIF
      IF(IOP.GT.0) THEN
         WRITE(NB6,570) INTSUM
      ELSE
         IF(IMODE.LE.0) WRITE(NB6,570) LM9
         IF(IMODE.EQ.1) WRITE(NB6,580) INTTOT,LM9
         IF(IMODE.GT.1) WRITE(NB6,590) INTTOT,INTSUM,LM9
      ENDIF
C     MEMORY ALLOCATION.
      IF(UHF) THEN
         WRITE(NB6,600) LS1,LS1+L23-1,L23,LS2,LS2+LM2-1,LM2,
     1                  LS9,LS9+LM9-1,LM9,
     2                  LS6,LS6+L22-1,L22,LS7,LS7+LM4-1,LM4,
     3                  LS5,LS5+LM4-1,LM4,LS8,LS8+LM4-1,LM4,
     4                  LU1,LU1+L23-1,L23,LU2,LU2+LM2-1,LM2,
     5                  LU6,LU6+L22-1,L22,
     6                  LU5,LU5+LM4-1,LM4,LU8,LU8+LM4-1,LM4,
     7                  LS3,LS3+LD -1,LD
      ELSE
         WRITE(NB6,610) LS1,LS1+L23-1,L23,LS2,LS2+LM2-1,LM2,
     1                  LS9,LS9+LM9-1,LM9,
     2                  LS6,LS6+L22-1,L22,LS7,LS7+LM4-1,LM4,
     3                  LS5,LS5+LM4-1,LM4,LS8,LS8+LM4-1,LM4,
     4                  LS3,LS3+LD -1,LD
      ENDIF
C     COMMENTS ON ACTIONS IN DYNSCF.
      IF(LFIT.GT.0) WRITE(NB6,630)
      IF(IMODE.NE.IMODE1) THEN
         IF(IMODE.GT.0) WRITE(NB6,640) IMODE,INTTOT,LM9
         IF(IMODE.GT.1) WRITE(NB6,650)
      ENDIF
      IF(LFA .GT.0 .AND. LFA1 .EQ.0) WRITE(NB6,660)
      IF(LFA1.EQ.0 .AND. IFAST.EQ.1) WRITE(NB6,670)
      IF(LFIT.GE.4 .OR.  LSFIT.GE.4) WRITE(NB6,680)
      IF(INOUT.EQ.1) WRITE(NB6,690)
      RETURN
  510 FORMAT(///1X,'*** WARNING ****',
     1       // 1X,'DUE TO MEMORY LIMITATIONS THE PROGRAM CANNOT ',
     2             'USE THE MOST EFFICIENT IN-CORE ALGORITHMS ',
     3       /  1X,'FOR THE SCF CALCULATION.')
  520 FORMAT(/  1X,'AVAILABLE LENGTH OF BLANK COMMON           ',I10,
     1       /  1X,'CURRENT LENGTH FOR SCF                     ',I10,
     2       /  1X,'FIELD LENGTH REQUIRED FOR IN-CORE SCF      ',I10)
  550 FORMAT(///1X,'*** COMMENT ***',
     1       // 1X,'THE INPUT CHOSEN FOR IMODE REDUCES THE MEMORY ',
     2             'FOR THE TWO-ELECTRON INTEGRALS',
     3       /  1X,'FROM',I10,'   TO',I10,'   WORDS',
     4       /  1X,'BUT LEADS TO DISK INPUT/OUTPUT AND TO HIGHER ',
     5             'EXECUTION TIMES.')
  555 FORMAT(///1X,'*** COMMENT ***',
     1       // 1X,'THE INPUT CHOSEN FOR INOUT REDUCES THE MEMORY ',
     2             'FOR THE SCF TREATMENT',
     3       /  1X,'BUT LEADS TO DISK INPUT/OUTPUT AND TO HIGHER ',
     4             'EXECUTION TIMES.')
  560 FORMAT(///1X,'NUMBER OF BASIS ORBITALS                   ',I10,
     1       /  1X,'NUMBER OF EIGENVECTORS COMPUTED            ',I10,
     2       /  1X,'DIMENSION OF LOWER TRIANGLE MATRIX IN SCF  ',I10,
     3       /  1X,'NUMBER OF ONE-CENTER AO PAIRS              ',I10)
  565 FORMAT(///1X,'NUMBER OF BASIS ORBITALS                   ',I10,
     1       /  1X,'NUMBER OF EIGENVECTORS COMPUTED            ',I10,
     2       /  1X,'ROW DIMENSION OF SQUARE MATRICES IN SCF    ',I10,
     3       /  1X,'DIMENSION OF LOWER TRIANGLE MATRIX IN SCF  ',I10,
     4       /  1X,'NUMBER OF ONE-CENTER AO PAIRS              ',I10)
  570 FORMAT(   1X,'NUMBER OF TWO-ELECTRON INTEGRALS           ',I10)
  580 FORMAT(   1X,'NUMBER OF TWO-ELECTRON INTEGRALS (TOTAL)   ',I10,
     1       /  1X,'NUMBER OF TWO-ELECTRON INTEGRALS (UNIQUE)  ',I10)
  590 FORMAT(   1X,'NUMBER OF TWO-ELECTRON INTEGRALS (TOTAL)   ',I10,
     1       /  1X,'NUMBER OF TWO-ELECTRON INTEGRALS (UNIQUE)  ',I10,
     2       /  1X,'NUMBER OF TWO-ELECTRON INTEGRALS (BUFFER)  ',I10)
  600 FORMAT(///1X,'MEMORY ALLOCATION FOR UHF-SCF CALCULATION',
     1       // 1X,'    START    FINAL   LENGTH    CONTENTS',
     2       // 1X,3I9,4X,'ALPHA EIGENVECTORS',
     3       /  1X,3I9,4X,'ALPHA EIGENVALUES',
     4       /  1X,3I9,4X,'TWO-ELECTRON INTEGRALS',
     5       /  1X,3I9,4X,'ALPHA FOCK MATRIX',
     6       /  1X,3I9,4X,'CORE HAMILTONIAN MATRIX',
     7       /  1X,3I9,4X,'ALPHA DIFFERENCE DENSITY MATRIX',
     8       /  1X,3I9,4X,'ALPHA DENSITY MATRIX',
     9       /  1X,3I9,4X,'BETA  EIGENVECTORS',
     A       /  1X,3I9,4X,'BETA  EIGENVALUES',
     B       /  1X,3I9,4X,'BETA  FOCK MATRIX',
     C       /  1X,3I9,4X,'BETA  DIFFERENCE DENSITY MATRIX',
     D       /  1X,3I9,4X,'BETA  DENSITY MATRIX',
     E       /  1X,3I9,4X,'DIAGONALIZATION BUFFERS')
  610 FORMAT(///1X,'MEMORY ALLOCATION FOR RHF-SCF CALCULATION',
     1       // 1X,'    START    FINAL   LENGTH    CONTENTS',
     2       // 1X,3I9,4X,'EIGENVECTORS',
     3       /  1X,3I9,4X,'EIGENVALUES',
     4       /  1X,3I9,4X,'TWO-ELECTRON INTEGRALS',
     5       /  1X,3I9,4X,'FOCK MATRIX',
     6       /  1X,3I9,4X,'CORE HAMILTONIAN MATRIX',
     7       /  1X,3I9,4X,'DIFFERENCE DENSITY MATRIX',
     8       /  1X,3I9,4X,'DENSITY MATRIX',
     9       /  1X,3I9,4X,'DIAGONALIZATION BUFFERS')
  630 FORMAT(///1X,'*** COMMENTS ON MEMORY ALLOCATION ***')
  640 FORMAT(/  1X,'IMODE HAS BEEN RESET FROM 0 TO',I3,'.',
     1       /  1X,'THIS REDUCES THE MEMORY FOR THE TWO-ELECTRON ',
     2             'INTEGRALS FROM',I10,'   TO',I10,'   WORDS',
     3       /  1X,'BUT LEADS TO HIGHER EXECUTION TIMES.')
  650 FORMAT(   1X,'THE TWO-ELECTRON INTEGRALS ARE STORED ON FILE.')
  660 FORMAT(/  1X,'THE SAME BUFFER IN MEMORY IS USED FOR THE ',
     1             'GEOMETRY OPTIMIZATION AND SCF CALCULATION.',
     2       /  1X,'THIS BUFFER IS AUTOMATICALLY SAVED ON FILE.')
  670 FORMAT(   1X,'OPTION IFAST=1 IS USED FOR DIAGONALIZATIONS.')
  680 FORMAT(/  1X,'THE SAME BUFFER IN MEMORY IS USED FOR SEVERAL ',
     1             'ARRAYS IN THE SCF CALCULATION.',
     2       /  1X,'THIS BUFFER IS AUTOMATICALLY SAVED ON FILE.')
  690 FORMAT(/  1X,'THE DENSITY MATRIX IS AUTOMATICALLY SAVED ON FILE.')
  900 FORMAT(///1X,'*** ERROR ****',
     1       // 1X,'DUE TO INSUFFICIENT MEMORY THE PROGRAM CANNOT ',
     2             'CARRY OUT THE SCF CALCULATION.')
  910 FORMAT(/  1X,'AVAILABLE LENGTH OF BLANK COMMON           ',I10,
     1       /  1X,'MINIMUM FIELD LENGTH REQUIRED FOR SCF      ',I10,
     2       /  1X,'FIELD LENGTH REQUIRED FOR IN-CORE SCF      ',I10)
      END
